{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fraction = exports.Header = exports.Misbehaviour = exports.ConsensusState = exports.ClientState = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst duration_1 = require(\"../../../../google/protobuf/duration\");\nconst client_1 = require(\"../../../../ibc/core/client/v1/client\");\nconst commitment_1 = require(\"../../../../ibc/core/commitment/v1/commitment\");\nconst types_1 = require(\"../../../../tendermint/types/types\");\nconst validator_1 = require(\"../../../../tendermint/types/validator\");\nconst timestamp_1 = require(\"../../../../google/protobuf/timestamp\");\nconst proofs_1 = require(\"../../../../confio/proofs\");\nexports.protobufPackage = \"ibc.lightclients.tendermint.v1\";\nconst baseClientState = {\n  chainId: \"\",\n  upgradePath: \"\",\n  allowUpdateAfterExpiry: false,\n  allowUpdateAfterMisbehaviour: false\n};\nexports.ClientState = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.chainId !== \"\") {\n      writer.uint32(10).string(message.chainId);\n    }\n    if (message.trustLevel !== undefined) {\n      exports.Fraction.encode(message.trustLevel, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.trustingPeriod !== undefined) {\n      duration_1.Duration.encode(message.trustingPeriod, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.unbondingPeriod !== undefined) {\n      duration_1.Duration.encode(message.unbondingPeriod, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.maxClockDrift !== undefined) {\n      duration_1.Duration.encode(message.maxClockDrift, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.frozenHeight !== undefined) {\n      client_1.Height.encode(message.frozenHeight, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.latestHeight !== undefined) {\n      client_1.Height.encode(message.latestHeight, writer.uint32(58).fork()).ldelim();\n    }\n    for (const v of message.proofSpecs) {\n      proofs_1.ProofSpec.encode(v, writer.uint32(66).fork()).ldelim();\n    }\n    for (const v of message.upgradePath) {\n      writer.uint32(74).string(v);\n    }\n    if (message.allowUpdateAfterExpiry === true) {\n      writer.uint32(80).bool(message.allowUpdateAfterExpiry);\n    }\n    if (message.allowUpdateAfterMisbehaviour === true) {\n      writer.uint32(88).bool(message.allowUpdateAfterMisbehaviour);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseClientState);\n    message.proofSpecs = [];\n    message.upgradePath = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.chainId = reader.string();\n          break;\n        case 2:\n          message.trustLevel = exports.Fraction.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.trustingPeriod = duration_1.Duration.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.unbondingPeriod = duration_1.Duration.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.maxClockDrift = duration_1.Duration.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.frozenHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.latestHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 8:\n          message.proofSpecs.push(proofs_1.ProofSpec.decode(reader, reader.uint32()));\n          break;\n        case 9:\n          message.upgradePath.push(reader.string());\n          break;\n        case 10:\n          message.allowUpdateAfterExpiry = reader.bool();\n          break;\n        case 11:\n          message.allowUpdateAfterMisbehaviour = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseClientState);\n    message.proofSpecs = [];\n    message.upgradePath = [];\n    if (object.chainId !== undefined && object.chainId !== null) {\n      message.chainId = String(object.chainId);\n    } else {\n      message.chainId = \"\";\n    }\n    if (object.trustLevel !== undefined && object.trustLevel !== null) {\n      message.trustLevel = exports.Fraction.fromJSON(object.trustLevel);\n    } else {\n      message.trustLevel = undefined;\n    }\n    if (object.trustingPeriod !== undefined && object.trustingPeriod !== null) {\n      message.trustingPeriod = duration_1.Duration.fromJSON(object.trustingPeriod);\n    } else {\n      message.trustingPeriod = undefined;\n    }\n    if (object.unbondingPeriod !== undefined && object.unbondingPeriod !== null) {\n      message.unbondingPeriod = duration_1.Duration.fromJSON(object.unbondingPeriod);\n    } else {\n      message.unbondingPeriod = undefined;\n    }\n    if (object.maxClockDrift !== undefined && object.maxClockDrift !== null) {\n      message.maxClockDrift = duration_1.Duration.fromJSON(object.maxClockDrift);\n    } else {\n      message.maxClockDrift = undefined;\n    }\n    if (object.frozenHeight !== undefined && object.frozenHeight !== null) {\n      message.frozenHeight = client_1.Height.fromJSON(object.frozenHeight);\n    } else {\n      message.frozenHeight = undefined;\n    }\n    if (object.latestHeight !== undefined && object.latestHeight !== null) {\n      message.latestHeight = client_1.Height.fromJSON(object.latestHeight);\n    } else {\n      message.latestHeight = undefined;\n    }\n    if (object.proofSpecs !== undefined && object.proofSpecs !== null) {\n      for (const e of object.proofSpecs) {\n        message.proofSpecs.push(proofs_1.ProofSpec.fromJSON(e));\n      }\n    }\n    if (object.upgradePath !== undefined && object.upgradePath !== null) {\n      for (const e of object.upgradePath) {\n        message.upgradePath.push(String(e));\n      }\n    }\n    if (object.allowUpdateAfterExpiry !== undefined && object.allowUpdateAfterExpiry !== null) {\n      message.allowUpdateAfterExpiry = Boolean(object.allowUpdateAfterExpiry);\n    } else {\n      message.allowUpdateAfterExpiry = false;\n    }\n    if (object.allowUpdateAfterMisbehaviour !== undefined && object.allowUpdateAfterMisbehaviour !== null) {\n      message.allowUpdateAfterMisbehaviour = Boolean(object.allowUpdateAfterMisbehaviour);\n    } else {\n      message.allowUpdateAfterMisbehaviour = false;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.trustLevel !== undefined && (obj.trustLevel = message.trustLevel ? exports.Fraction.toJSON(message.trustLevel) : undefined);\n    message.trustingPeriod !== undefined && (obj.trustingPeriod = message.trustingPeriod ? duration_1.Duration.toJSON(message.trustingPeriod) : undefined);\n    message.unbondingPeriod !== undefined && (obj.unbondingPeriod = message.unbondingPeriod ? duration_1.Duration.toJSON(message.unbondingPeriod) : undefined);\n    message.maxClockDrift !== undefined && (obj.maxClockDrift = message.maxClockDrift ? duration_1.Duration.toJSON(message.maxClockDrift) : undefined);\n    message.frozenHeight !== undefined && (obj.frozenHeight = message.frozenHeight ? client_1.Height.toJSON(message.frozenHeight) : undefined);\n    message.latestHeight !== undefined && (obj.latestHeight = message.latestHeight ? client_1.Height.toJSON(message.latestHeight) : undefined);\n    if (message.proofSpecs) {\n      obj.proofSpecs = message.proofSpecs.map(e => e ? proofs_1.ProofSpec.toJSON(e) : undefined);\n    } else {\n      obj.proofSpecs = [];\n    }\n    if (message.upgradePath) {\n      obj.upgradePath = message.upgradePath.map(e => e);\n    } else {\n      obj.upgradePath = [];\n    }\n    message.allowUpdateAfterExpiry !== undefined && (obj.allowUpdateAfterExpiry = message.allowUpdateAfterExpiry);\n    message.allowUpdateAfterMisbehaviour !== undefined && (obj.allowUpdateAfterMisbehaviour = message.allowUpdateAfterMisbehaviour);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseClientState);\n    message.proofSpecs = [];\n    message.upgradePath = [];\n    if (object.chainId !== undefined && object.chainId !== null) {\n      message.chainId = object.chainId;\n    } else {\n      message.chainId = \"\";\n    }\n    if (object.trustLevel !== undefined && object.trustLevel !== null) {\n      message.trustLevel = exports.Fraction.fromPartial(object.trustLevel);\n    } else {\n      message.trustLevel = undefined;\n    }\n    if (object.trustingPeriod !== undefined && object.trustingPeriod !== null) {\n      message.trustingPeriod = duration_1.Duration.fromPartial(object.trustingPeriod);\n    } else {\n      message.trustingPeriod = undefined;\n    }\n    if (object.unbondingPeriod !== undefined && object.unbondingPeriod !== null) {\n      message.unbondingPeriod = duration_1.Duration.fromPartial(object.unbondingPeriod);\n    } else {\n      message.unbondingPeriod = undefined;\n    }\n    if (object.maxClockDrift !== undefined && object.maxClockDrift !== null) {\n      message.maxClockDrift = duration_1.Duration.fromPartial(object.maxClockDrift);\n    } else {\n      message.maxClockDrift = undefined;\n    }\n    if (object.frozenHeight !== undefined && object.frozenHeight !== null) {\n      message.frozenHeight = client_1.Height.fromPartial(object.frozenHeight);\n    } else {\n      message.frozenHeight = undefined;\n    }\n    if (object.latestHeight !== undefined && object.latestHeight !== null) {\n      message.latestHeight = client_1.Height.fromPartial(object.latestHeight);\n    } else {\n      message.latestHeight = undefined;\n    }\n    if (object.proofSpecs !== undefined && object.proofSpecs !== null) {\n      for (const e of object.proofSpecs) {\n        message.proofSpecs.push(proofs_1.ProofSpec.fromPartial(e));\n      }\n    }\n    if (object.upgradePath !== undefined && object.upgradePath !== null) {\n      for (const e of object.upgradePath) {\n        message.upgradePath.push(e);\n      }\n    }\n    if (object.allowUpdateAfterExpiry !== undefined && object.allowUpdateAfterExpiry !== null) {\n      message.allowUpdateAfterExpiry = object.allowUpdateAfterExpiry;\n    } else {\n      message.allowUpdateAfterExpiry = false;\n    }\n    if (object.allowUpdateAfterMisbehaviour !== undefined && object.allowUpdateAfterMisbehaviour !== null) {\n      message.allowUpdateAfterMisbehaviour = object.allowUpdateAfterMisbehaviour;\n    } else {\n      message.allowUpdateAfterMisbehaviour = false;\n    }\n    return message;\n  }\n};\nconst baseConsensusState = {};\nexports.ConsensusState = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.timestamp !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).ldelim();\n    }\n    if (message.root !== undefined) {\n      commitment_1.MerkleRoot.encode(message.root, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.nextValidatorsHash.length !== 0) {\n      writer.uint32(26).bytes(message.nextValidatorsHash);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseConsensusState);\n    message.nextValidatorsHash = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.root = commitment_1.MerkleRoot.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.nextValidatorsHash = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseConsensusState);\n    message.nextValidatorsHash = new Uint8Array();\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = fromJsonTimestamp(object.timestamp);\n    } else {\n      message.timestamp = undefined;\n    }\n    if (object.root !== undefined && object.root !== null) {\n      message.root = commitment_1.MerkleRoot.fromJSON(object.root);\n    } else {\n      message.root = undefined;\n    }\n    if (object.nextValidatorsHash !== undefined && object.nextValidatorsHash !== null) {\n      message.nextValidatorsHash = bytesFromBase64(object.nextValidatorsHash);\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());\n    message.root !== undefined && (obj.root = message.root ? commitment_1.MerkleRoot.toJSON(message.root) : undefined);\n    message.nextValidatorsHash !== undefined && (obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash !== undefined ? message.nextValidatorsHash : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseConsensusState);\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = object.timestamp;\n    } else {\n      message.timestamp = undefined;\n    }\n    if (object.root !== undefined && object.root !== null) {\n      message.root = commitment_1.MerkleRoot.fromPartial(object.root);\n    } else {\n      message.root = undefined;\n    }\n    if (object.nextValidatorsHash !== undefined && object.nextValidatorsHash !== null) {\n      message.nextValidatorsHash = object.nextValidatorsHash;\n    } else {\n      message.nextValidatorsHash = new Uint8Array();\n    }\n    return message;\n  }\n};\nconst baseMisbehaviour = {\n  clientId: \"\"\n};\nexports.Misbehaviour = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.clientId !== \"\") {\n      writer.uint32(10).string(message.clientId);\n    }\n    if (message.header1 !== undefined) {\n      exports.Header.encode(message.header1, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.header2 !== undefined) {\n      exports.Header.encode(message.header2, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMisbehaviour);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.clientId = reader.string();\n          break;\n        case 2:\n          message.header1 = exports.Header.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.header2 = exports.Header.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMisbehaviour);\n    if (object.clientId !== undefined && object.clientId !== null) {\n      message.clientId = String(object.clientId);\n    } else {\n      message.clientId = \"\";\n    }\n    if (object.header1 !== undefined && object.header1 !== null) {\n      message.header1 = exports.Header.fromJSON(object.header1);\n    } else {\n      message.header1 = undefined;\n    }\n    if (object.header2 !== undefined && object.header2 !== null) {\n      message.header2 = exports.Header.fromJSON(object.header2);\n    } else {\n      message.header2 = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.clientId !== undefined && (obj.clientId = message.clientId);\n    message.header1 !== undefined && (obj.header1 = message.header1 ? exports.Header.toJSON(message.header1) : undefined);\n    message.header2 !== undefined && (obj.header2 = message.header2 ? exports.Header.toJSON(message.header2) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMisbehaviour);\n    if (object.clientId !== undefined && object.clientId !== null) {\n      message.clientId = object.clientId;\n    } else {\n      message.clientId = \"\";\n    }\n    if (object.header1 !== undefined && object.header1 !== null) {\n      message.header1 = exports.Header.fromPartial(object.header1);\n    } else {\n      message.header1 = undefined;\n    }\n    if (object.header2 !== undefined && object.header2 !== null) {\n      message.header2 = exports.Header.fromPartial(object.header2);\n    } else {\n      message.header2 = undefined;\n    }\n    return message;\n  }\n};\nconst baseHeader = {};\nexports.Header = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.signedHeader !== undefined) {\n      types_1.SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.validatorSet !== undefined) {\n      validator_1.ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.trustedHeight !== undefined) {\n      client_1.Height.encode(message.trustedHeight, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.trustedValidators !== undefined) {\n      validator_1.ValidatorSet.encode(message.trustedValidators, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseHeader);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signedHeader = types_1.SignedHeader.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.validatorSet = validator_1.ValidatorSet.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.trustedHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.trustedValidators = validator_1.ValidatorSet.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseHeader);\n    if (object.signedHeader !== undefined && object.signedHeader !== null) {\n      message.signedHeader = types_1.SignedHeader.fromJSON(object.signedHeader);\n    } else {\n      message.signedHeader = undefined;\n    }\n    if (object.validatorSet !== undefined && object.validatorSet !== null) {\n      message.validatorSet = validator_1.ValidatorSet.fromJSON(object.validatorSet);\n    } else {\n      message.validatorSet = undefined;\n    }\n    if (object.trustedHeight !== undefined && object.trustedHeight !== null) {\n      message.trustedHeight = client_1.Height.fromJSON(object.trustedHeight);\n    } else {\n      message.trustedHeight = undefined;\n    }\n    if (object.trustedValidators !== undefined && object.trustedValidators !== null) {\n      message.trustedValidators = validator_1.ValidatorSet.fromJSON(object.trustedValidators);\n    } else {\n      message.trustedValidators = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.signedHeader !== undefined && (obj.signedHeader = message.signedHeader ? types_1.SignedHeader.toJSON(message.signedHeader) : undefined);\n    message.validatorSet !== undefined && (obj.validatorSet = message.validatorSet ? validator_1.ValidatorSet.toJSON(message.validatorSet) : undefined);\n    message.trustedHeight !== undefined && (obj.trustedHeight = message.trustedHeight ? client_1.Height.toJSON(message.trustedHeight) : undefined);\n    message.trustedValidators !== undefined && (obj.trustedValidators = message.trustedValidators ? validator_1.ValidatorSet.toJSON(message.trustedValidators) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseHeader);\n    if (object.signedHeader !== undefined && object.signedHeader !== null) {\n      message.signedHeader = types_1.SignedHeader.fromPartial(object.signedHeader);\n    } else {\n      message.signedHeader = undefined;\n    }\n    if (object.validatorSet !== undefined && object.validatorSet !== null) {\n      message.validatorSet = validator_1.ValidatorSet.fromPartial(object.validatorSet);\n    } else {\n      message.validatorSet = undefined;\n    }\n    if (object.trustedHeight !== undefined && object.trustedHeight !== null) {\n      message.trustedHeight = client_1.Height.fromPartial(object.trustedHeight);\n    } else {\n      message.trustedHeight = undefined;\n    }\n    if (object.trustedValidators !== undefined && object.trustedValidators !== null) {\n      message.trustedValidators = validator_1.ValidatorSet.fromPartial(object.trustedValidators);\n    } else {\n      message.trustedValidators = undefined;\n    }\n    return message;\n  }\n};\nconst baseFraction = {\n  numerator: long_1.default.UZERO,\n  denominator: long_1.default.UZERO\n};\nexports.Fraction = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.numerator.isZero()) {\n      writer.uint32(8).uint64(message.numerator);\n    }\n    if (!message.denominator.isZero()) {\n      writer.uint32(16).uint64(message.denominator);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseFraction);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.numerator = reader.uint64();\n          break;\n        case 2:\n          message.denominator = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseFraction);\n    if (object.numerator !== undefined && object.numerator !== null) {\n      message.numerator = long_1.default.fromString(object.numerator);\n    } else {\n      message.numerator = long_1.default.UZERO;\n    }\n    if (object.denominator !== undefined && object.denominator !== null) {\n      message.denominator = long_1.default.fromString(object.denominator);\n    } else {\n      message.denominator = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.numerator !== undefined && (obj.numerator = (message.numerator || long_1.default.UZERO).toString());\n    message.denominator !== undefined && (obj.denominator = (message.denominator || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseFraction);\n    if (object.numerator !== undefined && object.numerator !== null) {\n      message.numerator = object.numerator;\n    } else {\n      message.numerator = long_1.default.UZERO;\n    }\n    if (object.denominator !== undefined && object.denominator !== null) {\n      message.denominator = object.denominator;\n    } else {\n      message.denominator = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nfunction toTimestamp(date) {\n  const seconds = numberToLong(date.getTime() / 1000);\n  const nanos = date.getTime() % 1000 * 1000000;\n  return {\n    seconds,\n    nanos\n  };\n}\nfunction fromTimestamp(t) {\n  let millis = t.seconds.toNumber() * 1000;\n  millis += t.nanos / 1000000;\n  return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n  }\n}\nfunction numberToLong(number) {\n  return long_1.default.fromNumber(number);\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tendermint.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}