{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { CONFIG } from '../consts/config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./unit.pipe\";\nexport let LpSplitPipe = /*#__PURE__*/(() => {\n  class LpSplitPipe {\n    constructor(unitPipe) {\n      this.unitPipe = unitPipe;\n    }\n    transform(lp, poolResponse, vault, digitsInfo) {\n      var _a, _b, _c, _d, _e, _f;\n      if (typeof lp !== 'number' || !poolResponse) {\n        return undefined;\n      }\n      const fullLp = new BigNumber(lp).times(CONFIG.UNIT);\n      const amount1 = fullLp.times(poolResponse.assets[0].amount).div(poolResponse.total_share).toString();\n      const amount2 = fullLp.times(poolResponse.assets[1].amount).div(poolResponse.total_share).toString();\n      const asset0Token = ((_a = poolResponse.assets[0].info.token) === null || _a === void 0 ? void 0 : _a['contract_addr']) || ((_b = poolResponse.assets[0].info.native_token) === null || _b === void 0 ? void 0 : _b['denom']);\n      const baseToken = ((_d = (_c = vault.baseAssetInfo) === null || _c === void 0 ? void 0 : _c['token']) === null || _d === void 0 ? void 0 : _d['contract_addr']) || ((_f = (_e = vault.baseAssetInfo) === null || _e === void 0 ? void 0 : _e['native_token']) === null || _f === void 0 ? void 0 : _f['denom']);\n      if (asset0Token === baseToken) {\n        return `${this.unitPipe.transform(amount1, vault.baseDecimals, digitsInfo)} ${vault.baseSymbol} + ${this.unitPipe.transform(amount2, vault.denomDecimals, digitsInfo)} ${vault.denomSymbol}`;\n      } else {\n        return `${this.unitPipe.transform(amount2, vault.baseDecimals, digitsInfo)} ${vault.baseSymbol} + ${this.unitPipe.transform(amount1, vault.denomDecimals, digitsInfo)} ${vault.denomSymbol}`;\n      }\n    }\n  }\n  LpSplitPipe.ɵfac = function LpSplitPipe_Factory(t) {\n    return new (t || LpSplitPipe)(i0.ɵɵdirectiveInject(i1.UnitPipe, 16));\n  };\n  LpSplitPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"lpSplit\",\n    type: LpSplitPipe,\n    pure: true\n  });\n  return LpSplitPipe;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}