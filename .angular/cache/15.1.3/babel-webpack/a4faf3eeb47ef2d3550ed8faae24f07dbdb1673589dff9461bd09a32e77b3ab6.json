{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgClientImpl = exports.MsgSwapSendResponse = exports.MsgSwapSend = exports.MsgSwapResponse = exports.MsgSwap = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nexports.protobufPackage = \"terra.market.v1beta1\";\nconst baseMsgSwap = {\n  trader: \"\",\n  askDenom: \"\"\n};\nexports.MsgSwap = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.trader !== \"\") {\n      writer.uint32(10).string(message.trader);\n    }\n    if (message.offerCoin !== undefined) {\n      coin_1.Coin.encode(message.offerCoin, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.askDenom !== \"\") {\n      writer.uint32(26).string(message.askDenom);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgSwap);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.trader = reader.string();\n          break;\n        case 2:\n          message.offerCoin = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.askDenom = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgSwap);\n    if (object.trader !== undefined && object.trader !== null) {\n      message.trader = String(object.trader);\n    } else {\n      message.trader = \"\";\n    }\n    if (object.offerCoin !== undefined && object.offerCoin !== null) {\n      message.offerCoin = coin_1.Coin.fromJSON(object.offerCoin);\n    } else {\n      message.offerCoin = undefined;\n    }\n    if (object.askDenom !== undefined && object.askDenom !== null) {\n      message.askDenom = String(object.askDenom);\n    } else {\n      message.askDenom = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.trader !== undefined && (obj.trader = message.trader);\n    message.offerCoin !== undefined && (obj.offerCoin = message.offerCoin ? coin_1.Coin.toJSON(message.offerCoin) : undefined);\n    message.askDenom !== undefined && (obj.askDenom = message.askDenom);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgSwap);\n    if (object.trader !== undefined && object.trader !== null) {\n      message.trader = object.trader;\n    } else {\n      message.trader = \"\";\n    }\n    if (object.offerCoin !== undefined && object.offerCoin !== null) {\n      message.offerCoin = coin_1.Coin.fromPartial(object.offerCoin);\n    } else {\n      message.offerCoin = undefined;\n    }\n    if (object.askDenom !== undefined && object.askDenom !== null) {\n      message.askDenom = object.askDenom;\n    } else {\n      message.askDenom = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgSwapResponse = {};\nexports.MsgSwapResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.swapCoin !== undefined) {\n      coin_1.Coin.encode(message.swapCoin, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.swapFee !== undefined) {\n      coin_1.Coin.encode(message.swapFee, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgSwapResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.swapCoin = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.swapFee = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgSwapResponse);\n    if (object.swapCoin !== undefined && object.swapCoin !== null) {\n      message.swapCoin = coin_1.Coin.fromJSON(object.swapCoin);\n    } else {\n      message.swapCoin = undefined;\n    }\n    if (object.swapFee !== undefined && object.swapFee !== null) {\n      message.swapFee = coin_1.Coin.fromJSON(object.swapFee);\n    } else {\n      message.swapFee = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.swapCoin !== undefined && (obj.swapCoin = message.swapCoin ? coin_1.Coin.toJSON(message.swapCoin) : undefined);\n    message.swapFee !== undefined && (obj.swapFee = message.swapFee ? coin_1.Coin.toJSON(message.swapFee) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgSwapResponse);\n    if (object.swapCoin !== undefined && object.swapCoin !== null) {\n      message.swapCoin = coin_1.Coin.fromPartial(object.swapCoin);\n    } else {\n      message.swapCoin = undefined;\n    }\n    if (object.swapFee !== undefined && object.swapFee !== null) {\n      message.swapFee = coin_1.Coin.fromPartial(object.swapFee);\n    } else {\n      message.swapFee = undefined;\n    }\n    return message;\n  }\n};\nconst baseMsgSwapSend = {\n  fromAddress: \"\",\n  toAddress: \"\",\n  askDenom: \"\"\n};\nexports.MsgSwapSend = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.fromAddress !== \"\") {\n      writer.uint32(10).string(message.fromAddress);\n    }\n    if (message.toAddress !== \"\") {\n      writer.uint32(18).string(message.toAddress);\n    }\n    if (message.offerCoin !== undefined) {\n      coin_1.Coin.encode(message.offerCoin, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.askDenom !== \"\") {\n      writer.uint32(34).string(message.askDenom);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgSwapSend);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.fromAddress = reader.string();\n          break;\n        case 2:\n          message.toAddress = reader.string();\n          break;\n        case 3:\n          message.offerCoin = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.askDenom = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgSwapSend);\n    if (object.fromAddress !== undefined && object.fromAddress !== null) {\n      message.fromAddress = String(object.fromAddress);\n    } else {\n      message.fromAddress = \"\";\n    }\n    if (object.toAddress !== undefined && object.toAddress !== null) {\n      message.toAddress = String(object.toAddress);\n    } else {\n      message.toAddress = \"\";\n    }\n    if (object.offerCoin !== undefined && object.offerCoin !== null) {\n      message.offerCoin = coin_1.Coin.fromJSON(object.offerCoin);\n    } else {\n      message.offerCoin = undefined;\n    }\n    if (object.askDenom !== undefined && object.askDenom !== null) {\n      message.askDenom = String(object.askDenom);\n    } else {\n      message.askDenom = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.fromAddress !== undefined && (obj.fromAddress = message.fromAddress);\n    message.toAddress !== undefined && (obj.toAddress = message.toAddress);\n    message.offerCoin !== undefined && (obj.offerCoin = message.offerCoin ? coin_1.Coin.toJSON(message.offerCoin) : undefined);\n    message.askDenom !== undefined && (obj.askDenom = message.askDenom);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgSwapSend);\n    if (object.fromAddress !== undefined && object.fromAddress !== null) {\n      message.fromAddress = object.fromAddress;\n    } else {\n      message.fromAddress = \"\";\n    }\n    if (object.toAddress !== undefined && object.toAddress !== null) {\n      message.toAddress = object.toAddress;\n    } else {\n      message.toAddress = \"\";\n    }\n    if (object.offerCoin !== undefined && object.offerCoin !== null) {\n      message.offerCoin = coin_1.Coin.fromPartial(object.offerCoin);\n    } else {\n      message.offerCoin = undefined;\n    }\n    if (object.askDenom !== undefined && object.askDenom !== null) {\n      message.askDenom = object.askDenom;\n    } else {\n      message.askDenom = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgSwapSendResponse = {};\nexports.MsgSwapSendResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.swapCoin !== undefined) {\n      coin_1.Coin.encode(message.swapCoin, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.swapFee !== undefined) {\n      coin_1.Coin.encode(message.swapFee, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgSwapSendResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.swapCoin = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.swapFee = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgSwapSendResponse);\n    if (object.swapCoin !== undefined && object.swapCoin !== null) {\n      message.swapCoin = coin_1.Coin.fromJSON(object.swapCoin);\n    } else {\n      message.swapCoin = undefined;\n    }\n    if (object.swapFee !== undefined && object.swapFee !== null) {\n      message.swapFee = coin_1.Coin.fromJSON(object.swapFee);\n    } else {\n      message.swapFee = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.swapCoin !== undefined && (obj.swapCoin = message.swapCoin ? coin_1.Coin.toJSON(message.swapCoin) : undefined);\n    message.swapFee !== undefined && (obj.swapFee = message.swapFee ? coin_1.Coin.toJSON(message.swapFee) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgSwapSendResponse);\n    if (object.swapCoin !== undefined && object.swapCoin !== null) {\n      message.swapCoin = coin_1.Coin.fromPartial(object.swapCoin);\n    } else {\n      message.swapCoin = undefined;\n    }\n    if (object.swapFee !== undefined && object.swapFee !== null) {\n      message.swapFee = coin_1.Coin.fromPartial(object.swapFee);\n    } else {\n      message.swapFee = undefined;\n    }\n    return message;\n  }\n};\nclass MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.Swap = this.Swap.bind(this);\n    this.SwapSend = this.SwapSend.bind(this);\n  }\n  Swap(request) {\n    const data = exports.MsgSwap.encode(request).finish();\n    const promise = this.rpc.request(\"terra.market.v1beta1.Msg\", \"Swap\", data);\n    return promise.then(data => exports.MsgSwapResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  SwapSend(request) {\n    const data = exports.MsgSwapSend.encode(request).finish();\n    const promise = this.rpc.request(\"terra.market.v1beta1.Msg\", \"SwapSend\", data);\n    return promise.then(data => exports.MsgSwapSendResponse.decode(new minimal_1.default.Reader(data)));\n  }\n}\nexports.MsgClientImpl = MsgClientImpl;\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}