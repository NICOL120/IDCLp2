{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ModuleVersion = exports.CancelSoftwareUpgradeProposal = exports.SoftwareUpgradeProposal = exports.Plan = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst any_1 = require(\"../../../google/protobuf/any\");\nconst timestamp_1 = require(\"../../../google/protobuf/timestamp\");\nexports.protobufPackage = \"cosmos.upgrade.v1beta1\";\nconst basePlan = {\n  name: \"\",\n  height: long_1.default.ZERO,\n  info: \"\"\n};\nexports.Plan = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    if (message.time !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.height.isZero()) {\n      writer.uint32(24).int64(message.height);\n    }\n    if (message.info !== \"\") {\n      writer.uint32(34).string(message.info);\n    }\n    if (message.upgradedClientState !== undefined) {\n      any_1.Any.encode(message.upgradedClientState, writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, basePlan);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.name = reader.string();\n          break;\n        case 2:\n          message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n        case 3:\n          message.height = reader.int64();\n          break;\n        case 4:\n          message.info = reader.string();\n          break;\n        case 5:\n          message.upgradedClientState = any_1.Any.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, basePlan);\n    if (object.name !== undefined && object.name !== null) {\n      message.name = String(object.name);\n    } else {\n      message.name = \"\";\n    }\n    if (object.time !== undefined && object.time !== null) {\n      message.time = fromJsonTimestamp(object.time);\n    } else {\n      message.time = undefined;\n    }\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n    if (object.info !== undefined && object.info !== null) {\n      message.info = String(object.info);\n    } else {\n      message.info = \"\";\n    }\n    if (object.upgradedClientState !== undefined && object.upgradedClientState !== null) {\n      message.upgradedClientState = any_1.Any.fromJSON(object.upgradedClientState);\n    } else {\n      message.upgradedClientState = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.name !== undefined && (obj.name = message.name);\n    message.time !== undefined && (obj.time = message.time.toISOString());\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.info !== undefined && (obj.info = message.info);\n    message.upgradedClientState !== undefined && (obj.upgradedClientState = message.upgradedClientState ? any_1.Any.toJSON(message.upgradedClientState) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, basePlan);\n    if (object.name !== undefined && object.name !== null) {\n      message.name = object.name;\n    } else {\n      message.name = \"\";\n    }\n    if (object.time !== undefined && object.time !== null) {\n      message.time = object.time;\n    } else {\n      message.time = undefined;\n    }\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n    if (object.info !== undefined && object.info !== null) {\n      message.info = object.info;\n    } else {\n      message.info = \"\";\n    }\n    if (object.upgradedClientState !== undefined && object.upgradedClientState !== null) {\n      message.upgradedClientState = any_1.Any.fromPartial(object.upgradedClientState);\n    } else {\n      message.upgradedClientState = undefined;\n    }\n    return message;\n  }\n};\nconst baseSoftwareUpgradeProposal = {\n  title: \"\",\n  description: \"\"\n};\nexports.SoftwareUpgradeProposal = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.title !== \"\") {\n      writer.uint32(10).string(message.title);\n    }\n    if (message.description !== \"\") {\n      writer.uint32(18).string(message.description);\n    }\n    if (message.plan !== undefined) {\n      exports.Plan.encode(message.plan, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSoftwareUpgradeProposal);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.title = reader.string();\n          break;\n        case 2:\n          message.description = reader.string();\n          break;\n        case 3:\n          message.plan = exports.Plan.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseSoftwareUpgradeProposal);\n    if (object.title !== undefined && object.title !== null) {\n      message.title = String(object.title);\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = String(object.description);\n    } else {\n      message.description = \"\";\n    }\n    if (object.plan !== undefined && object.plan !== null) {\n      message.plan = exports.Plan.fromJSON(object.plan);\n    } else {\n      message.plan = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.title !== undefined && (obj.title = message.title);\n    message.description !== undefined && (obj.description = message.description);\n    message.plan !== undefined && (obj.plan = message.plan ? exports.Plan.toJSON(message.plan) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseSoftwareUpgradeProposal);\n    if (object.title !== undefined && object.title !== null) {\n      message.title = object.title;\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = object.description;\n    } else {\n      message.description = \"\";\n    }\n    if (object.plan !== undefined && object.plan !== null) {\n      message.plan = exports.Plan.fromPartial(object.plan);\n    } else {\n      message.plan = undefined;\n    }\n    return message;\n  }\n};\nconst baseCancelSoftwareUpgradeProposal = {\n  title: \"\",\n  description: \"\"\n};\nexports.CancelSoftwareUpgradeProposal = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.title !== \"\") {\n      writer.uint32(10).string(message.title);\n    }\n    if (message.description !== \"\") {\n      writer.uint32(18).string(message.description);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCancelSoftwareUpgradeProposal);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.title = reader.string();\n          break;\n        case 2:\n          message.description = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCancelSoftwareUpgradeProposal);\n    if (object.title !== undefined && object.title !== null) {\n      message.title = String(object.title);\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = String(object.description);\n    } else {\n      message.description = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.title !== undefined && (obj.title = message.title);\n    message.description !== undefined && (obj.description = message.description);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCancelSoftwareUpgradeProposal);\n    if (object.title !== undefined && object.title !== null) {\n      message.title = object.title;\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = object.description;\n    } else {\n      message.description = \"\";\n    }\n    return message;\n  }\n};\nconst baseModuleVersion = {\n  name: \"\",\n  version: long_1.default.UZERO\n};\nexports.ModuleVersion = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    if (!message.version.isZero()) {\n      writer.uint32(16).uint64(message.version);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseModuleVersion);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.name = reader.string();\n          break;\n        case 2:\n          message.version = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseModuleVersion);\n    if (object.name !== undefined && object.name !== null) {\n      message.name = String(object.name);\n    } else {\n      message.name = \"\";\n    }\n    if (object.version !== undefined && object.version !== null) {\n      message.version = long_1.default.fromString(object.version);\n    } else {\n      message.version = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.name !== undefined && (obj.name = message.name);\n    message.version !== undefined && (obj.version = (message.version || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseModuleVersion);\n    if (object.name !== undefined && object.name !== null) {\n      message.name = object.name;\n    } else {\n      message.name = \"\";\n    }\n    if (object.version !== undefined && object.version !== null) {\n      message.version = object.version;\n    } else {\n      message.version = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nfunction toTimestamp(date) {\n  const seconds = numberToLong(date.getTime() / 1000);\n  const nanos = date.getTime() % 1000 * 1000000;\n  return {\n    seconds,\n    nanos\n  };\n}\nfunction fromTimestamp(t) {\n  let millis = t.seconds.toNumber() * 1000;\n  millis += t.nanos / 1000000;\n  return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n  }\n}\nfunction numberToLong(number) {\n  return long_1.default.fromNumber(number);\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=upgrade.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}