{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Version = void 0;\nvar connection_1 = require(\"@terra-money/terra.proto/ibc/core/connection/v1/connection\");\nvar json_1 = require(\"../../../../util/json\");\n/*\n * Version defines the versioning scheme used to negotiate the IBC verison in the connection handshake.\n */\nvar Version = /** @class */function (_super) {\n  __extends(Version, _super);\n  /**\n   * @param identifier unique version identifier\n   * @param features list of features compatible with the specified identifier\n   */\n  function Version(identifier, features) {\n    var _this = _super.call(this) || this;\n    _this.identifier = identifier;\n    _this.features = features;\n    return _this;\n  }\n  Version.fromAmino = function (data) {\n    var identifier = data.identifier,\n      features = data.features;\n    return new Version(identifier, features);\n  };\n  Version.prototype.toAmino = function () {\n    var _a = this,\n      identifier = _a.identifier,\n      features = _a.features;\n    var res = {\n      identifier: identifier,\n      features: features\n    };\n    return res;\n  };\n  Version.fromData = function (data) {\n    var identifier = data.identifier,\n      features = data.features;\n    return new Version(identifier, features);\n  };\n  Version.prototype.toData = function () {\n    var _a = this,\n      identifier = _a.identifier,\n      features = _a.features;\n    var res = {\n      identifier: identifier,\n      features: features\n    };\n    return res;\n  };\n  Version.fromProto = function (proto) {\n    return new Version(proto.identifier, proto.features);\n  };\n  Version.prototype.toProto = function () {\n    var _a = this,\n      identifier = _a.identifier,\n      features = _a.features;\n    return connection_1.Version.fromPartial({\n      identifier: identifier,\n      features: features\n    });\n  };\n  return Version;\n}(json_1.JSONSerializable);\nexports.Version = Version;\n//# sourceMappingURL=Version.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}