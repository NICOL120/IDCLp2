{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HashedParams = exports.VersionParams = exports.ValidatorParams = exports.EvidenceParams = exports.BlockParams = exports.ConsensusParams = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst duration_1 = require(\"../../google/protobuf/duration\");\nexports.protobufPackage = \"tendermint.types\";\nconst baseConsensusParams = {};\nexports.ConsensusParams = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.block !== undefined) {\n      exports.BlockParams.encode(message.block, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.evidence !== undefined) {\n      exports.EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.validator !== undefined) {\n      exports.ValidatorParams.encode(message.validator, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.version !== undefined) {\n      exports.VersionParams.encode(message.version, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseConsensusParams);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.block = exports.BlockParams.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.evidence = exports.EvidenceParams.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.validator = exports.ValidatorParams.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.version = exports.VersionParams.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseConsensusParams);\n    if (object.block !== undefined && object.block !== null) {\n      message.block = exports.BlockParams.fromJSON(object.block);\n    } else {\n      message.block = undefined;\n    }\n    if (object.evidence !== undefined && object.evidence !== null) {\n      message.evidence = exports.EvidenceParams.fromJSON(object.evidence);\n    } else {\n      message.evidence = undefined;\n    }\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = exports.ValidatorParams.fromJSON(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n    if (object.version !== undefined && object.version !== null) {\n      message.version = exports.VersionParams.fromJSON(object.version);\n    } else {\n      message.version = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.block !== undefined && (obj.block = message.block ? exports.BlockParams.toJSON(message.block) : undefined);\n    message.evidence !== undefined && (obj.evidence = message.evidence ? exports.EvidenceParams.toJSON(message.evidence) : undefined);\n    message.validator !== undefined && (obj.validator = message.validator ? exports.ValidatorParams.toJSON(message.validator) : undefined);\n    message.version !== undefined && (obj.version = message.version ? exports.VersionParams.toJSON(message.version) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseConsensusParams);\n    if (object.block !== undefined && object.block !== null) {\n      message.block = exports.BlockParams.fromPartial(object.block);\n    } else {\n      message.block = undefined;\n    }\n    if (object.evidence !== undefined && object.evidence !== null) {\n      message.evidence = exports.EvidenceParams.fromPartial(object.evidence);\n    } else {\n      message.evidence = undefined;\n    }\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = exports.ValidatorParams.fromPartial(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n    if (object.version !== undefined && object.version !== null) {\n      message.version = exports.VersionParams.fromPartial(object.version);\n    } else {\n      message.version = undefined;\n    }\n    return message;\n  }\n};\nconst baseBlockParams = {\n  maxBytes: long_1.default.ZERO,\n  maxGas: long_1.default.ZERO,\n  timeIotaMs: long_1.default.ZERO\n};\nexports.BlockParams = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.maxBytes.isZero()) {\n      writer.uint32(8).int64(message.maxBytes);\n    }\n    if (!message.maxGas.isZero()) {\n      writer.uint32(16).int64(message.maxGas);\n    }\n    if (!message.timeIotaMs.isZero()) {\n      writer.uint32(24).int64(message.timeIotaMs);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseBlockParams);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.maxBytes = reader.int64();\n          break;\n        case 2:\n          message.maxGas = reader.int64();\n          break;\n        case 3:\n          message.timeIotaMs = reader.int64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseBlockParams);\n    if (object.maxBytes !== undefined && object.maxBytes !== null) {\n      message.maxBytes = long_1.default.fromString(object.maxBytes);\n    } else {\n      message.maxBytes = long_1.default.ZERO;\n    }\n    if (object.maxGas !== undefined && object.maxGas !== null) {\n      message.maxGas = long_1.default.fromString(object.maxGas);\n    } else {\n      message.maxGas = long_1.default.ZERO;\n    }\n    if (object.timeIotaMs !== undefined && object.timeIotaMs !== null) {\n      message.timeIotaMs = long_1.default.fromString(object.timeIotaMs);\n    } else {\n      message.timeIotaMs = long_1.default.ZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.maxBytes !== undefined && (obj.maxBytes = (message.maxBytes || long_1.default.ZERO).toString());\n    message.maxGas !== undefined && (obj.maxGas = (message.maxGas || long_1.default.ZERO).toString());\n    message.timeIotaMs !== undefined && (obj.timeIotaMs = (message.timeIotaMs || long_1.default.ZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseBlockParams);\n    if (object.maxBytes !== undefined && object.maxBytes !== null) {\n      message.maxBytes = object.maxBytes;\n    } else {\n      message.maxBytes = long_1.default.ZERO;\n    }\n    if (object.maxGas !== undefined && object.maxGas !== null) {\n      message.maxGas = object.maxGas;\n    } else {\n      message.maxGas = long_1.default.ZERO;\n    }\n    if (object.timeIotaMs !== undefined && object.timeIotaMs !== null) {\n      message.timeIotaMs = object.timeIotaMs;\n    } else {\n      message.timeIotaMs = long_1.default.ZERO;\n    }\n    return message;\n  }\n};\nconst baseEvidenceParams = {\n  maxAgeNumBlocks: long_1.default.ZERO,\n  maxBytes: long_1.default.ZERO\n};\nexports.EvidenceParams = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.maxAgeNumBlocks.isZero()) {\n      writer.uint32(8).int64(message.maxAgeNumBlocks);\n    }\n    if (message.maxAgeDuration !== undefined) {\n      duration_1.Duration.encode(message.maxAgeDuration, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.maxBytes.isZero()) {\n      writer.uint32(24).int64(message.maxBytes);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseEvidenceParams);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.maxAgeNumBlocks = reader.int64();\n          break;\n        case 2:\n          message.maxAgeDuration = duration_1.Duration.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.maxBytes = reader.int64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseEvidenceParams);\n    if (object.maxAgeNumBlocks !== undefined && object.maxAgeNumBlocks !== null) {\n      message.maxAgeNumBlocks = long_1.default.fromString(object.maxAgeNumBlocks);\n    } else {\n      message.maxAgeNumBlocks = long_1.default.ZERO;\n    }\n    if (object.maxAgeDuration !== undefined && object.maxAgeDuration !== null) {\n      message.maxAgeDuration = duration_1.Duration.fromJSON(object.maxAgeDuration);\n    } else {\n      message.maxAgeDuration = undefined;\n    }\n    if (object.maxBytes !== undefined && object.maxBytes !== null) {\n      message.maxBytes = long_1.default.fromString(object.maxBytes);\n    } else {\n      message.maxBytes = long_1.default.ZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.maxAgeNumBlocks !== undefined && (obj.maxAgeNumBlocks = (message.maxAgeNumBlocks || long_1.default.ZERO).toString());\n    message.maxAgeDuration !== undefined && (obj.maxAgeDuration = message.maxAgeDuration ? duration_1.Duration.toJSON(message.maxAgeDuration) : undefined);\n    message.maxBytes !== undefined && (obj.maxBytes = (message.maxBytes || long_1.default.ZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseEvidenceParams);\n    if (object.maxAgeNumBlocks !== undefined && object.maxAgeNumBlocks !== null) {\n      message.maxAgeNumBlocks = object.maxAgeNumBlocks;\n    } else {\n      message.maxAgeNumBlocks = long_1.default.ZERO;\n    }\n    if (object.maxAgeDuration !== undefined && object.maxAgeDuration !== null) {\n      message.maxAgeDuration = duration_1.Duration.fromPartial(object.maxAgeDuration);\n    } else {\n      message.maxAgeDuration = undefined;\n    }\n    if (object.maxBytes !== undefined && object.maxBytes !== null) {\n      message.maxBytes = object.maxBytes;\n    } else {\n      message.maxBytes = long_1.default.ZERO;\n    }\n    return message;\n  }\n};\nconst baseValidatorParams = {\n  pubKeyTypes: \"\"\n};\nexports.ValidatorParams = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.pubKeyTypes) {\n      writer.uint32(10).string(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidatorParams);\n    message.pubKeyTypes = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.pubKeyTypes.push(reader.string());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidatorParams);\n    message.pubKeyTypes = [];\n    if (object.pubKeyTypes !== undefined && object.pubKeyTypes !== null) {\n      for (const e of object.pubKeyTypes) {\n        message.pubKeyTypes.push(String(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.pubKeyTypes) {\n      obj.pubKeyTypes = message.pubKeyTypes.map(e => e);\n    } else {\n      obj.pubKeyTypes = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidatorParams);\n    message.pubKeyTypes = [];\n    if (object.pubKeyTypes !== undefined && object.pubKeyTypes !== null) {\n      for (const e of object.pubKeyTypes) {\n        message.pubKeyTypes.push(e);\n      }\n    }\n    return message;\n  }\n};\nconst baseVersionParams = {\n  appVersion: long_1.default.UZERO\n};\nexports.VersionParams = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.appVersion.isZero()) {\n      writer.uint32(8).uint64(message.appVersion);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseVersionParams);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.appVersion = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseVersionParams);\n    if (object.appVersion !== undefined && object.appVersion !== null) {\n      message.appVersion = long_1.default.fromString(object.appVersion);\n    } else {\n      message.appVersion = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.appVersion !== undefined && (obj.appVersion = (message.appVersion || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseVersionParams);\n    if (object.appVersion !== undefined && object.appVersion !== null) {\n      message.appVersion = object.appVersion;\n    } else {\n      message.appVersion = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst baseHashedParams = {\n  blockMaxBytes: long_1.default.ZERO,\n  blockMaxGas: long_1.default.ZERO\n};\nexports.HashedParams = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.blockMaxBytes.isZero()) {\n      writer.uint32(8).int64(message.blockMaxBytes);\n    }\n    if (!message.blockMaxGas.isZero()) {\n      writer.uint32(16).int64(message.blockMaxGas);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseHashedParams);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.blockMaxBytes = reader.int64();\n          break;\n        case 2:\n          message.blockMaxGas = reader.int64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseHashedParams);\n    if (object.blockMaxBytes !== undefined && object.blockMaxBytes !== null) {\n      message.blockMaxBytes = long_1.default.fromString(object.blockMaxBytes);\n    } else {\n      message.blockMaxBytes = long_1.default.ZERO;\n    }\n    if (object.blockMaxGas !== undefined && object.blockMaxGas !== null) {\n      message.blockMaxGas = long_1.default.fromString(object.blockMaxGas);\n    } else {\n      message.blockMaxGas = long_1.default.ZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.blockMaxBytes !== undefined && (obj.blockMaxBytes = (message.blockMaxBytes || long_1.default.ZERO).toString());\n    message.blockMaxGas !== undefined && (obj.blockMaxGas = (message.blockMaxGas || long_1.default.ZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseHashedParams);\n    if (object.blockMaxBytes !== undefined && object.blockMaxBytes !== null) {\n      message.blockMaxBytes = object.blockMaxBytes;\n    } else {\n      message.blockMaxBytes = long_1.default.ZERO;\n    }\n    if (object.blockMaxGas !== undefined && object.blockMaxGas !== null) {\n      message.blockMaxGas = object.blockMaxGas;\n    } else {\n      message.blockMaxGas = long_1.default.ZERO;\n    }\n    return message;\n  }\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=params.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}