{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ripemd160 = exports.sha256 = exports.hashToHex = void 0;\nvar SHA256_1 = require(\"jscrypto/SHA256\");\nvar RIPEMD160_1 = require(\"jscrypto/RIPEMD160\");\nvar Base64_1 = require(\"jscrypto/Base64\");\nvar jscrypto_1 = require(\"jscrypto\");\n/*\nDEPRECATED (was used by crypto-js)\nfunction byteArrayToWordArray(ba: Uint8Array): CryptoJS.LibWordArray {\n  const wa: number[] = [];\n  for (let i = 0; i < ba.length; i += 1) {\n    wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i);\n  }\n  return crypto.lib.WordArray.create(wa);\n}*/\n/**\n * Calculates the transaction hash from Amino-encoded string.\n * @param data Amino-encoded string (base64)\n */\nfunction hashToHex(data) {\n  return SHA256_1.SHA256.hash(Base64_1.Base64.parse(data)).toString().toUpperCase();\n}\nexports.hashToHex = hashToHex;\n/**\n * Calculates the transaction hash from Amino-encoded string.\n * @param data raw bytes\n */\nfunction sha256(data) {\n  return SHA256_1.SHA256.hash(new jscrypto_1.Word32Array(data)).toUint8Array();\n}\nexports.sha256 = sha256;\nfunction ripemd160(data) {\n  return RIPEMD160_1.RIPEMD160.hash(new jscrypto_1.Word32Array(data)).toUint8Array();\n}\nexports.ripemd160 = ripemd160;\n//# sourceMappingURL=hash.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}