{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiSignature = void 0;\nvar PublicKey_1 = require(\"./PublicKey\");\nvar CompactBitArray_1 = require(\"./CompactBitArray\");\nvar SignatureV2_1 = require(\"./SignatureV2\");\nvar MultiSignature = /** @class */function () {\n  /**\n   * MultiSignature constructor\n   * public_keys order must be guaranteed\n   */\n  function MultiSignature(multisig_pubkey) {\n    this.multisig_pubkey = multisig_pubkey;\n    var n = multisig_pubkey.pubkeys.length;\n    this.bitarray = CompactBitArray_1.CompactBitArray.fromBits(n);\n    this.signatures = [];\n  }\n  MultiSignature.prototype.appendSignature = function (signature_data, index) {\n    var newSigIndex = this.bitarray.numTrueBitsBefore(index);\n    // Signature already exists, just replace the value there\n    if (this.bitarray.getIndex(index)) {\n      this.signatures[newSigIndex] = signature_data;\n      return;\n    }\n    this.bitarray.setIndex(index, true);\n    // Optimization if the index is the greatest index\n    if (newSigIndex == this.signatures.length) {\n      this.signatures.push(signature_data);\n      return;\n    }\n    this.signatures.splice(newSigIndex, 0, signature_data);\n  };\n  // adds a signature to the multisig, at the index in\n  // keys corresponding to the provided pubkey.\n  MultiSignature.prototype.appendSignatureFromPubKey = function (signature_data, public_key) {\n    var index = this.multisig_pubkey.pubkeys.findIndex(function (v) {\n      return v.key === public_key.key;\n    });\n    if (index == -1) {\n      throw new Error(\"provided key doesn't exist in public_keys\");\n    }\n    this.appendSignature(signature_data, index);\n  };\n  MultiSignature.prototype.appendSignatureV2s = function (signatures) {\n    for (var _i = 0, signatures_1 = signatures; _i < signatures_1.length; _i++) {\n      var signature = signatures_1[_i];\n      if (!(signature.public_key instanceof PublicKey_1.SimplePublicKey)) {\n        throw new Error('non-SimplePublicKey cannot be used to sign multisig');\n      }\n      this.appendSignatureFromPubKey(signature.data, signature.public_key);\n    }\n  };\n  MultiSignature.prototype.toSignatureDescriptor = function () {\n    return new SignatureV2_1.SignatureV2.Descriptor(new SignatureV2_1.SignatureV2.Descriptor.Multi(this.bitarray, this.signatures));\n  };\n  return MultiSignature;\n}();\nexports.MultiSignature = MultiSignature;\n//# sourceMappingURL=MultiSignature.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}