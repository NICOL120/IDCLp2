{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Coins = void 0;\nvar Coin_1 = require(\"./Coin\");\nvar json_1 = require(\"../util/json\");\n/**\n * Analagous to `sdk.Coins` and `sdk.DecCoins` from Cosmos-SDK, and represents a collection\n * of [[Coin]] objects.\n *\n */\nvar Coins = /** @class */function (_super) {\n  __extends(Coins, _super);\n  /**\n   * @param arg coins to input\n   */\n  function Coins(arg) {\n    if (arg === void 0) {\n      arg = {};\n    }\n    var _this = _super.call(this) || this;\n    if (arg instanceof Coins) {\n      _this._coins = __assign({}, arg._coins);\n    } else if (typeof arg === 'string') {\n      _this._coins = Coins.fromString(arg)._coins;\n    } else {\n      _this._coins = {};\n      var coins_2;\n      if (!Array.isArray(arg)) {\n        coins_2 = [];\n        Object.keys(arg).forEach(function (denom) {\n          return coins_2.push(new Coin_1.Coin(denom, arg[denom]));\n        });\n      } else {\n        coins_2 = arg;\n      }\n      for (var _i = 0, coins_1 = coins_2; _i < coins_1.length; _i++) {\n        var coin = coins_1[_i];\n        var denom = coin.denom;\n        var x = _this._coins[denom];\n        if (x !== undefined) {\n          _this._coins[denom] = x.add(coin);\n        } else {\n          _this._coins[denom] = coin;\n        }\n      }\n      // convert all coins to Dec if one is Dec\n      if (!_this.toArray().every(function (c) {\n        return c.isIntCoin();\n      })) {\n        for (var _a = 0, _b = Object.keys(_this._coins); _a < _b.length; _a++) {\n          var denom = _b[_a];\n          _this._coins[denom] = _this._coins[denom].toDecCoin();\n        }\n      }\n    }\n    return _this;\n  }\n  // implement iterator interface for interop\n  Coins.prototype[Symbol.iterator] = function () {\n    var index = -1;\n    var data = this.toArray();\n    return {\n      next: function () {\n        return {\n          value: data[++index],\n          done: index === data.length\n        };\n      }\n    };\n  };\n  /**\n   * Converts the Coins information to a comma-separated list.\n   *\n   * Eg: `15000ukrw,12000uluna`\n   */\n  Coins.prototype.toString = function () {\n    return this.toArray().map(function (c) {\n      return c.toString();\n    }).join(',');\n  };\n  /**\n   * Converts a comma-separated list of coins to a Coins object\n   *\n   * Eg. `1500ukrw,12302uluna`\n   *\n   * @param str comma-separated list of coins\n   */\n  Coins.fromString = function (str) {\n    var coin_strings = str.split(/,\\s*/);\n    var coins = coin_strings.map(function (s) {\n      return Coin_1.Coin.fromString(s);\n    });\n    return new Coins(coins);\n  };\n  /**\n   * Gets the list of denominations\n   */\n  Coins.prototype.denoms = function () {\n    return this.map(function (c) {\n      return c.denom;\n    });\n  };\n  /**\n   * Creates a new Coins object with all Decimal coins\n   */\n  Coins.prototype.toDecCoins = function () {\n    return new Coins(this.map(function (c) {\n      return c.toDecCoin();\n    }));\n  };\n  /**\n   * Creates a new Coins object with all Integer coins\n   */\n  Coins.prototype.toIntCoins = function () {\n    return new Coins(this.map(function (c) {\n      return c.toIntCoin();\n    }));\n  };\n  /**\n   * Creates a new Coins object with all Integer coins with ceiling the amount\n   */\n  Coins.prototype.toIntCeilCoins = function () {\n    return new Coins(this.map(function (c) {\n      return c.toIntCeilCoin();\n    }));\n  };\n  /**\n   * Gets the Coin for denomination if it exists in the collection.\n   * @param denom denomination to lookup\n   */\n  Coins.prototype.get = function (denom) {\n    return this._coins[denom];\n  };\n  /**\n   * Sets the Coin value for a denomination.\n   * @param denom denomination to set\n   * @param value value to set\n   */\n  Coins.prototype.set = function (denom, value) {\n    var val;\n    if (value instanceof Coin_1.Coin) {\n      if (value.denom != denom) {\n        throw new Error(\"Denoms must match when setting: \".concat(denom, \", \").concat(value.denom));\n      }\n      val = value;\n    } else {\n      val = new Coin_1.Coin(denom, value);\n    }\n    this._coins[denom] = val;\n  };\n  /**\n   * Gets the individual elements of the collection.\n   */\n  Coins.prototype.toArray = function () {\n    return Object.values(this._coins).sort(function (a, b) {\n      return a.denom.localeCompare(b.denom);\n    });\n  };\n  /**\n   * Adds a value from the elements of the collection. Coins of a similar denomination\n   * will be clobbered into one value containing their sum.\n   * @param other\n   */\n  Coins.prototype.add = function (other) {\n    if (other instanceof Coin_1.Coin) {\n      return new Coins(__spreadArray([other], Object.values(this._coins), true));\n    } else {\n      return new Coins(__spreadArray(__spreadArray([], Object.values(other._coins), true), Object.values(this._coins), true));\n    }\n  };\n  /**\n   * Subtracts a value from the elements of the collection.\n   * @param other\n   */\n  Coins.prototype.sub = function (other) {\n    return this.add(other.mul(-1));\n  };\n  /**\n   * Multiplies the elements of the collection by a value.\n   * @param other\n   */\n  Coins.prototype.mul = function (other) {\n    return new Coins(this.map(function (c) {\n      return c.mul(other);\n    }));\n  };\n  /**\n   * Divides the elements of the collection by a value.\n   * @param other\n   */\n  Coins.prototype.div = function (other) {\n    return new Coins(this.map(function (c) {\n      return c.div(other);\n    }));\n  };\n  /**\n   * Modulos the elements of the collection with a value.\n   * @param other\n   */\n  Coins.prototype.mod = function (other) {\n    return new Coins(this.map(function (c) {\n      return c.mod(other);\n    }));\n  };\n  /**\n   * Map a value onto the elements of the Coin collection.\n   * @param fn\n   */\n  Coins.prototype.map = function (fn) {\n    return this.toArray().map(fn);\n  };\n  /**\n   * Filters out the Coin objects that don't match the predicate\n   * @param fn predicate\n   */\n  Coins.prototype.filter = function (fn) {\n    return new Coins(this.toArray().filter(fn));\n  };\n  Coins.fromAmino = function (data) {\n    return new Coins((data !== null && data !== void 0 ? data : []).map(Coin_1.Coin.fromAmino));\n  };\n  Coins.prototype.toAmino = function () {\n    return this.toArray().map(function (c) {\n      return c.toAmino();\n    });\n  };\n  Coins.fromData = function (data) {\n    return new Coins((data !== null && data !== void 0 ? data : []).map(Coin_1.Coin.fromData));\n  };\n  Coins.prototype.toData = function () {\n    return this.toArray().map(function (c) {\n      return c.toData();\n    });\n  };\n  Coins.fromProto = function (data) {\n    return new Coins((data !== null && data !== void 0 ? data : []).map(Coin_1.Coin.fromProto));\n  };\n  Coins.prototype.toProto = function () {\n    return this.toArray().map(function (c) {\n      return c.toProto();\n    });\n  };\n  return Coins;\n}(json_1.JSONSerializable);\nexports.Coins = Coins;\n//# sourceMappingURL=Coins.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}