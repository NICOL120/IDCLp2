{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FungibleTokenPacketData = void 0;\nvar packet_1 = require(\"@terra-money/terra.proto/ibc/applications/transfer/v2/packet\");\nvar json_1 = require(\"../../../../../util/json\");\n/**\n *  FungibleTokenPacketData defines a struct for the packet payload\n * See FungibleTokenPacketData spec:\n * https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures\n */\nvar FungibleTokenPacketData = /** @class */function (_super) {\n  __extends(FungibleTokenPacketData, _super);\n  /**\n   * @param denom the token denomination to be transferred\n   * @param amount the token amount to be transferred\n   * @param sender the sender address\n   * @param receiver the recipient address on the destination chain\n   */\n  function FungibleTokenPacketData(denom, amount, sender, receiver) {\n    var _this = _super.call(this) || this;\n    _this.denom = denom;\n    _this.amount = amount;\n    _this.sender = sender;\n    _this.receiver = receiver;\n    return _this;\n  }\n  FungibleTokenPacketData.fromAmino = function (data) {\n    var denom = data.denom,\n      amount = data.amount,\n      sender = data.sender,\n      receiver = data.receiver;\n    return new FungibleTokenPacketData(denom, amount, sender, receiver);\n  };\n  FungibleTokenPacketData.prototype.toAmino = function () {\n    var _a = this,\n      denom = _a.denom,\n      amount = _a.amount,\n      sender = _a.sender,\n      receiver = _a.receiver;\n    var res = {\n      denom: denom,\n      amount: amount,\n      sender: sender,\n      receiver: receiver\n    };\n    return res;\n  };\n  FungibleTokenPacketData.fromData = function (data) {\n    var denom = data.denom,\n      amount = data.amount,\n      sender = data.sender,\n      receiver = data.receiver;\n    return new FungibleTokenPacketData(denom, amount, sender, receiver);\n  };\n  FungibleTokenPacketData.prototype.toData = function () {\n    var _a = this,\n      denom = _a.denom,\n      amount = _a.amount,\n      sender = _a.sender,\n      receiver = _a.receiver;\n    var res = {\n      denom: denom,\n      amount: amount,\n      sender: sender,\n      receiver: receiver\n    };\n    return res;\n  };\n  FungibleTokenPacketData.fromProto = function (proto) {\n    return new FungibleTokenPacketData(proto.denom, proto.amount, proto.sender, proto.receiver);\n  };\n  FungibleTokenPacketData.prototype.toProto = function () {\n    var _a = this,\n      denom = _a.denom,\n      amount = _a.amount,\n      sender = _a.sender,\n      receiver = _a.receiver;\n    return packet_1.FungibleTokenPacketData.fromPartial({\n      denom: denom,\n      amount: amount,\n      sender: sender,\n      receiver: receiver\n    });\n  };\n  return FungibleTokenPacketData;\n}(json_1.JSONSerializable);\nexports.FungibleTokenPacketData = FungibleTokenPacketData;\n//# sourceMappingURL=FungibleTokenPacketData.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}