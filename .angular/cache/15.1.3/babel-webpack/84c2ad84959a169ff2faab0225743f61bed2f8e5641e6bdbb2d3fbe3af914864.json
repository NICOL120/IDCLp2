{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport BigNumber from 'bignumber.js';\nimport { Denom } from '../../../../consts/denom';\nimport { getStablePrice } from '../../../../libs/stable';\nimport { SYMBOLS } from '../../../../consts/symbol';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../api/spectrum-astroport-generic-farm.service\";\nimport * as i2 from \"../../../terrajs.service\";\nimport * as i3 from \"../../../api/wasm.service\";\nexport let AstroportLunaxLunaFarmInfoService = /*#__PURE__*/(() => {\n  class AstroportLunaxLunaFarmInfoService {\n    constructor(farmService, terrajs, wasm) {\n      this.farmService = farmService;\n      this.terrajs = terrajs;\n      this.wasm = wasm;\n      this.farm = 'Stader';\n      this.farmColor = '#d924c5';\n      this.auditWarning = false;\n      this.farmType = 'LP';\n      this.dex = 'Astroport';\n      this.highlight = false;\n      this.notUseAstroportGqlApr = false;\n      this.availableNetworks = new Set(['mainnet']);\n      this.poolType = 'stable';\n      this.refreshContractOnNetwork();\n    }\n    refreshContractOnNetwork() {\n      this.baseTokenContract = this.terrajs.settings.lunaXToken;\n      this.denomTokenContract = Denom.LUNA;\n      this.poolAprs = [{\n        apr: 0,\n        rewardSymbol: SYMBOLS.ASTRO,\n        rewardContract: this.terrajs.settings.astroToken\n      }];\n      this.farmContract = this.terrajs.settings.astroportLunaXLunaFarm;\n      this.compoundProxyContract = this.terrajs.settings.astroportLunaXLunaFarmCompoundProxy;\n      this.contractOnNetwork = this.terrajs.networkName;\n    }\n    // no LP APR calculation, return 0 to use Astroport API\n    queryPairStats(poolInfos, poolResponses, govVaults, pairInfos, tokenInfos, ulunaPrice, ampStablePairs) {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, function* () {\n        const key = `${this.dex}|${this.baseTokenContract}|${this.denomTokenContract}`;\n        const depositAmountTask = this.wasm.query(this.terrajs.settings.astroportGenerator, {\n          deposit: {\n            lp_token: pairInfos[key].liquidity_token,\n            user: this.farmContract\n          }\n        });\n        const pairs = {};\n        const [depositAmount] = yield Promise.all([depositAmountTask]);\n        const p = poolResponses[key];\n        pairs[key] = {\n          poolAprs: this.poolAprs,\n          poolApy: 0,\n          tvl: '0',\n          multiplier: 0,\n          vaultFee: 0\n        };\n        const [ulunaAsset, lunaXAsset] = ((_b = (_a = p.assets[0].info) === null || _a === void 0 ? void 0 : _a['native_token']) === null || _b === void 0 ? void 0 : _b['denom']) === Denom.LUNA ? [p.assets[0], p.assets[1]] : [p.assets[1], p.assets[0]];\n        if (!ulunaAsset) {\n          return;\n        }\n        const amp = ampStablePairs[key];\n        const lunaXPrice = getStablePrice(+lunaXAsset.amount, +ulunaAsset.amount, +amp);\n        const lunaXSwap = new BigNumber(depositAmount).times(lunaXAsset.amount).div(p.total_share).times(lunaXPrice).integerValue(BigNumber.ROUND_DOWN);\n        const pair = pairs[key];\n        pair.tvl = new BigNumber(depositAmount).times(ulunaAsset.amount).div(p.total_share).plus(lunaXSwap).times(ulunaPrice).toString();\n        return pairs;\n      });\n    }\n    queryReward() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const rewardInfo = yield this.farmService.query(this.farmContract, {\n          reward_info: {\n            staker_addr: this.terrajs.address\n          }\n        });\n        return rewardInfo.reward_info;\n      });\n    }\n  }\n  AstroportLunaxLunaFarmInfoService.ɵfac = function AstroportLunaxLunaFarmInfoService_Factory(t) {\n    return new (t || AstroportLunaxLunaFarmInfoService)(i0.ɵɵinject(i1.SpectrumAstroportGenericFarmService), i0.ɵɵinject(i2.TerrajsService), i0.ɵɵinject(i3.WasmService));\n  };\n  AstroportLunaxLunaFarmInfoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AstroportLunaxLunaFarmInfoService,\n    factory: AstroportLunaxLunaFarmInfoService.ɵfac\n  });\n  return AstroportLunaxLunaFarmInfoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}