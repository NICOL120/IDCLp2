{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SearchTxsResult = exports.TxMsgData = exports.MsgData = exports.SimulationResponse = exports.Result = exports.GasInfo = exports.Attribute = exports.StringEvent = exports.ABCIMessageLog = exports.TxResponse = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst any_1 = require(\"../../../../google/protobuf/any\");\nconst types_1 = require(\"../../../../tendermint/abci/types\");\nexports.protobufPackage = \"cosmos.base.abci.v1beta1\";\nconst baseTxResponse = {\n  height: long_1.default.ZERO,\n  txhash: \"\",\n  codespace: \"\",\n  code: 0,\n  data: \"\",\n  rawLog: \"\",\n  info: \"\",\n  gasWanted: long_1.default.ZERO,\n  gasUsed: long_1.default.ZERO,\n  timestamp: \"\"\n};\nexports.TxResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.height.isZero()) {\n      writer.uint32(8).int64(message.height);\n    }\n    if (message.txhash !== \"\") {\n      writer.uint32(18).string(message.txhash);\n    }\n    if (message.codespace !== \"\") {\n      writer.uint32(26).string(message.codespace);\n    }\n    if (message.code !== 0) {\n      writer.uint32(32).uint32(message.code);\n    }\n    if (message.data !== \"\") {\n      writer.uint32(42).string(message.data);\n    }\n    if (message.rawLog !== \"\") {\n      writer.uint32(50).string(message.rawLog);\n    }\n    for (const v of message.logs) {\n      exports.ABCIMessageLog.encode(v, writer.uint32(58).fork()).ldelim();\n    }\n    if (message.info !== \"\") {\n      writer.uint32(66).string(message.info);\n    }\n    if (!message.gasWanted.isZero()) {\n      writer.uint32(72).int64(message.gasWanted);\n    }\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(80).int64(message.gasUsed);\n    }\n    if (message.tx !== undefined) {\n      any_1.Any.encode(message.tx, writer.uint32(90).fork()).ldelim();\n    }\n    if (message.timestamp !== \"\") {\n      writer.uint32(98).string(message.timestamp);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTxResponse);\n    message.logs = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.int64();\n          break;\n        case 2:\n          message.txhash = reader.string();\n          break;\n        case 3:\n          message.codespace = reader.string();\n          break;\n        case 4:\n          message.code = reader.uint32();\n          break;\n        case 5:\n          message.data = reader.string();\n          break;\n        case 6:\n          message.rawLog = reader.string();\n          break;\n        case 7:\n          message.logs.push(exports.ABCIMessageLog.decode(reader, reader.uint32()));\n          break;\n        case 8:\n          message.info = reader.string();\n          break;\n        case 9:\n          message.gasWanted = reader.int64();\n          break;\n        case 10:\n          message.gasUsed = reader.int64();\n          break;\n        case 11:\n          message.tx = any_1.Any.decode(reader, reader.uint32());\n          break;\n        case 12:\n          message.timestamp = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseTxResponse);\n    message.logs = [];\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n    if (object.txhash !== undefined && object.txhash !== null) {\n      message.txhash = String(object.txhash);\n    } else {\n      message.txhash = \"\";\n    }\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = String(object.codespace);\n    } else {\n      message.codespace = \"\";\n    }\n    if (object.code !== undefined && object.code !== null) {\n      message.code = Number(object.code);\n    } else {\n      message.code = 0;\n    }\n    if (object.data !== undefined && object.data !== null) {\n      message.data = String(object.data);\n    } else {\n      message.data = \"\";\n    }\n    if (object.rawLog !== undefined && object.rawLog !== null) {\n      message.rawLog = String(object.rawLog);\n    } else {\n      message.rawLog = \"\";\n    }\n    if (object.logs !== undefined && object.logs !== null) {\n      for (const e of object.logs) {\n        message.logs.push(exports.ABCIMessageLog.fromJSON(e));\n      }\n    }\n    if (object.info !== undefined && object.info !== null) {\n      message.info = String(object.info);\n    } else {\n      message.info = \"\";\n    }\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = long_1.default.fromString(object.gasWanted);\n    } else {\n      message.gasWanted = long_1.default.ZERO;\n    }\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = long_1.default.fromString(object.gasUsed);\n    } else {\n      message.gasUsed = long_1.default.ZERO;\n    }\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = any_1.Any.fromJSON(object.tx);\n    } else {\n      message.tx = undefined;\n    }\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = String(object.timestamp);\n    } else {\n      message.timestamp = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.txhash !== undefined && (obj.txhash = message.txhash);\n    message.codespace !== undefined && (obj.codespace = message.codespace);\n    message.code !== undefined && (obj.code = message.code);\n    message.data !== undefined && (obj.data = message.data);\n    message.rawLog !== undefined && (obj.rawLog = message.rawLog);\n    if (message.logs) {\n      obj.logs = message.logs.map(e => e ? exports.ABCIMessageLog.toJSON(e) : undefined);\n    } else {\n      obj.logs = [];\n    }\n    message.info !== undefined && (obj.info = message.info);\n    message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.ZERO).toString());\n    message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.ZERO).toString());\n    message.tx !== undefined && (obj.tx = message.tx ? any_1.Any.toJSON(message.tx) : undefined);\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseTxResponse);\n    message.logs = [];\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n    if (object.txhash !== undefined && object.txhash !== null) {\n      message.txhash = object.txhash;\n    } else {\n      message.txhash = \"\";\n    }\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = object.codespace;\n    } else {\n      message.codespace = \"\";\n    }\n    if (object.code !== undefined && object.code !== null) {\n      message.code = object.code;\n    } else {\n      message.code = 0;\n    }\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = \"\";\n    }\n    if (object.rawLog !== undefined && object.rawLog !== null) {\n      message.rawLog = object.rawLog;\n    } else {\n      message.rawLog = \"\";\n    }\n    if (object.logs !== undefined && object.logs !== null) {\n      for (const e of object.logs) {\n        message.logs.push(exports.ABCIMessageLog.fromPartial(e));\n      }\n    }\n    if (object.info !== undefined && object.info !== null) {\n      message.info = object.info;\n    } else {\n      message.info = \"\";\n    }\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = object.gasWanted;\n    } else {\n      message.gasWanted = long_1.default.ZERO;\n    }\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = object.gasUsed;\n    } else {\n      message.gasUsed = long_1.default.ZERO;\n    }\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = any_1.Any.fromPartial(object.tx);\n    } else {\n      message.tx = undefined;\n    }\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = object.timestamp;\n    } else {\n      message.timestamp = \"\";\n    }\n    return message;\n  }\n};\nconst baseABCIMessageLog = {\n  msgIndex: 0,\n  log: \"\"\n};\nexports.ABCIMessageLog = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.msgIndex !== 0) {\n      writer.uint32(8).uint32(message.msgIndex);\n    }\n    if (message.log !== \"\") {\n      writer.uint32(18).string(message.log);\n    }\n    for (const v of message.events) {\n      exports.StringEvent.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseABCIMessageLog);\n    message.events = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.msgIndex = reader.uint32();\n          break;\n        case 2:\n          message.log = reader.string();\n          break;\n        case 3:\n          message.events.push(exports.StringEvent.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseABCIMessageLog);\n    message.events = [];\n    if (object.msgIndex !== undefined && object.msgIndex !== null) {\n      message.msgIndex = Number(object.msgIndex);\n    } else {\n      message.msgIndex = 0;\n    }\n    if (object.log !== undefined && object.log !== null) {\n      message.log = String(object.log);\n    } else {\n      message.log = \"\";\n    }\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.StringEvent.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.msgIndex !== undefined && (obj.msgIndex = message.msgIndex);\n    message.log !== undefined && (obj.log = message.log);\n    if (message.events) {\n      obj.events = message.events.map(e => e ? exports.StringEvent.toJSON(e) : undefined);\n    } else {\n      obj.events = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseABCIMessageLog);\n    message.events = [];\n    if (object.msgIndex !== undefined && object.msgIndex !== null) {\n      message.msgIndex = object.msgIndex;\n    } else {\n      message.msgIndex = 0;\n    }\n    if (object.log !== undefined && object.log !== null) {\n      message.log = object.log;\n    } else {\n      message.log = \"\";\n    }\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.StringEvent.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseStringEvent = {\n  type: \"\"\n};\nexports.StringEvent = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.type !== \"\") {\n      writer.uint32(10).string(message.type);\n    }\n    for (const v of message.attributes) {\n      exports.Attribute.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseStringEvent);\n    message.attributes = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.string();\n          break;\n        case 2:\n          message.attributes.push(exports.Attribute.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseStringEvent);\n    message.attributes = [];\n    if (object.type !== undefined && object.type !== null) {\n      message.type = String(object.type);\n    } else {\n      message.type = \"\";\n    }\n    if (object.attributes !== undefined && object.attributes !== null) {\n      for (const e of object.attributes) {\n        message.attributes.push(exports.Attribute.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = message.type);\n    if (message.attributes) {\n      obj.attributes = message.attributes.map(e => e ? exports.Attribute.toJSON(e) : undefined);\n    } else {\n      obj.attributes = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseStringEvent);\n    message.attributes = [];\n    if (object.type !== undefined && object.type !== null) {\n      message.type = object.type;\n    } else {\n      message.type = \"\";\n    }\n    if (object.attributes !== undefined && object.attributes !== null) {\n      for (const e of object.attributes) {\n        message.attributes.push(exports.Attribute.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseAttribute = {\n  key: \"\",\n  value: \"\"\n};\nexports.Attribute = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(18).string(message.value);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseAttribute);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n        case 2:\n          message.value = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseAttribute);\n    if (object.key !== undefined && object.key !== null) {\n      message.key = String(object.key);\n    } else {\n      message.key = \"\";\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = String(object.value);\n    } else {\n      message.value = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.value !== undefined && (obj.value = message.value);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseAttribute);\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = \"\";\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = object.value;\n    } else {\n      message.value = \"\";\n    }\n    return message;\n  }\n};\nconst baseGasInfo = {\n  gasWanted: long_1.default.UZERO,\n  gasUsed: long_1.default.UZERO\n};\nexports.GasInfo = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.gasWanted.isZero()) {\n      writer.uint32(8).uint64(message.gasWanted);\n    }\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(16).uint64(message.gasUsed);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseGasInfo);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.gasWanted = reader.uint64();\n          break;\n        case 2:\n          message.gasUsed = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseGasInfo);\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = long_1.default.fromString(object.gasWanted);\n    } else {\n      message.gasWanted = long_1.default.UZERO;\n    }\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = long_1.default.fromString(object.gasUsed);\n    } else {\n      message.gasUsed = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.UZERO).toString());\n    message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseGasInfo);\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = object.gasWanted;\n    } else {\n      message.gasWanted = long_1.default.UZERO;\n    }\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = object.gasUsed;\n    } else {\n      message.gasUsed = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst baseResult = {\n  log: \"\"\n};\nexports.Result = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.data.length !== 0) {\n      writer.uint32(10).bytes(message.data);\n    }\n    if (message.log !== \"\") {\n      writer.uint32(18).string(message.log);\n    }\n    for (const v of message.events) {\n      types_1.Event.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResult);\n    message.events = [];\n    message.data = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.data = reader.bytes();\n          break;\n        case 2:\n          message.log = reader.string();\n          break;\n        case 3:\n          message.events.push(types_1.Event.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseResult);\n    message.events = [];\n    message.data = new Uint8Array();\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n    if (object.log !== undefined && object.log !== null) {\n      message.log = String(object.log);\n    } else {\n      message.log = \"\";\n    }\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(types_1.Event.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.log !== undefined && (obj.log = message.log);\n    if (message.events) {\n      obj.events = message.events.map(e => e ? types_1.Event.toJSON(e) : undefined);\n    } else {\n      obj.events = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseResult);\n    message.events = [];\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n    if (object.log !== undefined && object.log !== null) {\n      message.log = object.log;\n    } else {\n      message.log = \"\";\n    }\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(types_1.Event.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseSimulationResponse = {};\nexports.SimulationResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.gasInfo !== undefined) {\n      exports.GasInfo.encode(message.gasInfo, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.result !== undefined) {\n      exports.Result.encode(message.result, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSimulationResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.gasInfo = exports.GasInfo.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.result = exports.Result.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseSimulationResponse);\n    if (object.gasInfo !== undefined && object.gasInfo !== null) {\n      message.gasInfo = exports.GasInfo.fromJSON(object.gasInfo);\n    } else {\n      message.gasInfo = undefined;\n    }\n    if (object.result !== undefined && object.result !== null) {\n      message.result = exports.Result.fromJSON(object.result);\n    } else {\n      message.result = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.gasInfo !== undefined && (obj.gasInfo = message.gasInfo ? exports.GasInfo.toJSON(message.gasInfo) : undefined);\n    message.result !== undefined && (obj.result = message.result ? exports.Result.toJSON(message.result) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseSimulationResponse);\n    if (object.gasInfo !== undefined && object.gasInfo !== null) {\n      message.gasInfo = exports.GasInfo.fromPartial(object.gasInfo);\n    } else {\n      message.gasInfo = undefined;\n    }\n    if (object.result !== undefined && object.result !== null) {\n      message.result = exports.Result.fromPartial(object.result);\n    } else {\n      message.result = undefined;\n    }\n    return message;\n  }\n};\nconst baseMsgData = {\n  msgType: \"\"\n};\nexports.MsgData = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.msgType !== \"\") {\n      writer.uint32(10).string(message.msgType);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgData);\n    message.data = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.msgType = reader.string();\n          break;\n        case 2:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgData);\n    message.data = new Uint8Array();\n    if (object.msgType !== undefined && object.msgType !== null) {\n      message.msgType = String(object.msgType);\n    } else {\n      message.msgType = \"\";\n    }\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.msgType !== undefined && (obj.msgType = message.msgType);\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgData);\n    if (object.msgType !== undefined && object.msgType !== null) {\n      message.msgType = object.msgType;\n    } else {\n      message.msgType = \"\";\n    }\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n    return message;\n  }\n};\nconst baseTxMsgData = {};\nexports.TxMsgData = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.data) {\n      exports.MsgData.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTxMsgData);\n    message.data = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.data.push(exports.MsgData.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseTxMsgData);\n    message.data = [];\n    if (object.data !== undefined && object.data !== null) {\n      for (const e of object.data) {\n        message.data.push(exports.MsgData.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.data) {\n      obj.data = message.data.map(e => e ? exports.MsgData.toJSON(e) : undefined);\n    } else {\n      obj.data = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseTxMsgData);\n    message.data = [];\n    if (object.data !== undefined && object.data !== null) {\n      for (const e of object.data) {\n        message.data.push(exports.MsgData.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseSearchTxsResult = {\n  totalCount: long_1.default.UZERO,\n  count: long_1.default.UZERO,\n  pageNumber: long_1.default.UZERO,\n  pageTotal: long_1.default.UZERO,\n  limit: long_1.default.UZERO\n};\nexports.SearchTxsResult = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.totalCount.isZero()) {\n      writer.uint32(8).uint64(message.totalCount);\n    }\n    if (!message.count.isZero()) {\n      writer.uint32(16).uint64(message.count);\n    }\n    if (!message.pageNumber.isZero()) {\n      writer.uint32(24).uint64(message.pageNumber);\n    }\n    if (!message.pageTotal.isZero()) {\n      writer.uint32(32).uint64(message.pageTotal);\n    }\n    if (!message.limit.isZero()) {\n      writer.uint32(40).uint64(message.limit);\n    }\n    for (const v of message.txs) {\n      exports.TxResponse.encode(v, writer.uint32(50).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSearchTxsResult);\n    message.txs = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.totalCount = reader.uint64();\n          break;\n        case 2:\n          message.count = reader.uint64();\n          break;\n        case 3:\n          message.pageNumber = reader.uint64();\n          break;\n        case 4:\n          message.pageTotal = reader.uint64();\n          break;\n        case 5:\n          message.limit = reader.uint64();\n          break;\n        case 6:\n          message.txs.push(exports.TxResponse.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseSearchTxsResult);\n    message.txs = [];\n    if (object.totalCount !== undefined && object.totalCount !== null) {\n      message.totalCount = long_1.default.fromString(object.totalCount);\n    } else {\n      message.totalCount = long_1.default.UZERO;\n    }\n    if (object.count !== undefined && object.count !== null) {\n      message.count = long_1.default.fromString(object.count);\n    } else {\n      message.count = long_1.default.UZERO;\n    }\n    if (object.pageNumber !== undefined && object.pageNumber !== null) {\n      message.pageNumber = long_1.default.fromString(object.pageNumber);\n    } else {\n      message.pageNumber = long_1.default.UZERO;\n    }\n    if (object.pageTotal !== undefined && object.pageTotal !== null) {\n      message.pageTotal = long_1.default.fromString(object.pageTotal);\n    } else {\n      message.pageTotal = long_1.default.UZERO;\n    }\n    if (object.limit !== undefined && object.limit !== null) {\n      message.limit = long_1.default.fromString(object.limit);\n    } else {\n      message.limit = long_1.default.UZERO;\n    }\n    if (object.txs !== undefined && object.txs !== null) {\n      for (const e of object.txs) {\n        message.txs.push(exports.TxResponse.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.totalCount !== undefined && (obj.totalCount = (message.totalCount || long_1.default.UZERO).toString());\n    message.count !== undefined && (obj.count = (message.count || long_1.default.UZERO).toString());\n    message.pageNumber !== undefined && (obj.pageNumber = (message.pageNumber || long_1.default.UZERO).toString());\n    message.pageTotal !== undefined && (obj.pageTotal = (message.pageTotal || long_1.default.UZERO).toString());\n    message.limit !== undefined && (obj.limit = (message.limit || long_1.default.UZERO).toString());\n    if (message.txs) {\n      obj.txs = message.txs.map(e => e ? exports.TxResponse.toJSON(e) : undefined);\n    } else {\n      obj.txs = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseSearchTxsResult);\n    message.txs = [];\n    if (object.totalCount !== undefined && object.totalCount !== null) {\n      message.totalCount = object.totalCount;\n    } else {\n      message.totalCount = long_1.default.UZERO;\n    }\n    if (object.count !== undefined && object.count !== null) {\n      message.count = object.count;\n    } else {\n      message.count = long_1.default.UZERO;\n    }\n    if (object.pageNumber !== undefined && object.pageNumber !== null) {\n      message.pageNumber = object.pageNumber;\n    } else {\n      message.pageNumber = long_1.default.UZERO;\n    }\n    if (object.pageTotal !== undefined && object.pageTotal !== null) {\n      message.pageTotal = object.pageTotal;\n    } else {\n      message.pageTotal = long_1.default.UZERO;\n    }\n    if (object.limit !== undefined && object.limit !== null) {\n      message.limit = object.limit;\n    } else {\n      message.limit = long_1.default.UZERO;\n    }\n    if (object.txs !== undefined && object.txs !== null) {\n      for (const e of object.txs) {\n        message.txs.push(exports.TxResponse.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=abci.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}