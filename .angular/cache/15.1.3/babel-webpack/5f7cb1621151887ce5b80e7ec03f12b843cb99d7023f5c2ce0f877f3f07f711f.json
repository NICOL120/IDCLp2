{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleValidator = exports.Validator = exports.ValidatorSet = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst keys_1 = require(\"../../tendermint/crypto/keys\");\nexports.protobufPackage = \"tendermint.types\";\nconst baseValidatorSet = {\n  totalVotingPower: long_1.default.ZERO\n};\nexports.ValidatorSet = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.validators) {\n      exports.Validator.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proposer !== undefined) {\n      exports.Validator.encode(message.proposer, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.totalVotingPower.isZero()) {\n      writer.uint32(24).int64(message.totalVotingPower);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidatorSet);\n    message.validators = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.validators.push(exports.Validator.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.proposer = exports.Validator.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.totalVotingPower = reader.int64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidatorSet);\n    message.validators = [];\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(exports.Validator.fromJSON(e));\n      }\n    }\n    if (object.proposer !== undefined && object.proposer !== null) {\n      message.proposer = exports.Validator.fromJSON(object.proposer);\n    } else {\n      message.proposer = undefined;\n    }\n    if (object.totalVotingPower !== undefined && object.totalVotingPower !== null) {\n      message.totalVotingPower = long_1.default.fromString(object.totalVotingPower);\n    } else {\n      message.totalVotingPower = long_1.default.ZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.validators) {\n      obj.validators = message.validators.map(e => e ? exports.Validator.toJSON(e) : undefined);\n    } else {\n      obj.validators = [];\n    }\n    message.proposer !== undefined && (obj.proposer = message.proposer ? exports.Validator.toJSON(message.proposer) : undefined);\n    message.totalVotingPower !== undefined && (obj.totalVotingPower = (message.totalVotingPower || long_1.default.ZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidatorSet);\n    message.validators = [];\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(exports.Validator.fromPartial(e));\n      }\n    }\n    if (object.proposer !== undefined && object.proposer !== null) {\n      message.proposer = exports.Validator.fromPartial(object.proposer);\n    } else {\n      message.proposer = undefined;\n    }\n    if (object.totalVotingPower !== undefined && object.totalVotingPower !== null) {\n      message.totalVotingPower = object.totalVotingPower;\n    } else {\n      message.totalVotingPower = long_1.default.ZERO;\n    }\n    return message;\n  }\n};\nconst baseValidator = {\n  votingPower: long_1.default.ZERO,\n  proposerPriority: long_1.default.ZERO\n};\nexports.Validator = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.address.length !== 0) {\n      writer.uint32(10).bytes(message.address);\n    }\n    if (message.pubKey !== undefined) {\n      keys_1.PublicKey.encode(message.pubKey, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.votingPower.isZero()) {\n      writer.uint32(24).int64(message.votingPower);\n    }\n    if (!message.proposerPriority.isZero()) {\n      writer.uint32(32).int64(message.proposerPriority);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidator);\n    message.address = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.bytes();\n          break;\n        case 2:\n          message.pubKey = keys_1.PublicKey.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.votingPower = reader.int64();\n          break;\n        case 4:\n          message.proposerPriority = reader.int64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidator);\n    message.address = new Uint8Array();\n    if (object.address !== undefined && object.address !== null) {\n      message.address = bytesFromBase64(object.address);\n    }\n    if (object.pubKey !== undefined && object.pubKey !== null) {\n      message.pubKey = keys_1.PublicKey.fromJSON(object.pubKey);\n    } else {\n      message.pubKey = undefined;\n    }\n    if (object.votingPower !== undefined && object.votingPower !== null) {\n      message.votingPower = long_1.default.fromString(object.votingPower);\n    } else {\n      message.votingPower = long_1.default.ZERO;\n    }\n    if (object.proposerPriority !== undefined && object.proposerPriority !== null) {\n      message.proposerPriority = long_1.default.fromString(object.proposerPriority);\n    } else {\n      message.proposerPriority = long_1.default.ZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.address !== undefined && (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));\n    message.pubKey !== undefined && (obj.pubKey = message.pubKey ? keys_1.PublicKey.toJSON(message.pubKey) : undefined);\n    message.votingPower !== undefined && (obj.votingPower = (message.votingPower || long_1.default.ZERO).toString());\n    message.proposerPriority !== undefined && (obj.proposerPriority = (message.proposerPriority || long_1.default.ZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidator);\n    if (object.address !== undefined && object.address !== null) {\n      message.address = object.address;\n    } else {\n      message.address = new Uint8Array();\n    }\n    if (object.pubKey !== undefined && object.pubKey !== null) {\n      message.pubKey = keys_1.PublicKey.fromPartial(object.pubKey);\n    } else {\n      message.pubKey = undefined;\n    }\n    if (object.votingPower !== undefined && object.votingPower !== null) {\n      message.votingPower = object.votingPower;\n    } else {\n      message.votingPower = long_1.default.ZERO;\n    }\n    if (object.proposerPriority !== undefined && object.proposerPriority !== null) {\n      message.proposerPriority = object.proposerPriority;\n    } else {\n      message.proposerPriority = long_1.default.ZERO;\n    }\n    return message;\n  }\n};\nconst baseSimpleValidator = {\n  votingPower: long_1.default.ZERO\n};\nexports.SimpleValidator = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.pubKey !== undefined) {\n      keys_1.PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.votingPower.isZero()) {\n      writer.uint32(16).int64(message.votingPower);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSimpleValidator);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.pubKey = keys_1.PublicKey.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.votingPower = reader.int64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseSimpleValidator);\n    if (object.pubKey !== undefined && object.pubKey !== null) {\n      message.pubKey = keys_1.PublicKey.fromJSON(object.pubKey);\n    } else {\n      message.pubKey = undefined;\n    }\n    if (object.votingPower !== undefined && object.votingPower !== null) {\n      message.votingPower = long_1.default.fromString(object.votingPower);\n    } else {\n      message.votingPower = long_1.default.ZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.pubKey !== undefined && (obj.pubKey = message.pubKey ? keys_1.PublicKey.toJSON(message.pubKey) : undefined);\n    message.votingPower !== undefined && (obj.votingPower = (message.votingPower || long_1.default.ZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseSimpleValidator);\n    if (object.pubKey !== undefined && object.pubKey !== null) {\n      message.pubKey = keys_1.PublicKey.fromPartial(object.pubKey);\n    } else {\n      message.pubKey = undefined;\n    }\n    if (object.votingPower !== undefined && object.votingPower !== null) {\n      message.votingPower = object.votingPower;\n    } else {\n      message.votingPower = long_1.default.ZERO;\n    }\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=validator.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}