{"ast":null,"code":"import _asyncToGenerator from \"/workspaces/IDCLp2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isBrowser, getLocation, getQueryString, detectEnv, appendToQueryString } from '@walletconnect/utils';\nimport NetworkMonitor from './network';\n// @ts-ignore\nconst WS = typeof global.WebSocket !== 'undefined' ? global.WebSocket : require('ws');\n// -- SocketTransport ------------------------------------------------------ //\nclass SocketTransport {\n  // -- constructor ----------------------------------------------------- //\n  constructor(opts) {\n    var _this = this;\n    this.opts = opts;\n    this._queue = [];\n    this._events = [];\n    this._subscriptions = [];\n    // -- public ---------------------------------------------------------- //\n    this.open = () => {\n      this._socketCreate();\n    };\n    this.close = () => {\n      this._socketClose();\n    };\n    this.send = (message, topic, silent) => {\n      if (!topic || typeof topic !== 'string') {\n        throw new Error('Missing or invalid topic field');\n      }\n      this._socketSend({\n        topic: topic,\n        type: 'pub',\n        payload: message,\n        silent: !!silent\n      });\n    };\n    this.subscribe = topic => {\n      this._socketSend({\n        topic: topic,\n        type: 'sub',\n        payload: '',\n        silent: true\n      });\n    };\n    this.on = (event, callback) => {\n      this._events.push({\n        event,\n        callback\n      });\n    };\n    // -- private ---------------------------------------------------------- //\n    this._socketCreate = () => {\n      if (this._nextSocket) {\n        return;\n      }\n      const url = getWebSocketUrl(this._url, this._protocol, this._version);\n      this._nextSocket = new WS(url);\n      if (!this._nextSocket) {\n        throw new Error('Failed to create socket');\n      }\n      this._nextSocket.onmessage = event => this._socketReceive(event);\n      this._nextSocket.onopen = () => this._socketOpen();\n      this._nextSocket.onerror = event => this._socketError(event);\n      this._nextSocket.onclose = () => {\n        this._nextSocket = null;\n        setTimeout(this._socketCreate, 500);\n      };\n    };\n    this._socketOpen = () => {\n      this._socketClose();\n      this._socket = this._nextSocket;\n      this._nextSocket = null;\n      this._queueSubscriptions();\n      this._pushQueue();\n    };\n    this._socketClose = () => {\n      if (this._socket) {\n        this._socket.onclose = () => {\n          // empty\n        };\n        this._socket.close();\n      }\n    };\n    this._socketSend = socketMessage => {\n      const message = JSON.stringify(socketMessage);\n      if (this._socket && this._socket.readyState === 1) {\n        this._socket.send(message);\n      } else {\n        this._setToQueue(socketMessage);\n        this._socketCreate();\n      }\n    };\n    this._socketReceive = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        let socketMessage;\n        try {\n          socketMessage = JSON.parse(event.data);\n        } catch (error) {\n          return;\n        }\n        _this._socketSend({\n          topic: socketMessage.topic,\n          type: 'ack',\n          payload: '',\n          silent: true\n        });\n        if (_this._socket && _this._socket.readyState === 1) {\n          const events = _this._events.filter(itemEvent => itemEvent.event === 'message');\n          if (events && events.length) {\n            events.forEach(itemEvent => itemEvent.callback(socketMessage));\n          }\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this._socketError = e => {\n      const events = this._events.filter(event => event.event === 'error');\n      if (events && events.length) {\n        events.forEach(event => event.callback(e));\n      }\n    };\n    this._queueSubscriptions = () => {\n      const subscriptions = this._subscriptions;\n      subscriptions.forEach(topic => this._queue.push({\n        topic: topic,\n        type: 'sub',\n        payload: '',\n        silent: true\n      }));\n      this._subscriptions = this.opts.subscriptions || [];\n    };\n    this._setToQueue = socketMessage => {\n      this._queue.push(socketMessage);\n    };\n    this._pushQueue = () => {\n      const queue = this._queue;\n      queue.forEach(socketMessage => this._socketSend(socketMessage));\n      this._queue = [];\n    };\n    this._protocol = opts.protocol;\n    this._version = opts.version;\n    this._url = '';\n    this._netMonitor = null;\n    this._socket = null;\n    this._nextSocket = null;\n    this._subscriptions = opts.subscriptions || [];\n    this._netMonitor = opts.netMonitor || new NetworkMonitor();\n    if (!opts.url || typeof opts.url !== 'string') {\n      throw new Error('Missing or invalid WebSocket url');\n    }\n    this._url = opts.url;\n    this._netMonitor.on('online', () => this._socketCreate());\n  }\n  set readyState(value) {\n    // empty\n  }\n  get readyState() {\n    return this._socket ? this._socket.readyState : -1;\n  }\n  set connecting(value) {\n    // empty\n  }\n  get connecting() {\n    return this.readyState === 0;\n  }\n  set connected(value) {\n    // empty\n  }\n  get connected() {\n    return this.readyState === 1;\n  }\n  set closing(value) {\n    // empty\n  }\n  get closing() {\n    return this.readyState === 2;\n  }\n  set closed(value) {\n    // empty\n  }\n  get closed() {\n    return this.readyState === 3;\n  }\n}\nfunction getWebSocketUrl(webUrl, protocol, version) {\n  var _a, _b;\n  const url = webUrl.startsWith('https') ? webUrl.replace('https', 'wss') : webUrl.startsWith('http') ? webUrl.replace('http', 'ws') : webUrl;\n  const splitUrl = url.split('?');\n  const params = isBrowser() ? {\n    protocol,\n    version,\n    env: 'browser',\n    host: ((_a = getLocation()) === null || _a === void 0 ? void 0 : _a.host) || ''\n  } : {\n    protocol,\n    version,\n    env: ((_b = detectEnv()) === null || _b === void 0 ? void 0 : _b.name) || ''\n  };\n  const queryString = appendToQueryString(getQueryString(splitUrl[1] || ''), params);\n  return splitUrl[0] + '?' + queryString;\n}\nexport default SocketTransport;\n//# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}