{"ast":null,"code":"var bs58check = require('bs58check');\nfunction decodeRaw(buffer, version) {\n  // check version only if defined\n  if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version');\n\n  // uncompressed\n  if (buffer.length === 33) {\n    return {\n      version: buffer[0],\n      privateKey: buffer.slice(1, 33),\n      compressed: false\n    };\n  }\n\n  // invalid length\n  if (buffer.length !== 34) throw new Error('Invalid WIF length');\n\n  // invalid compression flag\n  if (buffer[33] !== 0x01) throw new Error('Invalid compression flag');\n  return {\n    version: buffer[0],\n    privateKey: buffer.slice(1, 33),\n    compressed: true\n  };\n}\nfunction encodeRaw(version, privateKey, compressed) {\n  var result = new Buffer(compressed ? 34 : 33);\n  result.writeUInt8(version, 0);\n  privateKey.copy(result, 1);\n  if (compressed) {\n    result[33] = 0x01;\n  }\n  return result;\n}\nfunction decode(string, version) {\n  return decodeRaw(bs58check.decode(string), version);\n}\nfunction encode(version, privateKey, compressed) {\n  if (typeof version === 'number') return bs58check.encode(encodeRaw(version, privateKey, compressed));\n  return bs58check.encode(encodeRaw(version.version, version.privateKey, version.compressed));\n}\nmodule.exports = {\n  decode: decode,\n  decodeRaw: decodeRaw,\n  encode: encode,\n  encodeRaw: encodeRaw\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}