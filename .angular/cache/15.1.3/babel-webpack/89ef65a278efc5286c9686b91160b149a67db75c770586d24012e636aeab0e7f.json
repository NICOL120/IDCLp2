{"ast":null,"code":"/**\n * @license angular2-prettyjson\n * MIT license\n */\n\nimport { Component, Input, NgModule, Pipe } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nlet PrettyJsonComponent = /*#__PURE__*/(() => {\n  class PrettyJsonComponent {}\n  PrettyJsonComponent.ɵfac = function PrettyJsonComponent_Factory(t) {\n    return new (t || PrettyJsonComponent)();\n  };\n  PrettyJsonComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PrettyJsonComponent,\n    selectors: [[\"prettyjson\"]],\n    inputs: {\n      obj: \"obj\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[3, \"innerHtml\"]],\n    template: function PrettyJsonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"pre\", 0);\n        ɵngcc0.ɵɵpipe(1, \"prettyjson\");\n        ɵngcc0.ɵɵtext(2, \"    \");\n        ɵngcc0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"innerHtml\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.obj), ɵngcc0.ɵɵsanitizeHtml);\n      }\n    },\n    dependencies: function () {\n      return [PrettyJsonPipe];\n    },\n    styles: [\"pre[_ngcontent-%COMP%] {outline: 1px solid #ccc; padding: 5px; margin: 5px; }\\n    [_nghost-%COMP%]     span {white-space: normal;}\\n    [_nghost-%COMP%]     .string { color: green; }\\n    [_nghost-%COMP%]     .number { color: darkorange; }\\n    [_nghost-%COMP%]     .boolean { color: blue; }\\n    [_nghost-%COMP%]     .null { color: magenta; }\\n    [_nghost-%COMP%]     .key { color: red; }\"]\n  });\n  /** @nocollapse */\n  return PrettyJsonComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction serializer() {\n  const /** @type {?} */stack = [];\n  const /** @type {?} */keys = [];\n  const /** @type {?} */cycleReplacer = function (key, value) {\n    if (stack[0] === value) {\n      return \"[Circular ~]\";\n    }\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n  };\n  return function (key, value) {\n    if (stack.length > 0) {\n      const /** @type {?} */thisPos = stack.indexOf(this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n      if (~stack.indexOf(value)) {\n        value = cycleReplacer.call(this, key, value);\n      }\n    } else {\n      stack.push(value);\n    }\n    return value;\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nlet PrettyJsonPipe = /*#__PURE__*/(() => {\n  class PrettyJsonPipe {\n    /**\n     * @param {?} obj\n     * @param {?=} spaces\n     * @return {?}\n     */\n    transform(obj, spaces = 2) {\n      return this._syntaxHighlight(obj, serializer(), spaces);\n    }\n    /**\n     * @param {?} json\n     * @param {?} serializer\n     * @param {?} spacing\n     * @return {?}\n     */\n    _syntaxHighlight(json, serializer$$1, spacing) {\n      if (json === undefined) {\n        return '<span class=\"undefined\"></span>';\n      }\n      // Credits to the accepted answer here\n      // http://stackoverflow.com/questions/4810841/how-can-i-pretty-print-json-using-javascript\n      if (typeof json !== \"string\") {\n        json = JSON.stringify(json, serializer$$1, spacing);\n      }\n      json = json.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n      return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, match => {\n        let /** @type {?} */cls = \"number\";\n        if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n            cls = \"key\";\n          } else {\n            cls = \"string\";\n          }\n        } else if (/true|false/.test(match)) {\n          cls = \"boolean\";\n        } else if (/null/.test(match)) {\n          cls = \"null\";\n        }\n        return `<span class=\"${cls}\">${match}</span>`;\n      });\n    }\n  }\n  PrettyJsonPipe.ɵfac = function PrettyJsonPipe_Factory(t) {\n    return new (t || PrettyJsonPipe)();\n  };\n  PrettyJsonPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"prettyjson\",\n    type: PrettyJsonPipe,\n    pure: false\n  });\n  /** @nocollapse */\n  return PrettyJsonPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nlet SafeJsonPipe = /*#__PURE__*/(() => {\n  class SafeJsonPipe {\n    /**\n     * @param {?} obj\n     * @param {?=} spaces\n     * @return {?}\n     */\n    transform(obj, spaces = 2) {\n      return JSON.stringify(obj, serializer(), spaces);\n    }\n  }\n  SafeJsonPipe.ɵfac = function SafeJsonPipe_Factory(t) {\n    return new (t || SafeJsonPipe)();\n  };\n  SafeJsonPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"json\",\n    type: SafeJsonPipe,\n    pure: false\n  });\n  /** @nocollapse */\n  return SafeJsonPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nlet PrettyJsonModule = /*#__PURE__*/(() => {\n  class PrettyJsonModule {}\n  PrettyJsonModule.ɵfac = function PrettyJsonModule_Factory(t) {\n    return new (t || PrettyJsonModule)();\n  };\n  PrettyJsonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PrettyJsonModule\n  });\n  PrettyJsonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  /** @nocollapse */\n  return PrettyJsonModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PrettyJsonModule, {\n    declarations: [PrettyJsonComponent, PrettyJsonPipe, SafeJsonPipe],\n    exports: [PrettyJsonComponent, PrettyJsonPipe, SafeJsonPipe]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Public classes.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Angular library starter\n * Build an Angular library compatible with AoT compilation & Tree shaking\n * Copyright Roberto Simonetti\n * MIT license\n * https://github.com/robisim74/angular-library-starter\n */\n/**\n * Entry point for all public APIs of the package.\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PrettyJsonModule, SafeJsonPipe as ɵc, PrettyJsonComponent as ɵa, PrettyJsonPipe as ɵb };\n\n//# sourceMappingURL=angular2-prettyjson.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}