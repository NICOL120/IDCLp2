{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParamChange = exports.ParameterChangeProposal = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nexports.protobufPackage = \"cosmos.params.v1beta1\";\nconst baseParameterChangeProposal = {\n  title: \"\",\n  description: \"\"\n};\nexports.ParameterChangeProposal = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.title !== \"\") {\n      writer.uint32(10).string(message.title);\n    }\n    if (message.description !== \"\") {\n      writer.uint32(18).string(message.description);\n    }\n    for (const v of message.changes) {\n      exports.ParamChange.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseParameterChangeProposal);\n    message.changes = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.title = reader.string();\n          break;\n        case 2:\n          message.description = reader.string();\n          break;\n        case 3:\n          message.changes.push(exports.ParamChange.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseParameterChangeProposal);\n    message.changes = [];\n    if (object.title !== undefined && object.title !== null) {\n      message.title = String(object.title);\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = String(object.description);\n    } else {\n      message.description = \"\";\n    }\n    if (object.changes !== undefined && object.changes !== null) {\n      for (const e of object.changes) {\n        message.changes.push(exports.ParamChange.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.title !== undefined && (obj.title = message.title);\n    message.description !== undefined && (obj.description = message.description);\n    if (message.changes) {\n      obj.changes = message.changes.map(e => e ? exports.ParamChange.toJSON(e) : undefined);\n    } else {\n      obj.changes = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseParameterChangeProposal);\n    message.changes = [];\n    if (object.title !== undefined && object.title !== null) {\n      message.title = object.title;\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = object.description;\n    } else {\n      message.description = \"\";\n    }\n    if (object.changes !== undefined && object.changes !== null) {\n      for (const e of object.changes) {\n        message.changes.push(exports.ParamChange.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseParamChange = {\n  subspace: \"\",\n  key: \"\",\n  value: \"\"\n};\nexports.ParamChange = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.subspace !== \"\") {\n      writer.uint32(10).string(message.subspace);\n    }\n    if (message.key !== \"\") {\n      writer.uint32(18).string(message.key);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(26).string(message.value);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseParamChange);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.subspace = reader.string();\n          break;\n        case 2:\n          message.key = reader.string();\n          break;\n        case 3:\n          message.value = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseParamChange);\n    if (object.subspace !== undefined && object.subspace !== null) {\n      message.subspace = String(object.subspace);\n    } else {\n      message.subspace = \"\";\n    }\n    if (object.key !== undefined && object.key !== null) {\n      message.key = String(object.key);\n    } else {\n      message.key = \"\";\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = String(object.value);\n    } else {\n      message.value = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.subspace !== undefined && (obj.subspace = message.subspace);\n    message.key !== undefined && (obj.key = message.key);\n    message.value !== undefined && (obj.value = message.value);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseParamChange);\n    if (object.subspace !== undefined && object.subspace !== null) {\n      message.subspace = object.subspace;\n    } else {\n      message.subspace = \"\";\n    }\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = \"\";\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = object.value;\n    } else {\n      message.value = \"\";\n    }\n    return message;\n  }\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=params.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}