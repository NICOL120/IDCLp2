{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GrpcWebImpl = exports.MsgUndelegateDesc = exports.MsgBeginRedelegateDesc = exports.MsgDelegateDesc = exports.MsgEditValidatorDesc = exports.MsgCreateValidatorDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgUndelegateResponse = exports.MsgUndelegate = exports.MsgBeginRedelegateResponse = exports.MsgBeginRedelegate = exports.MsgDelegateResponse = exports.MsgDelegate = exports.MsgEditValidatorResponse = exports.MsgEditValidator = exports.MsgCreateValidatorResponse = exports.MsgCreateValidator = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst staking_1 = require(\"../../../cosmos/staking/v1beta1/staking\");\nconst any_1 = require(\"../../../google/protobuf/any\");\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nconst browser_headers_1 = require(\"browser-headers\");\nconst timestamp_1 = require(\"../../../google/protobuf/timestamp\");\nexports.protobufPackage = \"cosmos.staking.v1beta1\";\nconst baseMsgCreateValidator = {\n  minSelfDelegation: \"\",\n  delegatorAddress: \"\",\n  validatorAddress: \"\"\n};\nexports.MsgCreateValidator = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.description !== undefined) {\n      staking_1.Description.encode(message.description, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.commission !== undefined) {\n      staking_1.CommissionRates.encode(message.commission, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.minSelfDelegation !== \"\") {\n      writer.uint32(26).string(message.minSelfDelegation);\n    }\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(34).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(42).string(message.validatorAddress);\n    }\n    if (message.pubkey !== undefined) {\n      any_1.Any.encode(message.pubkey, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.value !== undefined) {\n      coin_1.Coin.encode(message.value, writer.uint32(58).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgCreateValidator);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.description = staking_1.Description.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.commission = staking_1.CommissionRates.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.minSelfDelegation = reader.string();\n          break;\n        case 4:\n          message.delegatorAddress = reader.string();\n          break;\n        case 5:\n          message.validatorAddress = reader.string();\n          break;\n        case 6:\n          message.pubkey = any_1.Any.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.value = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgCreateValidator);\n    if (object.description !== undefined && object.description !== null) {\n      message.description = staking_1.Description.fromJSON(object.description);\n    } else {\n      message.description = undefined;\n    }\n    if (object.commission !== undefined && object.commission !== null) {\n      message.commission = staking_1.CommissionRates.fromJSON(object.commission);\n    } else {\n      message.commission = undefined;\n    }\n    if (object.minSelfDelegation !== undefined && object.minSelfDelegation !== null) {\n      message.minSelfDelegation = String(object.minSelfDelegation);\n    } else {\n      message.minSelfDelegation = \"\";\n    }\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = String(object.delegatorAddress);\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = String(object.validatorAddress);\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.pubkey !== undefined && object.pubkey !== null) {\n      message.pubkey = any_1.Any.fromJSON(object.pubkey);\n    } else {\n      message.pubkey = undefined;\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = coin_1.Coin.fromJSON(object.value);\n    } else {\n      message.value = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.description !== undefined && (obj.description = message.description ? staking_1.Description.toJSON(message.description) : undefined);\n    message.commission !== undefined && (obj.commission = message.commission ? staking_1.CommissionRates.toJSON(message.commission) : undefined);\n    message.minSelfDelegation !== undefined && (obj.minSelfDelegation = message.minSelfDelegation);\n    message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);\n    message.pubkey !== undefined && (obj.pubkey = message.pubkey ? any_1.Any.toJSON(message.pubkey) : undefined);\n    message.value !== undefined && (obj.value = message.value ? coin_1.Coin.toJSON(message.value) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgCreateValidator);\n    if (object.description !== undefined && object.description !== null) {\n      message.description = staking_1.Description.fromPartial(object.description);\n    } else {\n      message.description = undefined;\n    }\n    if (object.commission !== undefined && object.commission !== null) {\n      message.commission = staking_1.CommissionRates.fromPartial(object.commission);\n    } else {\n      message.commission = undefined;\n    }\n    if (object.minSelfDelegation !== undefined && object.minSelfDelegation !== null) {\n      message.minSelfDelegation = object.minSelfDelegation;\n    } else {\n      message.minSelfDelegation = \"\";\n    }\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = object.delegatorAddress;\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = object.validatorAddress;\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.pubkey !== undefined && object.pubkey !== null) {\n      message.pubkey = any_1.Any.fromPartial(object.pubkey);\n    } else {\n      message.pubkey = undefined;\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = coin_1.Coin.fromPartial(object.value);\n    } else {\n      message.value = undefined;\n    }\n    return message;\n  }\n};\nconst baseMsgCreateValidatorResponse = {};\nexports.MsgCreateValidatorResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgCreateValidatorResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgCreateValidatorResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgCreateValidatorResponse);\n    return message;\n  }\n};\nconst baseMsgEditValidator = {\n  validatorAddress: \"\",\n  commissionRate: \"\",\n  minSelfDelegation: \"\"\n};\nexports.MsgEditValidator = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.description !== undefined) {\n      staking_1.Description.encode(message.description, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    if (message.commissionRate !== \"\") {\n      writer.uint32(26).string(message.commissionRate);\n    }\n    if (message.minSelfDelegation !== \"\") {\n      writer.uint32(34).string(message.minSelfDelegation);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgEditValidator);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.description = staking_1.Description.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        case 3:\n          message.commissionRate = reader.string();\n          break;\n        case 4:\n          message.minSelfDelegation = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgEditValidator);\n    if (object.description !== undefined && object.description !== null) {\n      message.description = staking_1.Description.fromJSON(object.description);\n    } else {\n      message.description = undefined;\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = String(object.validatorAddress);\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.commissionRate !== undefined && object.commissionRate !== null) {\n      message.commissionRate = String(object.commissionRate);\n    } else {\n      message.commissionRate = \"\";\n    }\n    if (object.minSelfDelegation !== undefined && object.minSelfDelegation !== null) {\n      message.minSelfDelegation = String(object.minSelfDelegation);\n    } else {\n      message.minSelfDelegation = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.description !== undefined && (obj.description = message.description ? staking_1.Description.toJSON(message.description) : undefined);\n    message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);\n    message.commissionRate !== undefined && (obj.commissionRate = message.commissionRate);\n    message.minSelfDelegation !== undefined && (obj.minSelfDelegation = message.minSelfDelegation);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgEditValidator);\n    if (object.description !== undefined && object.description !== null) {\n      message.description = staking_1.Description.fromPartial(object.description);\n    } else {\n      message.description = undefined;\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = object.validatorAddress;\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.commissionRate !== undefined && object.commissionRate !== null) {\n      message.commissionRate = object.commissionRate;\n    } else {\n      message.commissionRate = \"\";\n    }\n    if (object.minSelfDelegation !== undefined && object.minSelfDelegation !== null) {\n      message.minSelfDelegation = object.minSelfDelegation;\n    } else {\n      message.minSelfDelegation = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgEditValidatorResponse = {};\nexports.MsgEditValidatorResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgEditValidatorResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgEditValidatorResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgEditValidatorResponse);\n    return message;\n  }\n};\nconst baseMsgDelegate = {\n  delegatorAddress: \"\",\n  validatorAddress: \"\"\n};\nexports.MsgDelegate = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    if (message.amount !== undefined) {\n      coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgDelegate);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        case 3:\n          message.amount = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgDelegate);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = String(object.delegatorAddress);\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = String(object.validatorAddress);\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = coin_1.Coin.fromJSON(object.amount);\n    } else {\n      message.amount = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);\n    message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgDelegate);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = object.delegatorAddress;\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = object.validatorAddress;\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = coin_1.Coin.fromPartial(object.amount);\n    } else {\n      message.amount = undefined;\n    }\n    return message;\n  }\n};\nconst baseMsgDelegateResponse = {};\nexports.MsgDelegateResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgDelegateResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgDelegateResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgDelegateResponse);\n    return message;\n  }\n};\nconst baseMsgBeginRedelegate = {\n  delegatorAddress: \"\",\n  validatorSrcAddress: \"\",\n  validatorDstAddress: \"\"\n};\nexports.MsgBeginRedelegate = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorSrcAddress !== \"\") {\n      writer.uint32(18).string(message.validatorSrcAddress);\n    }\n    if (message.validatorDstAddress !== \"\") {\n      writer.uint32(26).string(message.validatorDstAddress);\n    }\n    if (message.amount !== undefined) {\n      coin_1.Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgBeginRedelegate);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorSrcAddress = reader.string();\n          break;\n        case 3:\n          message.validatorDstAddress = reader.string();\n          break;\n        case 4:\n          message.amount = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgBeginRedelegate);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = String(object.delegatorAddress);\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorSrcAddress !== undefined && object.validatorSrcAddress !== null) {\n      message.validatorSrcAddress = String(object.validatorSrcAddress);\n    } else {\n      message.validatorSrcAddress = \"\";\n    }\n    if (object.validatorDstAddress !== undefined && object.validatorDstAddress !== null) {\n      message.validatorDstAddress = String(object.validatorDstAddress);\n    } else {\n      message.validatorDstAddress = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = coin_1.Coin.fromJSON(object.amount);\n    } else {\n      message.amount = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorSrcAddress !== undefined && (obj.validatorSrcAddress = message.validatorSrcAddress);\n    message.validatorDstAddress !== undefined && (obj.validatorDstAddress = message.validatorDstAddress);\n    message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgBeginRedelegate);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = object.delegatorAddress;\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorSrcAddress !== undefined && object.validatorSrcAddress !== null) {\n      message.validatorSrcAddress = object.validatorSrcAddress;\n    } else {\n      message.validatorSrcAddress = \"\";\n    }\n    if (object.validatorDstAddress !== undefined && object.validatorDstAddress !== null) {\n      message.validatorDstAddress = object.validatorDstAddress;\n    } else {\n      message.validatorDstAddress = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = coin_1.Coin.fromPartial(object.amount);\n    } else {\n      message.amount = undefined;\n    }\n    return message;\n  }\n};\nconst baseMsgBeginRedelegateResponse = {};\nexports.MsgBeginRedelegateResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.completionTime !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgBeginRedelegateResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgBeginRedelegateResponse);\n    if (object.completionTime !== undefined && object.completionTime !== null) {\n      message.completionTime = fromJsonTimestamp(object.completionTime);\n    } else {\n      message.completionTime = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.completionTime !== undefined && (obj.completionTime = message.completionTime.toISOString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgBeginRedelegateResponse);\n    if (object.completionTime !== undefined && object.completionTime !== null) {\n      message.completionTime = object.completionTime;\n    } else {\n      message.completionTime = undefined;\n    }\n    return message;\n  }\n};\nconst baseMsgUndelegate = {\n  delegatorAddress: \"\",\n  validatorAddress: \"\"\n};\nexports.MsgUndelegate = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    if (message.amount !== undefined) {\n      coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgUndelegate);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        case 3:\n          message.amount = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgUndelegate);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = String(object.delegatorAddress);\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = String(object.validatorAddress);\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = coin_1.Coin.fromJSON(object.amount);\n    } else {\n      message.amount = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);\n    message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgUndelegate);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = object.delegatorAddress;\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = object.validatorAddress;\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = coin_1.Coin.fromPartial(object.amount);\n    } else {\n      message.amount = undefined;\n    }\n    return message;\n  }\n};\nconst baseMsgUndelegateResponse = {};\nexports.MsgUndelegateResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.completionTime !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgUndelegateResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgUndelegateResponse);\n    if (object.completionTime !== undefined && object.completionTime !== null) {\n      message.completionTime = fromJsonTimestamp(object.completionTime);\n    } else {\n      message.completionTime = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.completionTime !== undefined && (obj.completionTime = message.completionTime.toISOString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgUndelegateResponse);\n    if (object.completionTime !== undefined && object.completionTime !== null) {\n      message.completionTime = object.completionTime;\n    } else {\n      message.completionTime = undefined;\n    }\n    return message;\n  }\n};\nclass MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.CreateValidator = this.CreateValidator.bind(this);\n    this.EditValidator = this.EditValidator.bind(this);\n    this.Delegate = this.Delegate.bind(this);\n    this.BeginRedelegate = this.BeginRedelegate.bind(this);\n    this.Undelegate = this.Undelegate.bind(this);\n  }\n  CreateValidator(request, metadata) {\n    return this.rpc.unary(exports.MsgCreateValidatorDesc, exports.MsgCreateValidator.fromPartial(request), metadata);\n  }\n  EditValidator(request, metadata) {\n    return this.rpc.unary(exports.MsgEditValidatorDesc, exports.MsgEditValidator.fromPartial(request), metadata);\n  }\n  Delegate(request, metadata) {\n    return this.rpc.unary(exports.MsgDelegateDesc, exports.MsgDelegate.fromPartial(request), metadata);\n  }\n  BeginRedelegate(request, metadata) {\n    return this.rpc.unary(exports.MsgBeginRedelegateDesc, exports.MsgBeginRedelegate.fromPartial(request), metadata);\n  }\n  Undelegate(request, metadata) {\n    return this.rpc.unary(exports.MsgUndelegateDesc, exports.MsgUndelegate.fromPartial(request), metadata);\n  }\n}\nexports.MsgClientImpl = MsgClientImpl;\nexports.MsgDesc = {\n  serviceName: \"cosmos.staking.v1beta1.Msg\"\n};\nexports.MsgCreateValidatorDesc = {\n  methodName: \"CreateValidator\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgCreateValidator.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgCreateValidatorResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgEditValidatorDesc = {\n  methodName: \"EditValidator\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgEditValidator.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgEditValidatorResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgDelegateDesc = {\n  methodName: \"Delegate\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgDelegate.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgDelegateResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgBeginRedelegateDesc = {\n  methodName: \"BeginRedelegate\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgBeginRedelegate.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgBeginRedelegateResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgUndelegateDesc = {\n  methodName: \"Undelegate\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgUndelegate.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgUndelegateResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nclass GrpcWebImpl {\n  constructor(host, options) {\n    this.host = host;\n    this.options = options;\n  }\n  unary(methodDesc, _request, metadata) {\n    var _a;\n    const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);\n    const maybeCombinedMetadata = metadata && this.options.metadata ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap)) : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc_web_1.grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc_web_1.grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage);\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        }\n      });\n    });\n  }\n}\nexports.GrpcWebImpl = GrpcWebImpl;\nfunction toTimestamp(date) {\n  const seconds = numberToLong(date.getTime() / 1000);\n  const nanos = date.getTime() % 1000 * 1000000;\n  return {\n    seconds,\n    nanos\n  };\n}\nfunction fromTimestamp(t) {\n  let millis = t.seconds.toNumber() * 1000;\n  millis += t.nanos / 1000000;\n  return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n  }\n}\nfunction numberToLong(number) {\n  return long_1.default.fromNumber(number);\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}