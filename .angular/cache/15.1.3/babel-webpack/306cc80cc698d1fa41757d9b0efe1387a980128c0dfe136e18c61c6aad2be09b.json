{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GrpcWebImpl = exports.MsgFundCommunityPoolDesc = exports.MsgWithdrawValidatorCommissionDesc = exports.MsgWithdrawDelegatorRewardDesc = exports.MsgSetWithdrawAddressDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgFundCommunityPoolResponse = exports.MsgFundCommunityPool = exports.MsgWithdrawValidatorCommissionResponse = exports.MsgWithdrawValidatorCommission = exports.MsgWithdrawDelegatorRewardResponse = exports.MsgWithdrawDelegatorReward = exports.MsgSetWithdrawAddressResponse = exports.MsgSetWithdrawAddress = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst browser_headers_1 = require(\"browser-headers\");\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nexports.protobufPackage = \"cosmos.distribution.v1beta1\";\nconst baseMsgSetWithdrawAddress = {\n  delegatorAddress: \"\",\n  withdrawAddress: \"\"\n};\nexports.MsgSetWithdrawAddress = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.withdrawAddress !== \"\") {\n      writer.uint32(18).string(message.withdrawAddress);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgSetWithdrawAddress);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.withdrawAddress = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgSetWithdrawAddress);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = String(object.delegatorAddress);\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.withdrawAddress !== undefined && object.withdrawAddress !== null) {\n      message.withdrawAddress = String(object.withdrawAddress);\n    } else {\n      message.withdrawAddress = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);\n    message.withdrawAddress !== undefined && (obj.withdrawAddress = message.withdrawAddress);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgSetWithdrawAddress);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = object.delegatorAddress;\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.withdrawAddress !== undefined && object.withdrawAddress !== null) {\n      message.withdrawAddress = object.withdrawAddress;\n    } else {\n      message.withdrawAddress = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgSetWithdrawAddressResponse = {};\nexports.MsgSetWithdrawAddressResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgSetWithdrawAddressResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgSetWithdrawAddressResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgSetWithdrawAddressResponse);\n    return message;\n  }\n};\nconst baseMsgWithdrawDelegatorReward = {\n  delegatorAddress: \"\",\n  validatorAddress: \"\"\n};\nexports.MsgWithdrawDelegatorReward = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgWithdrawDelegatorReward);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgWithdrawDelegatorReward);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = String(object.delegatorAddress);\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = String(object.validatorAddress);\n    } else {\n      message.validatorAddress = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgWithdrawDelegatorReward);\n    if (object.delegatorAddress !== undefined && object.delegatorAddress !== null) {\n      message.delegatorAddress = object.delegatorAddress;\n    } else {\n      message.delegatorAddress = \"\";\n    }\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = object.validatorAddress;\n    } else {\n      message.validatorAddress = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgWithdrawDelegatorRewardResponse = {};\nexports.MsgWithdrawDelegatorRewardResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgWithdrawDelegatorRewardResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgWithdrawDelegatorRewardResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgWithdrawDelegatorRewardResponse);\n    return message;\n  }\n};\nconst baseMsgWithdrawValidatorCommission = {\n  validatorAddress: \"\"\n};\nexports.MsgWithdrawValidatorCommission = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(10).string(message.validatorAddress);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgWithdrawValidatorCommission);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.validatorAddress = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgWithdrawValidatorCommission);\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = String(object.validatorAddress);\n    } else {\n      message.validatorAddress = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgWithdrawValidatorCommission);\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = object.validatorAddress;\n    } else {\n      message.validatorAddress = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgWithdrawValidatorCommissionResponse = {};\nexports.MsgWithdrawValidatorCommissionResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgWithdrawValidatorCommissionResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgWithdrawValidatorCommissionResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgWithdrawValidatorCommissionResponse);\n    return message;\n  }\n};\nconst baseMsgFundCommunityPool = {\n  depositor: \"\"\n};\nexports.MsgFundCommunityPool = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.amount) {\n      coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.depositor !== \"\") {\n      writer.uint32(18).string(message.depositor);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgFundCommunityPool);\n    message.amount = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.depositor = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgFundCommunityPool);\n    message.amount = [];\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n    if (object.depositor !== undefined && object.depositor !== null) {\n      message.depositor = String(object.depositor);\n    } else {\n      message.depositor = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.amount) {\n      obj.amount = message.amount.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.amount = [];\n    }\n    message.depositor !== undefined && (obj.depositor = message.depositor);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgFundCommunityPool);\n    message.amount = [];\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n    if (object.depositor !== undefined && object.depositor !== null) {\n      message.depositor = object.depositor;\n    } else {\n      message.depositor = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgFundCommunityPoolResponse = {};\nexports.MsgFundCommunityPoolResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgFundCommunityPoolResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgFundCommunityPoolResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgFundCommunityPoolResponse);\n    return message;\n  }\n};\nclass MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.SetWithdrawAddress = this.SetWithdrawAddress.bind(this);\n    this.WithdrawDelegatorReward = this.WithdrawDelegatorReward.bind(this);\n    this.WithdrawValidatorCommission = this.WithdrawValidatorCommission.bind(this);\n    this.FundCommunityPool = this.FundCommunityPool.bind(this);\n  }\n  SetWithdrawAddress(request, metadata) {\n    return this.rpc.unary(exports.MsgSetWithdrawAddressDesc, exports.MsgSetWithdrawAddress.fromPartial(request), metadata);\n  }\n  WithdrawDelegatorReward(request, metadata) {\n    return this.rpc.unary(exports.MsgWithdrawDelegatorRewardDesc, exports.MsgWithdrawDelegatorReward.fromPartial(request), metadata);\n  }\n  WithdrawValidatorCommission(request, metadata) {\n    return this.rpc.unary(exports.MsgWithdrawValidatorCommissionDesc, exports.MsgWithdrawValidatorCommission.fromPartial(request), metadata);\n  }\n  FundCommunityPool(request, metadata) {\n    return this.rpc.unary(exports.MsgFundCommunityPoolDesc, exports.MsgFundCommunityPool.fromPartial(request), metadata);\n  }\n}\nexports.MsgClientImpl = MsgClientImpl;\nexports.MsgDesc = {\n  serviceName: \"cosmos.distribution.v1beta1.Msg\"\n};\nexports.MsgSetWithdrawAddressDesc = {\n  methodName: \"SetWithdrawAddress\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgSetWithdrawAddress.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgSetWithdrawAddressResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgWithdrawDelegatorRewardDesc = {\n  methodName: \"WithdrawDelegatorReward\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgWithdrawDelegatorReward.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgWithdrawDelegatorRewardResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgWithdrawValidatorCommissionDesc = {\n  methodName: \"WithdrawValidatorCommission\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgWithdrawValidatorCommission.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgWithdrawValidatorCommissionResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgFundCommunityPoolDesc = {\n  methodName: \"FundCommunityPool\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgFundCommunityPool.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgFundCommunityPoolResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nclass GrpcWebImpl {\n  constructor(host, options) {\n    this.host = host;\n    this.options = options;\n  }\n  unary(methodDesc, _request, metadata) {\n    var _a;\n    const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);\n    const maybeCombinedMetadata = metadata && this.options.metadata ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap)) : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc_web_1.grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc_web_1.grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage);\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        }\n      });\n    });\n  }\n}\nexports.GrpcWebImpl = GrpcWebImpl;\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}