{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxLog = exports.EventsByType = exports.TxInfo = void 0;\nvar Tx_1 = require(\"./Tx\");\nvar abci_1 = require(\"@terra-money/terra.proto/cosmos/base/abci/v1beta1/abci\");\n/**\n * A TxInfo data structure is used to capture information from a transaction lookup for\n * a transaction already included in a block\n */\nvar TxInfo = /** @class */function () {\n  /**\n   *\n   * @param height height of the block in which the transaction was included.\n   * @param txhash transaction's hash.\n   * @param raw_log raw log information, as a string.\n   * @param logs log information\n   * @param gas_wanted gas limited submitted in fee\n   * @param gas_used actual gas consumption\n   * @param tx transaction content\n   * @param timestamp time of inclusion\n   * @param code error code\n   */\n  function TxInfo(height, txhash, raw_log, logs, gas_wanted, gas_used, tx, timestamp, code, codespace) {\n    this.height = height;\n    this.txhash = txhash;\n    this.raw_log = raw_log;\n    this.logs = logs;\n    this.gas_wanted = gas_wanted;\n    this.gas_used = gas_used;\n    this.tx = tx;\n    this.timestamp = timestamp;\n    this.code = code;\n    this.codespace = codespace;\n  }\n  TxInfo.fromProto = function (proto) {\n    return new TxInfo(proto.height.toNumber(), proto.txhash, proto.rawLog, proto.logs.map(function (log) {\n      return TxLog.fromProto(log);\n    }), proto.gasWanted.toNumber(), proto.gasUsed.toNumber(), Tx_1.Tx.unpackAny(proto.tx), proto.timestamp, proto.code, proto.codespace);\n  };\n  TxInfo.fromData = function (data, isClassic) {\n    return new TxInfo(Number.parseInt(data.height), data.txhash, data.raw_log, data.logs.map(function (log) {\n      return TxLog.fromData(log);\n    }), Number.parseInt(data.gas_wanted), Number.parseInt(data.gas_used), Tx_1.Tx.fromData(data.tx, isClassic), data.timestamp, data.code, data.codespace);\n  };\n  return TxInfo;\n}();\nexports.TxInfo = TxInfo;\nvar EventsByType;\n(function (EventsByType) {\n  function parse(eventAmino) {\n    var events = {};\n    eventAmino.forEach(function (ev) {\n      ev.attributes.forEach(function (attr) {\n        if (!(ev.type in events)) {\n          events[ev.type] = {};\n        }\n        if (!(attr.key in events[ev.type])) {\n          events[ev.type][attr.key] = [];\n        }\n        events[ev.type][attr.key].push(attr.value);\n      });\n    });\n    return events;\n  }\n  EventsByType.parse = parse;\n})(EventsByType = exports.EventsByType || (exports.EventsByType = {}));\nvar TxLog = /** @class */function () {\n  function TxLog(msg_index, log, events) {\n    this.msg_index = msg_index;\n    this.log = log;\n    this.events = events;\n    this.eventsByType = EventsByType.parse(this.events);\n  }\n  TxLog.fromData = function (data) {\n    return new TxLog(data.msg_index, data.log, data.events.map(function (e) {\n      return {\n        type: e.type,\n        attributes: e.attributes.map(function (attr) {\n          return {\n            key: attr.key,\n            value: attr.value\n          };\n        })\n      };\n    }));\n  };\n  TxLog.prototype.toData = function () {\n    var _a = this,\n      msg_index = _a.msg_index,\n      log = _a.log,\n      events = _a.events;\n    return {\n      msg_index: msg_index,\n      log: log,\n      events: events\n    };\n  };\n  TxLog.fromProto = function (proto) {\n    return new TxLog(proto.msgIndex, proto.log, proto.events.map(function (e) {\n      return {\n        type: e.type,\n        attributes: e.attributes.map(function (attr) {\n          return {\n            key: attr.key,\n            value: attr.value\n          };\n        })\n      };\n    }));\n  };\n  TxLog.prototype.toProto = function () {\n    var _a = this,\n      msg_index = _a.msg_index,\n      log = _a.log,\n      events = _a.events;\n    return abci_1.ABCIMessageLog.fromPartial({\n      msgIndex: msg_index,\n      log: log,\n      events: events\n    });\n  };\n  return TxLog;\n}();\nexports.TxLog = TxLog;\n//# sourceMappingURL=TxInfo.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}