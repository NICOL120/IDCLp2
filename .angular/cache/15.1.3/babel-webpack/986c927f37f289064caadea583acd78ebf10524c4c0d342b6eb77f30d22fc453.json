{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PageResponse = exports.PageRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nexports.protobufPackage = \"cosmos.base.query.v1beta1\";\nconst basePageRequest = {\n  offset: long_1.default.UZERO,\n  limit: long_1.default.UZERO,\n  countTotal: false,\n  reverse: false\n};\nexports.PageRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (!message.offset.isZero()) {\n      writer.uint32(16).uint64(message.offset);\n    }\n    if (!message.limit.isZero()) {\n      writer.uint32(24).uint64(message.limit);\n    }\n    if (message.countTotal === true) {\n      writer.uint32(32).bool(message.countTotal);\n    }\n    if (message.reverse === true) {\n      writer.uint32(40).bool(message.reverse);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, basePageRequest);\n    message.key = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.offset = reader.uint64();\n          break;\n        case 3:\n          message.limit = reader.uint64();\n          break;\n        case 4:\n          message.countTotal = reader.bool();\n          break;\n        case 5:\n          message.reverse = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, basePageRequest);\n    message.key = new Uint8Array();\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n    if (object.offset !== undefined && object.offset !== null) {\n      message.offset = long_1.default.fromString(object.offset);\n    } else {\n      message.offset = long_1.default.UZERO;\n    }\n    if (object.limit !== undefined && object.limit !== null) {\n      message.limit = long_1.default.fromString(object.limit);\n    } else {\n      message.limit = long_1.default.UZERO;\n    }\n    if (object.countTotal !== undefined && object.countTotal !== null) {\n      message.countTotal = Boolean(object.countTotal);\n    } else {\n      message.countTotal = false;\n    }\n    if (object.reverse !== undefined && object.reverse !== null) {\n      message.reverse = Boolean(object.reverse);\n    } else {\n      message.reverse = false;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.offset !== undefined && (obj.offset = (message.offset || long_1.default.UZERO).toString());\n    message.limit !== undefined && (obj.limit = (message.limit || long_1.default.UZERO).toString());\n    message.countTotal !== undefined && (obj.countTotal = message.countTotal);\n    message.reverse !== undefined && (obj.reverse = message.reverse);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, basePageRequest);\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = new Uint8Array();\n    }\n    if (object.offset !== undefined && object.offset !== null) {\n      message.offset = object.offset;\n    } else {\n      message.offset = long_1.default.UZERO;\n    }\n    if (object.limit !== undefined && object.limit !== null) {\n      message.limit = object.limit;\n    } else {\n      message.limit = long_1.default.UZERO;\n    }\n    if (object.countTotal !== undefined && object.countTotal !== null) {\n      message.countTotal = object.countTotal;\n    } else {\n      message.countTotal = false;\n    }\n    if (object.reverse !== undefined && object.reverse !== null) {\n      message.reverse = object.reverse;\n    } else {\n      message.reverse = false;\n    }\n    return message;\n  }\n};\nconst basePageResponse = {\n  total: long_1.default.UZERO\n};\nexports.PageResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.nextKey.length !== 0) {\n      writer.uint32(10).bytes(message.nextKey);\n    }\n    if (!message.total.isZero()) {\n      writer.uint32(16).uint64(message.total);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, basePageResponse);\n    message.nextKey = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.nextKey = reader.bytes();\n          break;\n        case 2:\n          message.total = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, basePageResponse);\n    message.nextKey = new Uint8Array();\n    if (object.nextKey !== undefined && object.nextKey !== null) {\n      message.nextKey = bytesFromBase64(object.nextKey);\n    }\n    if (object.total !== undefined && object.total !== null) {\n      message.total = long_1.default.fromString(object.total);\n    } else {\n      message.total = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.nextKey !== undefined && (obj.nextKey = base64FromBytes(message.nextKey !== undefined ? message.nextKey : new Uint8Array()));\n    message.total !== undefined && (obj.total = (message.total || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, basePageResponse);\n    if (object.nextKey !== undefined && object.nextKey !== null) {\n      message.nextKey = object.nextKey;\n    } else {\n      message.nextKey = new Uint8Array();\n    }\n    if (object.total !== undefined && object.total !== null) {\n      message.total = object.total;\n    } else {\n      message.total = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=pagination.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}