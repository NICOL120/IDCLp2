{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgConnectionOpenTry = void 0;\nvar json_1 = require(\"../../../../util/json\");\nvar any_1 = require(\"@terra-money/terra.proto/google/protobuf/any\");\nvar Counterparty_1 = require(\"../../core/connection/Counterparty\");\nvar Version_1 = require(\"../../core/connection/Version\");\nvar tx_1 = require(\"@terra-money/terra.proto/ibc/core/connection/v1/tx\");\nvar long_1 = __importDefault(require(\"long\"));\nvar Height_1 = require(\"../../core/client/Height\");\n/**\n *  MsgConnectionOpenTry defines a msg sent by a Relayer to try to open a connection on Chain B.\n */\nvar MsgConnectionOpenTry = /** @class */function (_super) {\n  __extends(MsgConnectionOpenTry, _super);\n  /**\n   * @param client_id in the case of crossing hello's, when both chains call OpenInit, we need the connection identifier of the previous connection in state INIT\n   * @param previous_connection_id\n   * @param client_state\n   * @param counterparty\n   * @param delay_period\n   * @param counterparty_versions\n   * @param proof_height proof of the initialization the connection on Chain A: `UNITIALIZED -> INIT`\n   * @param proof_init proof of client state included in message\n   * @param proof_client proof of client consensus state\n   * @param proof_consensus\n   * @param consensus_height\n   * @param signer signer address\n   */\n  function MsgConnectionOpenTry(client_id, previous_connection_id, client_state, counterparty, delay_period, counterparty_versions, proof_height, proof_init, proof_client, proof_consensus, consensus_height, signer) {\n    var _this = _super.call(this) || this;\n    _this.client_id = client_id;\n    _this.previous_connection_id = previous_connection_id;\n    _this.client_state = client_state;\n    _this.counterparty = counterparty;\n    _this.delay_period = delay_period;\n    _this.counterparty_versions = counterparty_versions;\n    _this.proof_height = proof_height;\n    _this.proof_init = proof_init;\n    _this.proof_client = proof_client;\n    _this.proof_consensus = proof_consensus;\n    _this.consensus_height = consensus_height;\n    _this.signer = signer;\n    return _this;\n  }\n  MsgConnectionOpenTry.fromAmino = function (_, isClassic) {\n    _;\n    isClassic;\n    throw new Error('Amino not supported');\n  };\n  MsgConnectionOpenTry.prototype.toAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n  MsgConnectionOpenTry.fromData = function (data, _) {\n    _;\n    var client_id = data.client_id,\n      previous_connection_id = data.previous_connection_id,\n      client_state = data.client_state,\n      counterparty = data.counterparty,\n      delay_period = data.delay_period,\n      counterparty_versions = data.counterparty_versions,\n      proof_height = data.proof_height,\n      proof_init = data.proof_init,\n      proof_client = data.proof_client,\n      proof_consensus = data.proof_consensus,\n      consensus_height = data.consensus_height,\n      signer = data.signer;\n    return new MsgConnectionOpenTry(client_id, previous_connection_id, client_state, counterparty ? Counterparty_1.Counterparty.fromData(counterparty) : undefined, Number.parseInt(delay_period), counterparty_versions.length > 0 ? counterparty_versions.map(function (cv) {\n      return Version_1.Version.fromData(cv);\n    }) : [], proof_height ? Height_1.Height.fromData(proof_height) : undefined, Buffer.from(proof_init).toString('base64'), Buffer.from(proof_client).toString('base64'), Buffer.from(proof_consensus).toString('base64'), consensus_height ? Height_1.Height.fromData(consensus_height) : undefined, signer);\n  };\n  MsgConnectionOpenTry.prototype.toData = function (_) {\n    _;\n    var _a = this,\n      client_id = _a.client_id,\n      previous_connection_id = _a.previous_connection_id,\n      client_state = _a.client_state,\n      counterparty = _a.counterparty,\n      delay_period = _a.delay_period,\n      counterparty_versions = _a.counterparty_versions,\n      proof_height = _a.proof_height,\n      proof_init = _a.proof_init,\n      proof_client = _a.proof_client,\n      proof_consensus = _a.proof_consensus,\n      consensus_height = _a.consensus_height,\n      signer = _a.signer;\n    return {\n      '@type': '/ibc.core.connection.v1.MsgConnectionOpenTry',\n      client_id: client_id,\n      previous_connection_id: previous_connection_id,\n      client_state: client_state,\n      counterparty: counterparty ? counterparty.toData() : undefined,\n      delay_period: delay_period.toFixed(),\n      counterparty_versions: counterparty_versions.length > 0 ? counterparty_versions.map(function (cv) {\n        return cv.toData();\n      }) : [],\n      proof_height: proof_height ? proof_height.toData() : undefined,\n      proof_init: proof_init,\n      proof_client: proof_client,\n      proof_consensus: proof_consensus,\n      consensus_height: consensus_height ? consensus_height.toData() : undefined,\n      signer: signer\n    };\n  };\n  MsgConnectionOpenTry.fromProto = function (proto, _) {\n    _;\n    return new MsgConnectionOpenTry(proto.clientId, proto.previousConnectionId, proto.clientState, proto.counterparty ? Counterparty_1.Counterparty.fromProto(proto.counterparty) : undefined, proto.delayPeriod.toNumber(), proto.counterpartyVersions.length > 0 ? proto.counterpartyVersions.map(function (cv) {\n      return Version_1.Version.fromProto(cv);\n    }) : [], proto.proofHeight ? Height_1.Height.fromProto(proto.proofHeight) : undefined, Buffer.from(proto.proofInit).toString('base64'), Buffer.from(proto.proofClient).toString('base64'), Buffer.from(proto.proofConsensus).toString('base64'), proto.consensusHeight ? Height_1.Height.fromProto(proto.consensusHeight) : undefined, proto.signer);\n  };\n  MsgConnectionOpenTry.prototype.toProto = function (_) {\n    _;\n    var _a = this,\n      client_id = _a.client_id,\n      previous_connection_id = _a.previous_connection_id,\n      client_state = _a.client_state,\n      counterparty = _a.counterparty,\n      delay_period = _a.delay_period,\n      counterparty_versions = _a.counterparty_versions,\n      proof_height = _a.proof_height,\n      proof_init = _a.proof_init,\n      proof_client = _a.proof_client,\n      proof_consensus = _a.proof_consensus,\n      consensus_height = _a.consensus_height,\n      signer = _a.signer;\n    return tx_1.MsgConnectionOpenTry.fromPartial({\n      clientId: client_id,\n      previousConnectionId: previous_connection_id,\n      clientState: client_state.toProto(),\n      counterparty: counterparty ? counterparty.toProto() : undefined,\n      delayPeriod: long_1.default.fromNumber(delay_period),\n      counterpartyVersions: counterparty_versions.length > 0 ? counterparty_versions.map(function (cv) {\n        return cv.toProto();\n      }) : [],\n      proofHeight: proof_height ? proof_height.toProto() : undefined,\n      proofInit: Buffer.from(proof_init, 'base64'),\n      proofClient: Buffer.from(proof_client, 'base64'),\n      proofConsensus: Buffer.from(proof_consensus, 'base64'),\n      consensusHeight: consensus_height ? consensus_height.toProto() : undefined,\n      signer: signer\n    });\n  };\n  MsgConnectionOpenTry.prototype.packAny = function (_) {\n    _;\n    return any_1.Any.fromPartial({\n      typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenTry',\n      value: tx_1.MsgConnectionOpenTry.encode(this.toProto()).finish()\n    });\n  };\n  MsgConnectionOpenTry.unpackAny = function (msgAny, _) {\n    _;\n    return MsgConnectionOpenTry.fromProto(tx_1.MsgConnectionOpenTry.decode(msgAny.value));\n  };\n  return MsgConnectionOpenTry;\n}(json_1.JSONSerializable);\nexports.MsgConnectionOpenTry = MsgConnectionOpenTry;\n//# sourceMappingURL=MsgConnectionOpenTry.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}