{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParameterChangeProposal = void 0;\nvar json_1 = require(\"../../../util/json\");\nvar ParamChange_1 = require(\"../ParamChange\");\nvar any_1 = require(\"@terra-money/terra.proto/google/protobuf/any\");\nvar params_1 = require(\"@terra-money/terra.proto/cosmos/params/v1beta1/params\");\n/**\n * Describes a proposal for directly altering the value of the module parameters.\n * If you want to select a couple parameters to change for your proposal, you'll first\n * include the subspace (module it belongs to, such as \"oracle\" or \"distribution\"), and\n * then just the specific keys that you want to include in your changes as items in a\n * JavaScript object.\n *\n * ```ts\n * import {\n *    Dec,\n *    MsgSubmitProposal,\n *    ParameterChangeProposal\n * } from \"@terra-money/terra.js\";\n *\n * const proposal = new ParameterChangeProposal(\"title\", \"description\", {\n *    market: {\n *      minspread: new Dec(0.25),\n *      basepool: new Dec(10000000)\n *    },\n *    staking: {\n *      UnbondingTime: 15000000\n *    }\n * });\n *\n * const msg = new MsgSubmitProposal();\n * ```\n */\nvar ParameterChangeProposal = /** @class */function (_super) {\n  __extends(ParameterChangeProposal, _super);\n  /**\n   * @param title proposal's title\n   * @param description proposal's description\n   * @param changes an object whose keys are subspace names, and whose values are objects\n   * with objects having for keys and values, the desired parameter changes.\n   */\n  function ParameterChangeProposal(title, description, changes) {\n    var _this = _super.call(this) || this;\n    _this.title = title;\n    _this.description = description;\n    if (Array.isArray(changes)) {\n      _this.changes = ParamChange_1.ParamChanges.fromData(changes);\n    } else {\n      _this.changes = changes;\n    }\n    return _this;\n  }\n  ParameterChangeProposal.fromAmino = function (data, _) {\n    _;\n    var _a = data.value,\n      title = _a.title,\n      description = _a.description,\n      changes = _a.changes;\n    return new ParameterChangeProposal(title, description, ParamChange_1.ParamChanges.fromAmino(changes));\n  };\n  ParameterChangeProposal.prototype.toAmino = function (isClassic) {\n    var _a = this,\n      title = _a.title,\n      description = _a.description,\n      changes = _a.changes;\n    return {\n      type: isClassic ? 'params/ParameterChangeProposal' : 'cosmos-sdk/ParameterChangeProposal',\n      value: {\n        title: title,\n        description: description,\n        changes: changes.toAmino()\n      }\n    };\n  };\n  ParameterChangeProposal.fromData = function (proto, _) {\n    _;\n    var title = proto.title,\n      description = proto.description,\n      changes = proto.changes;\n    return new ParameterChangeProposal(title, description, ParamChange_1.ParamChanges.fromData(changes));\n  };\n  ParameterChangeProposal.prototype.toData = function (_) {\n    _;\n    var _a = this,\n      title = _a.title,\n      description = _a.description,\n      changes = _a.changes;\n    return {\n      '@type': '/cosmos.params.v1beta1.ParameterChangeProposal',\n      title: title,\n      description: description,\n      changes: changes.toData()\n    };\n  };\n  ParameterChangeProposal.fromProto = function (proto, _) {\n    _;\n    return new ParameterChangeProposal(proto.title, proto.description, ParamChange_1.ParamChanges.fromProto(proto.changes));\n  };\n  ParameterChangeProposal.prototype.toProto = function (_) {\n    _;\n    var _a = this,\n      title = _a.title,\n      description = _a.description,\n      changes = _a.changes;\n    return params_1.ParameterChangeProposal.fromPartial({\n      changes: changes.toProto(),\n      description: description,\n      title: title\n    });\n  };\n  ParameterChangeProposal.prototype.packAny = function (isClassic) {\n    return any_1.Any.fromPartial({\n      typeUrl: '/cosmos.params.v1beta1.ParameterChangeProposal',\n      value: params_1.ParameterChangeProposal.encode(this.toProto(isClassic)).finish()\n    });\n  };\n  ParameterChangeProposal.unpackAny = function (msgAny, isClassic) {\n    return ParameterChangeProposal.fromProto(params_1.ParameterChangeProposal.decode(msgAny.value), isClassic);\n  };\n  return ParameterChangeProposal;\n}(json_1.JSONSerializable);\nexports.ParameterChangeProposal = ParameterChangeProposal;\n//# sourceMappingURL=ParameterChangeProposal.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}