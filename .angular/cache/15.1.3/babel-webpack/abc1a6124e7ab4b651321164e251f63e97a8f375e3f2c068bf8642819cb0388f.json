{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let LoaderService = /*#__PURE__*/(() => {\n  class LoaderService {\n    constructor() {\n      this.state = {\n        loading: false,\n        counter: 0\n      };\n      this.update = new BehaviorSubject(this.state);\n    }\n    enterLoad(value) {\n      this.state.counter++;\n      this.state.loading = true;\n      this.state.value = value || this.state.value;\n      this.update.next(this.state);\n    }\n    exitLoad() {\n      this.state.counter--;\n      if (this.state.counter <= 0) {\n        this.state.loading = false;\n        this.state.value = null;\n      }\n      this.update.next(this.state);\n    }\n    loading(action, value) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          this.enterLoad(value);\n          return yield action();\n        } finally {\n          this.exitLoad();\n        }\n      });\n    }\n  }\n  LoaderService.ɵfac = function LoaderService_Factory(t) {\n    return new (t || LoaderService)();\n  };\n  LoaderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoaderService,\n    factory: LoaderService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoaderService;\n})();\nexport class LoaderState {}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}