{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TallyParams = exports.VotingParams = exports.DepositParams = exports.Vote = exports.TallyResult = exports.Proposal = exports.Deposit = exports.TextProposal = exports.WeightedVoteOption = exports.proposalStatusToJSON = exports.proposalStatusFromJSON = exports.ProposalStatus = exports.voteOptionToJSON = exports.voteOptionFromJSON = exports.VoteOption = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst any_1 = require(\"../../../google/protobuf/any\");\nconst duration_1 = require(\"../../../google/protobuf/duration\");\nconst timestamp_1 = require(\"../../../google/protobuf/timestamp\");\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nexports.protobufPackage = \"cosmos.gov.v1beta1\";\n/** VoteOption enumerates the valid vote options for a given governance proposal. */\nvar VoteOption;\n(function (VoteOption) {\n  /** VOTE_OPTION_UNSPECIFIED - VOTE_OPTION_UNSPECIFIED defines a no-op vote option. */\n  VoteOption[VoteOption[\"VOTE_OPTION_UNSPECIFIED\"] = 0] = \"VOTE_OPTION_UNSPECIFIED\";\n  /** VOTE_OPTION_YES - VOTE_OPTION_YES defines a yes vote option. */\n  VoteOption[VoteOption[\"VOTE_OPTION_YES\"] = 1] = \"VOTE_OPTION_YES\";\n  /** VOTE_OPTION_ABSTAIN - VOTE_OPTION_ABSTAIN defines an abstain vote option. */\n  VoteOption[VoteOption[\"VOTE_OPTION_ABSTAIN\"] = 2] = \"VOTE_OPTION_ABSTAIN\";\n  /** VOTE_OPTION_NO - VOTE_OPTION_NO defines a no vote option. */\n  VoteOption[VoteOption[\"VOTE_OPTION_NO\"] = 3] = \"VOTE_OPTION_NO\";\n  /** VOTE_OPTION_NO_WITH_VETO - VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option. */\n  VoteOption[VoteOption[\"VOTE_OPTION_NO_WITH_VETO\"] = 4] = \"VOTE_OPTION_NO_WITH_VETO\";\n  VoteOption[VoteOption[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VoteOption = exports.VoteOption || (exports.VoteOption = {}));\nfunction voteOptionFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"VOTE_OPTION_UNSPECIFIED\":\n      return VoteOption.VOTE_OPTION_UNSPECIFIED;\n    case 1:\n    case \"VOTE_OPTION_YES\":\n      return VoteOption.VOTE_OPTION_YES;\n    case 2:\n    case \"VOTE_OPTION_ABSTAIN\":\n      return VoteOption.VOTE_OPTION_ABSTAIN;\n    case 3:\n    case \"VOTE_OPTION_NO\":\n      return VoteOption.VOTE_OPTION_NO;\n    case 4:\n    case \"VOTE_OPTION_NO_WITH_VETO\":\n      return VoteOption.VOTE_OPTION_NO_WITH_VETO;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return VoteOption.UNRECOGNIZED;\n  }\n}\nexports.voteOptionFromJSON = voteOptionFromJSON;\nfunction voteOptionToJSON(object) {\n  switch (object) {\n    case VoteOption.VOTE_OPTION_UNSPECIFIED:\n      return \"VOTE_OPTION_UNSPECIFIED\";\n    case VoteOption.VOTE_OPTION_YES:\n      return \"VOTE_OPTION_YES\";\n    case VoteOption.VOTE_OPTION_ABSTAIN:\n      return \"VOTE_OPTION_ABSTAIN\";\n    case VoteOption.VOTE_OPTION_NO:\n      return \"VOTE_OPTION_NO\";\n    case VoteOption.VOTE_OPTION_NO_WITH_VETO:\n      return \"VOTE_OPTION_NO_WITH_VETO\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.voteOptionToJSON = voteOptionToJSON;\n/** ProposalStatus enumerates the valid statuses of a proposal. */\nvar ProposalStatus;\n(function (ProposalStatus) {\n  /** PROPOSAL_STATUS_UNSPECIFIED - PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status. */\n  ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_UNSPECIFIED\"] = 0] = \"PROPOSAL_STATUS_UNSPECIFIED\";\n  /**\n   * PROPOSAL_STATUS_DEPOSIT_PERIOD - PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\n   * period.\n   */\n  ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_DEPOSIT_PERIOD\"] = 1] = \"PROPOSAL_STATUS_DEPOSIT_PERIOD\";\n  /**\n   * PROPOSAL_STATUS_VOTING_PERIOD - PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\n   * period.\n   */\n  ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_VOTING_PERIOD\"] = 2] = \"PROPOSAL_STATUS_VOTING_PERIOD\";\n  /**\n   * PROPOSAL_STATUS_PASSED - PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\n   * passed.\n   */\n  ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_PASSED\"] = 3] = \"PROPOSAL_STATUS_PASSED\";\n  /**\n   * PROPOSAL_STATUS_REJECTED - PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\n   * been rejected.\n   */\n  ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_REJECTED\"] = 4] = \"PROPOSAL_STATUS_REJECTED\";\n  /**\n   * PROPOSAL_STATUS_FAILED - PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\n   * failed.\n   */\n  ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_FAILED\"] = 5] = \"PROPOSAL_STATUS_FAILED\";\n  ProposalStatus[ProposalStatus[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ProposalStatus = exports.ProposalStatus || (exports.ProposalStatus = {}));\nfunction proposalStatusFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"PROPOSAL_STATUS_UNSPECIFIED\":\n      return ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED;\n    case 1:\n    case \"PROPOSAL_STATUS_DEPOSIT_PERIOD\":\n      return ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD;\n    case 2:\n    case \"PROPOSAL_STATUS_VOTING_PERIOD\":\n      return ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD;\n    case 3:\n    case \"PROPOSAL_STATUS_PASSED\":\n      return ProposalStatus.PROPOSAL_STATUS_PASSED;\n    case 4:\n    case \"PROPOSAL_STATUS_REJECTED\":\n      return ProposalStatus.PROPOSAL_STATUS_REJECTED;\n    case 5:\n    case \"PROPOSAL_STATUS_FAILED\":\n      return ProposalStatus.PROPOSAL_STATUS_FAILED;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return ProposalStatus.UNRECOGNIZED;\n  }\n}\nexports.proposalStatusFromJSON = proposalStatusFromJSON;\nfunction proposalStatusToJSON(object) {\n  switch (object) {\n    case ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED:\n      return \"PROPOSAL_STATUS_UNSPECIFIED\";\n    case ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD:\n      return \"PROPOSAL_STATUS_DEPOSIT_PERIOD\";\n    case ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD:\n      return \"PROPOSAL_STATUS_VOTING_PERIOD\";\n    case ProposalStatus.PROPOSAL_STATUS_PASSED:\n      return \"PROPOSAL_STATUS_PASSED\";\n    case ProposalStatus.PROPOSAL_STATUS_REJECTED:\n      return \"PROPOSAL_STATUS_REJECTED\";\n    case ProposalStatus.PROPOSAL_STATUS_FAILED:\n      return \"PROPOSAL_STATUS_FAILED\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.proposalStatusToJSON = proposalStatusToJSON;\nconst baseWeightedVoteOption = {\n  option: 0,\n  weight: \"\"\n};\nexports.WeightedVoteOption = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.option !== 0) {\n      writer.uint32(8).int32(message.option);\n    }\n    if (message.weight !== \"\") {\n      writer.uint32(18).string(message.weight);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseWeightedVoteOption);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.option = reader.int32();\n          break;\n        case 2:\n          message.weight = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseWeightedVoteOption);\n    if (object.option !== undefined && object.option !== null) {\n      message.option = voteOptionFromJSON(object.option);\n    } else {\n      message.option = 0;\n    }\n    if (object.weight !== undefined && object.weight !== null) {\n      message.weight = String(object.weight);\n    } else {\n      message.weight = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.option !== undefined && (obj.option = voteOptionToJSON(message.option));\n    message.weight !== undefined && (obj.weight = message.weight);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseWeightedVoteOption);\n    if (object.option !== undefined && object.option !== null) {\n      message.option = object.option;\n    } else {\n      message.option = 0;\n    }\n    if (object.weight !== undefined && object.weight !== null) {\n      message.weight = object.weight;\n    } else {\n      message.weight = \"\";\n    }\n    return message;\n  }\n};\nconst baseTextProposal = {\n  title: \"\",\n  description: \"\"\n};\nexports.TextProposal = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.title !== \"\") {\n      writer.uint32(10).string(message.title);\n    }\n    if (message.description !== \"\") {\n      writer.uint32(18).string(message.description);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTextProposal);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.title = reader.string();\n          break;\n        case 2:\n          message.description = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseTextProposal);\n    if (object.title !== undefined && object.title !== null) {\n      message.title = String(object.title);\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = String(object.description);\n    } else {\n      message.description = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.title !== undefined && (obj.title = message.title);\n    message.description !== undefined && (obj.description = message.description);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseTextProposal);\n    if (object.title !== undefined && object.title !== null) {\n      message.title = object.title;\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = object.description;\n    } else {\n      message.description = \"\";\n    }\n    return message;\n  }\n};\nconst baseDeposit = {\n  proposalId: long_1.default.UZERO,\n  depositor: \"\"\n};\nexports.Deposit = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.depositor !== \"\") {\n      writer.uint32(18).string(message.depositor);\n    }\n    for (const v of message.amount) {\n      coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseDeposit);\n    message.amount = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64();\n          break;\n        case 2:\n          message.depositor = reader.string();\n          break;\n        case 3:\n          message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseDeposit);\n    message.amount = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = long_1.default.fromString(object.proposalId);\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.depositor !== undefined && object.depositor !== null) {\n      message.depositor = String(object.depositor);\n    } else {\n      message.depositor = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.proposalId !== undefined && (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());\n    message.depositor !== undefined && (obj.depositor = message.depositor);\n    if (message.amount) {\n      obj.amount = message.amount.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.amount = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseDeposit);\n    message.amount = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = object.proposalId;\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.depositor !== undefined && object.depositor !== null) {\n      message.depositor = object.depositor;\n    } else {\n      message.depositor = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseProposal = {\n  proposalId: long_1.default.UZERO,\n  status: 0\n};\nexports.Proposal = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.content !== undefined) {\n      any_1.Any.encode(message.content, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.status !== 0) {\n      writer.uint32(24).int32(message.status);\n    }\n    if (message.finalTallyResult !== undefined) {\n      exports.TallyResult.encode(message.finalTallyResult, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.submitTime !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.submitTime), writer.uint32(42).fork()).ldelim();\n    }\n    if (message.depositEndTime !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.depositEndTime), writer.uint32(50).fork()).ldelim();\n    }\n    for (const v of message.totalDeposit) {\n      coin_1.Coin.encode(v, writer.uint32(58).fork()).ldelim();\n    }\n    if (message.votingStartTime !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.votingStartTime), writer.uint32(66).fork()).ldelim();\n    }\n    if (message.votingEndTime !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.votingEndTime), writer.uint32(74).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseProposal);\n    message.totalDeposit = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64();\n          break;\n        case 2:\n          message.content = any_1.Any.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.status = reader.int32();\n          break;\n        case 4:\n          message.finalTallyResult = exports.TallyResult.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.submitTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n        case 6:\n          message.depositEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n        case 7:\n          message.totalDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n        case 8:\n          message.votingStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n        case 9:\n          message.votingEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseProposal);\n    message.totalDeposit = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = long_1.default.fromString(object.proposalId);\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.content !== undefined && object.content !== null) {\n      message.content = any_1.Any.fromJSON(object.content);\n    } else {\n      message.content = undefined;\n    }\n    if (object.status !== undefined && object.status !== null) {\n      message.status = proposalStatusFromJSON(object.status);\n    } else {\n      message.status = 0;\n    }\n    if (object.finalTallyResult !== undefined && object.finalTallyResult !== null) {\n      message.finalTallyResult = exports.TallyResult.fromJSON(object.finalTallyResult);\n    } else {\n      message.finalTallyResult = undefined;\n    }\n    if (object.submitTime !== undefined && object.submitTime !== null) {\n      message.submitTime = fromJsonTimestamp(object.submitTime);\n    } else {\n      message.submitTime = undefined;\n    }\n    if (object.depositEndTime !== undefined && object.depositEndTime !== null) {\n      message.depositEndTime = fromJsonTimestamp(object.depositEndTime);\n    } else {\n      message.depositEndTime = undefined;\n    }\n    if (object.totalDeposit !== undefined && object.totalDeposit !== null) {\n      for (const e of object.totalDeposit) {\n        message.totalDeposit.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n    if (object.votingStartTime !== undefined && object.votingStartTime !== null) {\n      message.votingStartTime = fromJsonTimestamp(object.votingStartTime);\n    } else {\n      message.votingStartTime = undefined;\n    }\n    if (object.votingEndTime !== undefined && object.votingEndTime !== null) {\n      message.votingEndTime = fromJsonTimestamp(object.votingEndTime);\n    } else {\n      message.votingEndTime = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.proposalId !== undefined && (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());\n    message.content !== undefined && (obj.content = message.content ? any_1.Any.toJSON(message.content) : undefined);\n    message.status !== undefined && (obj.status = proposalStatusToJSON(message.status));\n    message.finalTallyResult !== undefined && (obj.finalTallyResult = message.finalTallyResult ? exports.TallyResult.toJSON(message.finalTallyResult) : undefined);\n    message.submitTime !== undefined && (obj.submitTime = message.submitTime.toISOString());\n    message.depositEndTime !== undefined && (obj.depositEndTime = message.depositEndTime.toISOString());\n    if (message.totalDeposit) {\n      obj.totalDeposit = message.totalDeposit.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.totalDeposit = [];\n    }\n    message.votingStartTime !== undefined && (obj.votingStartTime = message.votingStartTime.toISOString());\n    message.votingEndTime !== undefined && (obj.votingEndTime = message.votingEndTime.toISOString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseProposal);\n    message.totalDeposit = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = object.proposalId;\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.content !== undefined && object.content !== null) {\n      message.content = any_1.Any.fromPartial(object.content);\n    } else {\n      message.content = undefined;\n    }\n    if (object.status !== undefined && object.status !== null) {\n      message.status = object.status;\n    } else {\n      message.status = 0;\n    }\n    if (object.finalTallyResult !== undefined && object.finalTallyResult !== null) {\n      message.finalTallyResult = exports.TallyResult.fromPartial(object.finalTallyResult);\n    } else {\n      message.finalTallyResult = undefined;\n    }\n    if (object.submitTime !== undefined && object.submitTime !== null) {\n      message.submitTime = object.submitTime;\n    } else {\n      message.submitTime = undefined;\n    }\n    if (object.depositEndTime !== undefined && object.depositEndTime !== null) {\n      message.depositEndTime = object.depositEndTime;\n    } else {\n      message.depositEndTime = undefined;\n    }\n    if (object.totalDeposit !== undefined && object.totalDeposit !== null) {\n      for (const e of object.totalDeposit) {\n        message.totalDeposit.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n    if (object.votingStartTime !== undefined && object.votingStartTime !== null) {\n      message.votingStartTime = object.votingStartTime;\n    } else {\n      message.votingStartTime = undefined;\n    }\n    if (object.votingEndTime !== undefined && object.votingEndTime !== null) {\n      message.votingEndTime = object.votingEndTime;\n    } else {\n      message.votingEndTime = undefined;\n    }\n    return message;\n  }\n};\nconst baseTallyResult = {\n  yes: \"\",\n  abstain: \"\",\n  no: \"\",\n  noWithVeto: \"\"\n};\nexports.TallyResult = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.yes !== \"\") {\n      writer.uint32(10).string(message.yes);\n    }\n    if (message.abstain !== \"\") {\n      writer.uint32(18).string(message.abstain);\n    }\n    if (message.no !== \"\") {\n      writer.uint32(26).string(message.no);\n    }\n    if (message.noWithVeto !== \"\") {\n      writer.uint32(34).string(message.noWithVeto);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTallyResult);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.yes = reader.string();\n          break;\n        case 2:\n          message.abstain = reader.string();\n          break;\n        case 3:\n          message.no = reader.string();\n          break;\n        case 4:\n          message.noWithVeto = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseTallyResult);\n    if (object.yes !== undefined && object.yes !== null) {\n      message.yes = String(object.yes);\n    } else {\n      message.yes = \"\";\n    }\n    if (object.abstain !== undefined && object.abstain !== null) {\n      message.abstain = String(object.abstain);\n    } else {\n      message.abstain = \"\";\n    }\n    if (object.no !== undefined && object.no !== null) {\n      message.no = String(object.no);\n    } else {\n      message.no = \"\";\n    }\n    if (object.noWithVeto !== undefined && object.noWithVeto !== null) {\n      message.noWithVeto = String(object.noWithVeto);\n    } else {\n      message.noWithVeto = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.yes !== undefined && (obj.yes = message.yes);\n    message.abstain !== undefined && (obj.abstain = message.abstain);\n    message.no !== undefined && (obj.no = message.no);\n    message.noWithVeto !== undefined && (obj.noWithVeto = message.noWithVeto);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseTallyResult);\n    if (object.yes !== undefined && object.yes !== null) {\n      message.yes = object.yes;\n    } else {\n      message.yes = \"\";\n    }\n    if (object.abstain !== undefined && object.abstain !== null) {\n      message.abstain = object.abstain;\n    } else {\n      message.abstain = \"\";\n    }\n    if (object.no !== undefined && object.no !== null) {\n      message.no = object.no;\n    } else {\n      message.no = \"\";\n    }\n    if (object.noWithVeto !== undefined && object.noWithVeto !== null) {\n      message.noWithVeto = object.noWithVeto;\n    } else {\n      message.noWithVeto = \"\";\n    }\n    return message;\n  }\n};\nconst baseVote = {\n  proposalId: long_1.default.UZERO,\n  voter: \"\",\n  option: 0\n};\nexports.Vote = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.voter !== \"\") {\n      writer.uint32(18).string(message.voter);\n    }\n    if (message.option !== 0) {\n      writer.uint32(24).int32(message.option);\n    }\n    for (const v of message.options) {\n      exports.WeightedVoteOption.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseVote);\n    message.options = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64();\n          break;\n        case 2:\n          message.voter = reader.string();\n          break;\n        case 3:\n          message.option = reader.int32();\n          break;\n        case 4:\n          message.options.push(exports.WeightedVoteOption.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseVote);\n    message.options = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = long_1.default.fromString(object.proposalId);\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.voter !== undefined && object.voter !== null) {\n      message.voter = String(object.voter);\n    } else {\n      message.voter = \"\";\n    }\n    if (object.option !== undefined && object.option !== null) {\n      message.option = voteOptionFromJSON(object.option);\n    } else {\n      message.option = 0;\n    }\n    if (object.options !== undefined && object.options !== null) {\n      for (const e of object.options) {\n        message.options.push(exports.WeightedVoteOption.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.proposalId !== undefined && (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());\n    message.voter !== undefined && (obj.voter = message.voter);\n    message.option !== undefined && (obj.option = voteOptionToJSON(message.option));\n    if (message.options) {\n      obj.options = message.options.map(e => e ? exports.WeightedVoteOption.toJSON(e) : undefined);\n    } else {\n      obj.options = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseVote);\n    message.options = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = object.proposalId;\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.voter !== undefined && object.voter !== null) {\n      message.voter = object.voter;\n    } else {\n      message.voter = \"\";\n    }\n    if (object.option !== undefined && object.option !== null) {\n      message.option = object.option;\n    } else {\n      message.option = 0;\n    }\n    if (object.options !== undefined && object.options !== null) {\n      for (const e of object.options) {\n        message.options.push(exports.WeightedVoteOption.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseDepositParams = {};\nexports.DepositParams = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.minDeposit) {\n      coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.maxDepositPeriod !== undefined) {\n      duration_1.Duration.encode(message.maxDepositPeriod, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseDepositParams);\n    message.minDeposit = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.minDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.maxDepositPeriod = duration_1.Duration.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseDepositParams);\n    message.minDeposit = [];\n    if (object.minDeposit !== undefined && object.minDeposit !== null) {\n      for (const e of object.minDeposit) {\n        message.minDeposit.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n    if (object.maxDepositPeriod !== undefined && object.maxDepositPeriod !== null) {\n      message.maxDepositPeriod = duration_1.Duration.fromJSON(object.maxDepositPeriod);\n    } else {\n      message.maxDepositPeriod = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.minDeposit) {\n      obj.minDeposit = message.minDeposit.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.minDeposit = [];\n    }\n    message.maxDepositPeriod !== undefined && (obj.maxDepositPeriod = message.maxDepositPeriod ? duration_1.Duration.toJSON(message.maxDepositPeriod) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseDepositParams);\n    message.minDeposit = [];\n    if (object.minDeposit !== undefined && object.minDeposit !== null) {\n      for (const e of object.minDeposit) {\n        message.minDeposit.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n    if (object.maxDepositPeriod !== undefined && object.maxDepositPeriod !== null) {\n      message.maxDepositPeriod = duration_1.Duration.fromPartial(object.maxDepositPeriod);\n    } else {\n      message.maxDepositPeriod = undefined;\n    }\n    return message;\n  }\n};\nconst baseVotingParams = {};\nexports.VotingParams = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.votingPeriod !== undefined) {\n      duration_1.Duration.encode(message.votingPeriod, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseVotingParams);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.votingPeriod = duration_1.Duration.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseVotingParams);\n    if (object.votingPeriod !== undefined && object.votingPeriod !== null) {\n      message.votingPeriod = duration_1.Duration.fromJSON(object.votingPeriod);\n    } else {\n      message.votingPeriod = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.votingPeriod !== undefined && (obj.votingPeriod = message.votingPeriod ? duration_1.Duration.toJSON(message.votingPeriod) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseVotingParams);\n    if (object.votingPeriod !== undefined && object.votingPeriod !== null) {\n      message.votingPeriod = duration_1.Duration.fromPartial(object.votingPeriod);\n    } else {\n      message.votingPeriod = undefined;\n    }\n    return message;\n  }\n};\nconst baseTallyParams = {};\nexports.TallyParams = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.quorum.length !== 0) {\n      writer.uint32(10).bytes(message.quorum);\n    }\n    if (message.threshold.length !== 0) {\n      writer.uint32(18).bytes(message.threshold);\n    }\n    if (message.vetoThreshold.length !== 0) {\n      writer.uint32(26).bytes(message.vetoThreshold);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTallyParams);\n    message.quorum = new Uint8Array();\n    message.threshold = new Uint8Array();\n    message.vetoThreshold = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.quorum = reader.bytes();\n          break;\n        case 2:\n          message.threshold = reader.bytes();\n          break;\n        case 3:\n          message.vetoThreshold = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseTallyParams);\n    message.quorum = new Uint8Array();\n    message.threshold = new Uint8Array();\n    message.vetoThreshold = new Uint8Array();\n    if (object.quorum !== undefined && object.quorum !== null) {\n      message.quorum = bytesFromBase64(object.quorum);\n    }\n    if (object.threshold !== undefined && object.threshold !== null) {\n      message.threshold = bytesFromBase64(object.threshold);\n    }\n    if (object.vetoThreshold !== undefined && object.vetoThreshold !== null) {\n      message.vetoThreshold = bytesFromBase64(object.vetoThreshold);\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.quorum !== undefined && (obj.quorum = base64FromBytes(message.quorum !== undefined ? message.quorum : new Uint8Array()));\n    message.threshold !== undefined && (obj.threshold = base64FromBytes(message.threshold !== undefined ? message.threshold : new Uint8Array()));\n    message.vetoThreshold !== undefined && (obj.vetoThreshold = base64FromBytes(message.vetoThreshold !== undefined ? message.vetoThreshold : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseTallyParams);\n    if (object.quorum !== undefined && object.quorum !== null) {\n      message.quorum = object.quorum;\n    } else {\n      message.quorum = new Uint8Array();\n    }\n    if (object.threshold !== undefined && object.threshold !== null) {\n      message.threshold = object.threshold;\n    } else {\n      message.threshold = new Uint8Array();\n    }\n    if (object.vetoThreshold !== undefined && object.vetoThreshold !== null) {\n      message.vetoThreshold = object.vetoThreshold;\n    } else {\n      message.vetoThreshold = new Uint8Array();\n    }\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nfunction toTimestamp(date) {\n  const seconds = numberToLong(date.getTime() / 1000);\n  const nanos = date.getTime() % 1000 * 1000000;\n  return {\n    seconds,\n    nanos\n  };\n}\nfunction fromTimestamp(t) {\n  let millis = t.seconds.toNumber() * 1000;\n  millis += t.nanos / 1000000;\n  return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n  }\n}\nfunction numberToLong(number) {\n  return long_1.default.fromNumber(number);\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=gov.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}