{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StakeAuthorization_Validators = exports.StakeAuthorization = exports.authorizationTypeToJSON = exports.authorizationTypeFromJSON = exports.AuthorizationType = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nexports.protobufPackage = \"cosmos.staking.v1beta1\";\n/**\n * AuthorizationType defines the type of staking module authorization type\n *\n * Since: cosmos-sdk 0.43\n */\nvar AuthorizationType;\n(function (AuthorizationType) {\n  /** AUTHORIZATION_TYPE_UNSPECIFIED - AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type */\n  AuthorizationType[AuthorizationType[\"AUTHORIZATION_TYPE_UNSPECIFIED\"] = 0] = \"AUTHORIZATION_TYPE_UNSPECIFIED\";\n  /** AUTHORIZATION_TYPE_DELEGATE - AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate */\n  AuthorizationType[AuthorizationType[\"AUTHORIZATION_TYPE_DELEGATE\"] = 1] = \"AUTHORIZATION_TYPE_DELEGATE\";\n  /** AUTHORIZATION_TYPE_UNDELEGATE - AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate */\n  AuthorizationType[AuthorizationType[\"AUTHORIZATION_TYPE_UNDELEGATE\"] = 2] = \"AUTHORIZATION_TYPE_UNDELEGATE\";\n  /** AUTHORIZATION_TYPE_REDELEGATE - AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate */\n  AuthorizationType[AuthorizationType[\"AUTHORIZATION_TYPE_REDELEGATE\"] = 3] = \"AUTHORIZATION_TYPE_REDELEGATE\";\n  AuthorizationType[AuthorizationType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AuthorizationType = exports.AuthorizationType || (exports.AuthorizationType = {}));\nfunction authorizationTypeFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"AUTHORIZATION_TYPE_UNSPECIFIED\":\n      return AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED;\n    case 1:\n    case \"AUTHORIZATION_TYPE_DELEGATE\":\n      return AuthorizationType.AUTHORIZATION_TYPE_DELEGATE;\n    case 2:\n    case \"AUTHORIZATION_TYPE_UNDELEGATE\":\n      return AuthorizationType.AUTHORIZATION_TYPE_UNDELEGATE;\n    case 3:\n    case \"AUTHORIZATION_TYPE_REDELEGATE\":\n      return AuthorizationType.AUTHORIZATION_TYPE_REDELEGATE;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return AuthorizationType.UNRECOGNIZED;\n  }\n}\nexports.authorizationTypeFromJSON = authorizationTypeFromJSON;\nfunction authorizationTypeToJSON(object) {\n  switch (object) {\n    case AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED:\n      return \"AUTHORIZATION_TYPE_UNSPECIFIED\";\n    case AuthorizationType.AUTHORIZATION_TYPE_DELEGATE:\n      return \"AUTHORIZATION_TYPE_DELEGATE\";\n    case AuthorizationType.AUTHORIZATION_TYPE_UNDELEGATE:\n      return \"AUTHORIZATION_TYPE_UNDELEGATE\";\n    case AuthorizationType.AUTHORIZATION_TYPE_REDELEGATE:\n      return \"AUTHORIZATION_TYPE_REDELEGATE\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.authorizationTypeToJSON = authorizationTypeToJSON;\nconst baseStakeAuthorization = {\n  authorizationType: 0\n};\nexports.StakeAuthorization = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.maxTokens !== undefined) {\n      coin_1.Coin.encode(message.maxTokens, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.allowList !== undefined) {\n      exports.StakeAuthorization_Validators.encode(message.allowList, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.denyList !== undefined) {\n      exports.StakeAuthorization_Validators.encode(message.denyList, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.authorizationType !== 0) {\n      writer.uint32(32).int32(message.authorizationType);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseStakeAuthorization);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.maxTokens = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.allowList = exports.StakeAuthorization_Validators.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.denyList = exports.StakeAuthorization_Validators.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.authorizationType = reader.int32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseStakeAuthorization);\n    if (object.maxTokens !== undefined && object.maxTokens !== null) {\n      message.maxTokens = coin_1.Coin.fromJSON(object.maxTokens);\n    } else {\n      message.maxTokens = undefined;\n    }\n    if (object.allowList !== undefined && object.allowList !== null) {\n      message.allowList = exports.StakeAuthorization_Validators.fromJSON(object.allowList);\n    } else {\n      message.allowList = undefined;\n    }\n    if (object.denyList !== undefined && object.denyList !== null) {\n      message.denyList = exports.StakeAuthorization_Validators.fromJSON(object.denyList);\n    } else {\n      message.denyList = undefined;\n    }\n    if (object.authorizationType !== undefined && object.authorizationType !== null) {\n      message.authorizationType = authorizationTypeFromJSON(object.authorizationType);\n    } else {\n      message.authorizationType = 0;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.maxTokens !== undefined && (obj.maxTokens = message.maxTokens ? coin_1.Coin.toJSON(message.maxTokens) : undefined);\n    message.allowList !== undefined && (obj.allowList = message.allowList ? exports.StakeAuthorization_Validators.toJSON(message.allowList) : undefined);\n    message.denyList !== undefined && (obj.denyList = message.denyList ? exports.StakeAuthorization_Validators.toJSON(message.denyList) : undefined);\n    message.authorizationType !== undefined && (obj.authorizationType = authorizationTypeToJSON(message.authorizationType));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseStakeAuthorization);\n    if (object.maxTokens !== undefined && object.maxTokens !== null) {\n      message.maxTokens = coin_1.Coin.fromPartial(object.maxTokens);\n    } else {\n      message.maxTokens = undefined;\n    }\n    if (object.allowList !== undefined && object.allowList !== null) {\n      message.allowList = exports.StakeAuthorization_Validators.fromPartial(object.allowList);\n    } else {\n      message.allowList = undefined;\n    }\n    if (object.denyList !== undefined && object.denyList !== null) {\n      message.denyList = exports.StakeAuthorization_Validators.fromPartial(object.denyList);\n    } else {\n      message.denyList = undefined;\n    }\n    if (object.authorizationType !== undefined && object.authorizationType !== null) {\n      message.authorizationType = object.authorizationType;\n    } else {\n      message.authorizationType = 0;\n    }\n    return message;\n  }\n};\nconst baseStakeAuthorization_Validators = {\n  address: \"\"\n};\nexports.StakeAuthorization_Validators = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.address) {\n      writer.uint32(10).string(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseStakeAuthorization_Validators);\n    message.address = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address.push(reader.string());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseStakeAuthorization_Validators);\n    message.address = [];\n    if (object.address !== undefined && object.address !== null) {\n      for (const e of object.address) {\n        message.address.push(String(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.address) {\n      obj.address = message.address.map(e => e);\n    } else {\n      obj.address = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseStakeAuthorization_Validators);\n    message.address = [];\n    if (object.address !== undefined && object.address !== null) {\n      for (const e of object.address) {\n        message.address.push(e);\n      }\n    }\n    return message;\n  }\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=authz.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}