{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommunityPoolSpendProposalWithDeposit = exports.DelegationDelegatorReward = exports.DelegatorStartingInfo = exports.CommunityPoolSpendProposal = exports.FeePool = exports.ValidatorSlashEvents = exports.ValidatorSlashEvent = exports.ValidatorOutstandingRewards = exports.ValidatorAccumulatedCommission = exports.ValidatorCurrentRewards = exports.ValidatorHistoricalRewards = exports.Params = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nexports.protobufPackage = \"cosmos.distribution.v1beta1\";\nconst baseParams = {\n  communityTax: \"\",\n  baseProposerReward: \"\",\n  bonusProposerReward: \"\",\n  withdrawAddrEnabled: false\n};\nexports.Params = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.communityTax !== \"\") {\n      writer.uint32(10).string(message.communityTax);\n    }\n    if (message.baseProposerReward !== \"\") {\n      writer.uint32(18).string(message.baseProposerReward);\n    }\n    if (message.bonusProposerReward !== \"\") {\n      writer.uint32(26).string(message.bonusProposerReward);\n    }\n    if (message.withdrawAddrEnabled === true) {\n      writer.uint32(32).bool(message.withdrawAddrEnabled);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseParams);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.communityTax = reader.string();\n          break;\n        case 2:\n          message.baseProposerReward = reader.string();\n          break;\n        case 3:\n          message.bonusProposerReward = reader.string();\n          break;\n        case 4:\n          message.withdrawAddrEnabled = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseParams);\n    if (object.communityTax !== undefined && object.communityTax !== null) {\n      message.communityTax = String(object.communityTax);\n    } else {\n      message.communityTax = \"\";\n    }\n    if (object.baseProposerReward !== undefined && object.baseProposerReward !== null) {\n      message.baseProposerReward = String(object.baseProposerReward);\n    } else {\n      message.baseProposerReward = \"\";\n    }\n    if (object.bonusProposerReward !== undefined && object.bonusProposerReward !== null) {\n      message.bonusProposerReward = String(object.bonusProposerReward);\n    } else {\n      message.bonusProposerReward = \"\";\n    }\n    if (object.withdrawAddrEnabled !== undefined && object.withdrawAddrEnabled !== null) {\n      message.withdrawAddrEnabled = Boolean(object.withdrawAddrEnabled);\n    } else {\n      message.withdrawAddrEnabled = false;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.communityTax !== undefined && (obj.communityTax = message.communityTax);\n    message.baseProposerReward !== undefined && (obj.baseProposerReward = message.baseProposerReward);\n    message.bonusProposerReward !== undefined && (obj.bonusProposerReward = message.bonusProposerReward);\n    message.withdrawAddrEnabled !== undefined && (obj.withdrawAddrEnabled = message.withdrawAddrEnabled);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseParams);\n    if (object.communityTax !== undefined && object.communityTax !== null) {\n      message.communityTax = object.communityTax;\n    } else {\n      message.communityTax = \"\";\n    }\n    if (object.baseProposerReward !== undefined && object.baseProposerReward !== null) {\n      message.baseProposerReward = object.baseProposerReward;\n    } else {\n      message.baseProposerReward = \"\";\n    }\n    if (object.bonusProposerReward !== undefined && object.bonusProposerReward !== null) {\n      message.bonusProposerReward = object.bonusProposerReward;\n    } else {\n      message.bonusProposerReward = \"\";\n    }\n    if (object.withdrawAddrEnabled !== undefined && object.withdrawAddrEnabled !== null) {\n      message.withdrawAddrEnabled = object.withdrawAddrEnabled;\n    } else {\n      message.withdrawAddrEnabled = false;\n    }\n    return message;\n  }\n};\nconst baseValidatorHistoricalRewards = {\n  referenceCount: 0\n};\nexports.ValidatorHistoricalRewards = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.cumulativeRewardRatio) {\n      coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.referenceCount !== 0) {\n      writer.uint32(16).uint32(message.referenceCount);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidatorHistoricalRewards);\n    message.cumulativeRewardRatio = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.cumulativeRewardRatio.push(coin_1.DecCoin.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.referenceCount = reader.uint32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidatorHistoricalRewards);\n    message.cumulativeRewardRatio = [];\n    if (object.cumulativeRewardRatio !== undefined && object.cumulativeRewardRatio !== null) {\n      for (const e of object.cumulativeRewardRatio) {\n        message.cumulativeRewardRatio.push(coin_1.DecCoin.fromJSON(e));\n      }\n    }\n    if (object.referenceCount !== undefined && object.referenceCount !== null) {\n      message.referenceCount = Number(object.referenceCount);\n    } else {\n      message.referenceCount = 0;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.cumulativeRewardRatio) {\n      obj.cumulativeRewardRatio = message.cumulativeRewardRatio.map(e => e ? coin_1.DecCoin.toJSON(e) : undefined);\n    } else {\n      obj.cumulativeRewardRatio = [];\n    }\n    message.referenceCount !== undefined && (obj.referenceCount = message.referenceCount);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidatorHistoricalRewards);\n    message.cumulativeRewardRatio = [];\n    if (object.cumulativeRewardRatio !== undefined && object.cumulativeRewardRatio !== null) {\n      for (const e of object.cumulativeRewardRatio) {\n        message.cumulativeRewardRatio.push(coin_1.DecCoin.fromPartial(e));\n      }\n    }\n    if (object.referenceCount !== undefined && object.referenceCount !== null) {\n      message.referenceCount = object.referenceCount;\n    } else {\n      message.referenceCount = 0;\n    }\n    return message;\n  }\n};\nconst baseValidatorCurrentRewards = {\n  period: long_1.default.UZERO\n};\nexports.ValidatorCurrentRewards = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.rewards) {\n      coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.period.isZero()) {\n      writer.uint32(16).uint64(message.period);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidatorCurrentRewards);\n    message.rewards = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.rewards.push(coin_1.DecCoin.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.period = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidatorCurrentRewards);\n    message.rewards = [];\n    if (object.rewards !== undefined && object.rewards !== null) {\n      for (const e of object.rewards) {\n        message.rewards.push(coin_1.DecCoin.fromJSON(e));\n      }\n    }\n    if (object.period !== undefined && object.period !== null) {\n      message.period = long_1.default.fromString(object.period);\n    } else {\n      message.period = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.rewards) {\n      obj.rewards = message.rewards.map(e => e ? coin_1.DecCoin.toJSON(e) : undefined);\n    } else {\n      obj.rewards = [];\n    }\n    message.period !== undefined && (obj.period = (message.period || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidatorCurrentRewards);\n    message.rewards = [];\n    if (object.rewards !== undefined && object.rewards !== null) {\n      for (const e of object.rewards) {\n        message.rewards.push(coin_1.DecCoin.fromPartial(e));\n      }\n    }\n    if (object.period !== undefined && object.period !== null) {\n      message.period = object.period;\n    } else {\n      message.period = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst baseValidatorAccumulatedCommission = {};\nexports.ValidatorAccumulatedCommission = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.commission) {\n      coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidatorAccumulatedCommission);\n    message.commission = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.commission.push(coin_1.DecCoin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidatorAccumulatedCommission);\n    message.commission = [];\n    if (object.commission !== undefined && object.commission !== null) {\n      for (const e of object.commission) {\n        message.commission.push(coin_1.DecCoin.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.commission) {\n      obj.commission = message.commission.map(e => e ? coin_1.DecCoin.toJSON(e) : undefined);\n    } else {\n      obj.commission = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidatorAccumulatedCommission);\n    message.commission = [];\n    if (object.commission !== undefined && object.commission !== null) {\n      for (const e of object.commission) {\n        message.commission.push(coin_1.DecCoin.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseValidatorOutstandingRewards = {};\nexports.ValidatorOutstandingRewards = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.rewards) {\n      coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidatorOutstandingRewards);\n    message.rewards = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.rewards.push(coin_1.DecCoin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidatorOutstandingRewards);\n    message.rewards = [];\n    if (object.rewards !== undefined && object.rewards !== null) {\n      for (const e of object.rewards) {\n        message.rewards.push(coin_1.DecCoin.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.rewards) {\n      obj.rewards = message.rewards.map(e => e ? coin_1.DecCoin.toJSON(e) : undefined);\n    } else {\n      obj.rewards = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidatorOutstandingRewards);\n    message.rewards = [];\n    if (object.rewards !== undefined && object.rewards !== null) {\n      for (const e of object.rewards) {\n        message.rewards.push(coin_1.DecCoin.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseValidatorSlashEvent = {\n  validatorPeriod: long_1.default.UZERO,\n  fraction: \"\"\n};\nexports.ValidatorSlashEvent = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.validatorPeriod.isZero()) {\n      writer.uint32(8).uint64(message.validatorPeriod);\n    }\n    if (message.fraction !== \"\") {\n      writer.uint32(18).string(message.fraction);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidatorSlashEvent);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.validatorPeriod = reader.uint64();\n          break;\n        case 2:\n          message.fraction = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidatorSlashEvent);\n    if (object.validatorPeriod !== undefined && object.validatorPeriod !== null) {\n      message.validatorPeriod = long_1.default.fromString(object.validatorPeriod);\n    } else {\n      message.validatorPeriod = long_1.default.UZERO;\n    }\n    if (object.fraction !== undefined && object.fraction !== null) {\n      message.fraction = String(object.fraction);\n    } else {\n      message.fraction = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.validatorPeriod !== undefined && (obj.validatorPeriod = (message.validatorPeriod || long_1.default.UZERO).toString());\n    message.fraction !== undefined && (obj.fraction = message.fraction);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidatorSlashEvent);\n    if (object.validatorPeriod !== undefined && object.validatorPeriod !== null) {\n      message.validatorPeriod = object.validatorPeriod;\n    } else {\n      message.validatorPeriod = long_1.default.UZERO;\n    }\n    if (object.fraction !== undefined && object.fraction !== null) {\n      message.fraction = object.fraction;\n    } else {\n      message.fraction = \"\";\n    }\n    return message;\n  }\n};\nconst baseValidatorSlashEvents = {};\nexports.ValidatorSlashEvents = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.validatorSlashEvents) {\n      exports.ValidatorSlashEvent.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidatorSlashEvents);\n    message.validatorSlashEvents = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.validatorSlashEvents.push(exports.ValidatorSlashEvent.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidatorSlashEvents);\n    message.validatorSlashEvents = [];\n    if (object.validatorSlashEvents !== undefined && object.validatorSlashEvents !== null) {\n      for (const e of object.validatorSlashEvents) {\n        message.validatorSlashEvents.push(exports.ValidatorSlashEvent.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.validatorSlashEvents) {\n      obj.validatorSlashEvents = message.validatorSlashEvents.map(e => e ? exports.ValidatorSlashEvent.toJSON(e) : undefined);\n    } else {\n      obj.validatorSlashEvents = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidatorSlashEvents);\n    message.validatorSlashEvents = [];\n    if (object.validatorSlashEvents !== undefined && object.validatorSlashEvents !== null) {\n      for (const e of object.validatorSlashEvents) {\n        message.validatorSlashEvents.push(exports.ValidatorSlashEvent.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseFeePool = {};\nexports.FeePool = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.communityPool) {\n      coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseFeePool);\n    message.communityPool = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.communityPool.push(coin_1.DecCoin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseFeePool);\n    message.communityPool = [];\n    if (object.communityPool !== undefined && object.communityPool !== null) {\n      for (const e of object.communityPool) {\n        message.communityPool.push(coin_1.DecCoin.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.communityPool) {\n      obj.communityPool = message.communityPool.map(e => e ? coin_1.DecCoin.toJSON(e) : undefined);\n    } else {\n      obj.communityPool = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseFeePool);\n    message.communityPool = [];\n    if (object.communityPool !== undefined && object.communityPool !== null) {\n      for (const e of object.communityPool) {\n        message.communityPool.push(coin_1.DecCoin.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseCommunityPoolSpendProposal = {\n  title: \"\",\n  description: \"\",\n  recipient: \"\"\n};\nexports.CommunityPoolSpendProposal = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.title !== \"\") {\n      writer.uint32(10).string(message.title);\n    }\n    if (message.description !== \"\") {\n      writer.uint32(18).string(message.description);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(26).string(message.recipient);\n    }\n    for (const v of message.amount) {\n      coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCommunityPoolSpendProposal);\n    message.amount = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.title = reader.string();\n          break;\n        case 2:\n          message.description = reader.string();\n          break;\n        case 3:\n          message.recipient = reader.string();\n          break;\n        case 4:\n          message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCommunityPoolSpendProposal);\n    message.amount = [];\n    if (object.title !== undefined && object.title !== null) {\n      message.title = String(object.title);\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = String(object.description);\n    } else {\n      message.description = \"\";\n    }\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = String(object.recipient);\n    } else {\n      message.recipient = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.title !== undefined && (obj.title = message.title);\n    message.description !== undefined && (obj.description = message.description);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    if (message.amount) {\n      obj.amount = message.amount.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.amount = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCommunityPoolSpendProposal);\n    message.amount = [];\n    if (object.title !== undefined && object.title !== null) {\n      message.title = object.title;\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = object.description;\n    } else {\n      message.description = \"\";\n    }\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = object.recipient;\n    } else {\n      message.recipient = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseDelegatorStartingInfo = {\n  previousPeriod: long_1.default.UZERO,\n  stake: \"\",\n  height: long_1.default.UZERO\n};\nexports.DelegatorStartingInfo = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.previousPeriod.isZero()) {\n      writer.uint32(8).uint64(message.previousPeriod);\n    }\n    if (message.stake !== \"\") {\n      writer.uint32(18).string(message.stake);\n    }\n    if (!message.height.isZero()) {\n      writer.uint32(24).uint64(message.height);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseDelegatorStartingInfo);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.previousPeriod = reader.uint64();\n          break;\n        case 2:\n          message.stake = reader.string();\n          break;\n        case 3:\n          message.height = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseDelegatorStartingInfo);\n    if (object.previousPeriod !== undefined && object.previousPeriod !== null) {\n      message.previousPeriod = long_1.default.fromString(object.previousPeriod);\n    } else {\n      message.previousPeriod = long_1.default.UZERO;\n    }\n    if (object.stake !== undefined && object.stake !== null) {\n      message.stake = String(object.stake);\n    } else {\n      message.stake = \"\";\n    }\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.previousPeriod !== undefined && (obj.previousPeriod = (message.previousPeriod || long_1.default.UZERO).toString());\n    message.stake !== undefined && (obj.stake = message.stake);\n    message.height !== undefined && (obj.height = (message.height || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseDelegatorStartingInfo);\n    if (object.previousPeriod !== undefined && object.previousPeriod !== null) {\n      message.previousPeriod = object.previousPeriod;\n    } else {\n      message.previousPeriod = long_1.default.UZERO;\n    }\n    if (object.stake !== undefined && object.stake !== null) {\n      message.stake = object.stake;\n    } else {\n      message.stake = \"\";\n    }\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst baseDelegationDelegatorReward = {\n  validatorAddress: \"\"\n};\nexports.DelegationDelegatorReward = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(10).string(message.validatorAddress);\n    }\n    for (const v of message.reward) {\n      coin_1.DecCoin.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseDelegationDelegatorReward);\n    message.reward = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.validatorAddress = reader.string();\n          break;\n        case 2:\n          message.reward.push(coin_1.DecCoin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseDelegationDelegatorReward);\n    message.reward = [];\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = String(object.validatorAddress);\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.reward !== undefined && object.reward !== null) {\n      for (const e of object.reward) {\n        message.reward.push(coin_1.DecCoin.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);\n    if (message.reward) {\n      obj.reward = message.reward.map(e => e ? coin_1.DecCoin.toJSON(e) : undefined);\n    } else {\n      obj.reward = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseDelegationDelegatorReward);\n    message.reward = [];\n    if (object.validatorAddress !== undefined && object.validatorAddress !== null) {\n      message.validatorAddress = object.validatorAddress;\n    } else {\n      message.validatorAddress = \"\";\n    }\n    if (object.reward !== undefined && object.reward !== null) {\n      for (const e of object.reward) {\n        message.reward.push(coin_1.DecCoin.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseCommunityPoolSpendProposalWithDeposit = {\n  title: \"\",\n  description: \"\",\n  recipient: \"\",\n  amount: \"\",\n  deposit: \"\"\n};\nexports.CommunityPoolSpendProposalWithDeposit = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.title !== \"\") {\n      writer.uint32(10).string(message.title);\n    }\n    if (message.description !== \"\") {\n      writer.uint32(18).string(message.description);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(26).string(message.recipient);\n    }\n    if (message.amount !== \"\") {\n      writer.uint32(34).string(message.amount);\n    }\n    if (message.deposit !== \"\") {\n      writer.uint32(42).string(message.deposit);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCommunityPoolSpendProposalWithDeposit);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.title = reader.string();\n          break;\n        case 2:\n          message.description = reader.string();\n          break;\n        case 3:\n          message.recipient = reader.string();\n          break;\n        case 4:\n          message.amount = reader.string();\n          break;\n        case 5:\n          message.deposit = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCommunityPoolSpendProposalWithDeposit);\n    if (object.title !== undefined && object.title !== null) {\n      message.title = String(object.title);\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = String(object.description);\n    } else {\n      message.description = \"\";\n    }\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = String(object.recipient);\n    } else {\n      message.recipient = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = String(object.amount);\n    } else {\n      message.amount = \"\";\n    }\n    if (object.deposit !== undefined && object.deposit !== null) {\n      message.deposit = String(object.deposit);\n    } else {\n      message.deposit = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.title !== undefined && (obj.title = message.title);\n    message.description !== undefined && (obj.description = message.description);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.amount !== undefined && (obj.amount = message.amount);\n    message.deposit !== undefined && (obj.deposit = message.deposit);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCommunityPoolSpendProposalWithDeposit);\n    if (object.title !== undefined && object.title !== null) {\n      message.title = object.title;\n    } else {\n      message.title = \"\";\n    }\n    if (object.description !== undefined && object.description !== null) {\n      message.description = object.description;\n    } else {\n      message.description = \"\";\n    }\n    if (object.recipient !== undefined && object.recipient !== null) {\n      message.recipient = object.recipient;\n    } else {\n      message.recipient = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = object.amount;\n    } else {\n      message.amount = \"\";\n    }\n    if (object.deposit !== undefined && object.deposit !== null) {\n      message.deposit = object.deposit;\n    } else {\n      message.deposit = \"\";\n    }\n    return message;\n  }\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=distribution.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}