{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SoftwareUpgradeProposal = void 0;\nvar json_1 = require(\"../../../util/json\");\nvar any_1 = require(\"@terra-money/legacy.proto/google/protobuf/any\");\nvar upgrade_1 = require(\"@terra-money/legacy.proto/cosmos/upgrade/v1beta1/upgrade\");\nvar Plan_1 = require(\"../Plan\");\n/**\n * Softwareupgradeproposal is a gov Content type for initiating a software upgrade.\n */\nvar SoftwareUpgradeProposal = /** @class */function (_super) {\n  __extends(SoftwareUpgradeProposal, _super);\n  /**\n   *\n   * @param title\n   * @param description\n   * @param plan\n   */\n  function SoftwareUpgradeProposal(title, description, plan) {\n    var _this = _super.call(this) || this;\n    _this.title = title;\n    _this.description = description;\n    _this.plan = plan;\n    return _this;\n  }\n  SoftwareUpgradeProposal.fromAmino = function (data, _) {\n    _;\n    var _a = data.value,\n      title = _a.title,\n      description = _a.description,\n      plan = _a.plan;\n    return new SoftwareUpgradeProposal(title, description, plan ? Plan_1.Plan.fromAmino(plan) : undefined);\n  };\n  SoftwareUpgradeProposal.prototype.toAmino = function (isClassic) {\n    var _a = this,\n      title = _a.title,\n      description = _a.description,\n      plan = _a.plan;\n    return {\n      type: isClassic ? 'upgrade/SoftwareUpgradeProposal' : 'cosmos-sdk/SoftwareUpgradeProposal',\n      value: {\n        title: title,\n        description: description,\n        plan: plan ? plan.toAmino() : undefined\n      }\n    };\n  };\n  SoftwareUpgradeProposal.fromData = function (data, _) {\n    _;\n    var title = data.title,\n      description = data.description,\n      plan = data.plan;\n    return new SoftwareUpgradeProposal(title, description, plan ? Plan_1.Plan.fromData(plan) : undefined);\n  };\n  SoftwareUpgradeProposal.prototype.toData = function (_) {\n    _;\n    var _a = this,\n      title = _a.title,\n      description = _a.description,\n      plan = _a.plan;\n    return {\n      '@type': '/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal',\n      title: title,\n      description: description,\n      plan: plan ? plan.toData() : undefined\n    };\n  };\n  SoftwareUpgradeProposal.fromProto = function (proto, _) {\n    _;\n    return new SoftwareUpgradeProposal(proto.title, proto.description, proto.plan ? Plan_1.Plan.fromProto(proto.plan) : undefined);\n  };\n  SoftwareUpgradeProposal.prototype.toProto = function (_) {\n    _;\n    var _a = this,\n      title = _a.title,\n      description = _a.description,\n      plan = _a.plan;\n    return upgrade_1.SoftwareUpgradeProposal.fromPartial({\n      title: title,\n      description: description,\n      plan: plan ? plan.toProto() : undefined\n    });\n  };\n  SoftwareUpgradeProposal.prototype.packAny = function (isClassic) {\n    return any_1.Any.fromPartial({\n      typeUrl: '/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal',\n      value: upgrade_1.SoftwareUpgradeProposal.encode(this.toProto(isClassic)).finish()\n    });\n  };\n  SoftwareUpgradeProposal.unpackAny = function (msgAny, isClassic) {\n    return SoftwareUpgradeProposal.fromProto(upgrade_1.SoftwareUpgradeProposal.decode(msgAny.value), isClassic);\n  };\n  return SoftwareUpgradeProposal;\n}(json_1.JSONSerializable);\nexports.SoftwareUpgradeProposal = SoftwareUpgradeProposal;\n//# sourceMappingURL=SoftwareUpgradeProposal.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}