{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgDelegateFeedConsent = void 0;\nvar json_1 = require(\"../../../util/json\");\nvar any_1 = require(\"@terra-money/terra.proto/google/protobuf/any\");\nvar tx_1 = require(\"@terra-money/legacy.proto/terra/oracle/v1beta1/tx\");\n/**\n * A **feeeder** is an account which is responsible for signing transactions with Oracle vote\n * and prevote messages on behalf of the validator. The blockchain will reject\n * [[MsgExchangeRateVote]] and [[MsgExchangeRatePrevote]] messages in transactions\n * signed by an\n * account different than the registered feeder.\n *\n * The following message registers a validator's feeder address.\n */\nvar MsgDelegateFeedConsent = /** @class */function (_super) {\n  __extends(MsgDelegateFeedConsent, _super);\n  /**\n   * @param operator validator's operator address\n   * @param delegate account address to set to feeder\n   */\n  function MsgDelegateFeedConsent(operator, delegate) {\n    var _this = _super.call(this) || this;\n    _this.operator = operator;\n    _this.delegate = delegate;\n    return _this;\n  }\n  MsgDelegateFeedConsent.fromAmino = function (data, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = data.value,\n      operator = _a.operator,\n      delegate = _a.delegate;\n    return new MsgDelegateFeedConsent(operator, delegate);\n  };\n  MsgDelegateFeedConsent.prototype.toAmino = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      operator = _a.operator,\n      delegate = _a.delegate;\n    return {\n      type: 'oracle/MsgDelegateFeedConsent',\n      value: {\n        operator: operator,\n        delegate: delegate\n      }\n    };\n  };\n  MsgDelegateFeedConsent.fromData = function (data, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var operator = data.operator,\n      delegate = data.delegate;\n    return new MsgDelegateFeedConsent(operator, delegate);\n  };\n  MsgDelegateFeedConsent.prototype.toData = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      operator = _a.operator,\n      delegate = _a.delegate;\n    return {\n      '@type': '/terra.oracle.v1beta1.MsgDelegateFeedConsent',\n      operator: operator,\n      delegate: delegate\n    };\n  };\n  MsgDelegateFeedConsent.fromProto = function (proto, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return new MsgDelegateFeedConsent(proto.operator, proto.delegate);\n  };\n  MsgDelegateFeedConsent.prototype.toProto = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      operator = _a.operator,\n      delegate = _a.delegate;\n    return tx_1.MsgDelegateFeedConsent.fromPartial({\n      delegate: delegate,\n      operator: operator\n    });\n  };\n  MsgDelegateFeedConsent.prototype.packAny = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return any_1.Any.fromPartial({\n      typeUrl: '/terra.oracle.v1beta1.MsgDelegateFeedConsent',\n      value: tx_1.MsgDelegateFeedConsent.encode(this.toProto(isClassic)).finish()\n    });\n  };\n  MsgDelegateFeedConsent.unpackAny = function (msgAny, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return MsgDelegateFeedConsent.fromProto(tx_1.MsgDelegateFeedConsent.decode(msgAny.value), isClassic);\n  };\n  return MsgDelegateFeedConsent;\n}(json_1.JSONSerializable);\nexports.MsgDelegateFeedConsent = MsgDelegateFeedConsent;\n//# sourceMappingURL=MsgDelegateFeedConsent.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}