{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxAPI = exports.SimulateResponse = exports.isTxError = void 0;\nvar BaseAPI_1 = require(\"./BaseAPI\");\nvar core_1 = require(\"../../../core\");\nvar hash_1 = require(\"../../../util/hash\");\nvar core_2 = require(\"../../../core\");\nfunction isTxError(x) {\n  return x.code !== undefined && x.code !== 0 && x.code !== '0';\n}\nexports.isTxError = isTxError;\nvar SimulateResponse = /** @class */function () {\n  function SimulateResponse(gas_info, result) {\n    this.gas_info = gas_info;\n    this.result = result;\n  }\n  SimulateResponse.fromData = function (data) {\n    return new SimulateResponse({\n      gas_wanted: Number.parseInt(data.gas_info.gas_wanted),\n      gas_used: Number.parseInt(data.gas_info.gas_used)\n    }, data.result);\n  };\n  return SimulateResponse;\n}();\nexports.SimulateResponse = SimulateResponse;\nvar TxAPI = /** @class */function (_super) {\n  __extends(TxAPI, _super);\n  function TxAPI(lcd) {\n    var _this = _super.call(this, lcd.apiRequester) || this;\n    _this.lcd = lcd;\n    return _this;\n  }\n  /**\n   * Looks up a transaction on the blockchain, addressed by its hash\n   * @param txHash transaction's hash\n   */\n  TxAPI.prototype.txInfo = function (txHash, params) {\n    if (params === void 0) {\n      params = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.c.getRaw(\"/cosmos/tx/v1beta1/txs/\".concat(txHash), params).then(function (v) {\n          return core_1.TxInfo.fromData(v.tx_response, _this.lcd.config.isClassic);\n        })];\n      });\n    });\n  };\n  /**\n   * Builds a [[StdSignMsg]] that is ready to be signed by a [[Key]]. The appropriate\n   * account number and sequence will be fetched live from the blockchain and added to\n   * the resultant [[StdSignMsg]]. If no fee is provided, fee will be automatically\n   * estimated using the parameters, simulated using a \"dummy fee\" with sourceAddress's\n   * nonzero denominations in its balance.\n   *\n   * @param sourceAddress account address of signer\n   * @param options TX generation options\n   */\n  TxAPI.prototype.create = function (signers, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fee, msgs, memo, timeoutHeight, signerDatas, _i, signers_1, signer, sequenceNumber, publicKey, account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fee = options.fee;\n            msgs = options.msgs, memo = options.memo, timeoutHeight = options.timeoutHeight;\n            signerDatas = [];\n            _i = 0, signers_1 = signers;\n            _a.label = 1;\n          case 1:\n            if (!(_i < signers_1.length)) return [3 /*break*/, 5];\n            signer = signers_1[_i];\n            sequenceNumber = signer.sequenceNumber;\n            publicKey = signer.publicKey;\n            if (!(sequenceNumber === undefined || !publicKey)) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.lcd.auth.accountInfo(signer.address)];\n          case 2:\n            account = _a.sent();\n            if (sequenceNumber === undefined) {\n              sequenceNumber = account.getSequenceNumber();\n            }\n            if (!publicKey) {\n              publicKey = account.getPublicKey();\n            }\n            _a.label = 3;\n          case 3:\n            signerDatas.push({\n              sequenceNumber: sequenceNumber,\n              publicKey: publicKey\n            });\n            _a.label = 4;\n          case 4:\n            _i++;\n            return [3 /*break*/, 1];\n          case 5:\n            if (!(fee === undefined)) return [3 /*break*/, 7];\n            return [4 /*yield*/, this.lcd.tx.estimateFee(signerDatas, options)];\n          case 6:\n            fee = _a.sent();\n            _a.label = 7;\n          case 7:\n            return [2 /*return*/, new core_1.Tx(new core_1.TxBody(msgs, memo || '', timeoutHeight || 0), new core_1.AuthInfo([], fee), [])];\n        }\n      });\n    });\n  };\n  /**\n   * Looks up transactions on the blockchain for the block height. If height is undefined,\n   * gets the transactions for the latest block.\n   * @param height block height\n   */\n  TxAPI.prototype.txInfosByHeight = function (height) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockInfo, txs, txhashes, txInfos, _i, txhashes_1, txhash, _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.lcd.tendermint.blockInfo(height)];\n          case 1:\n            blockInfo = _c.sent();\n            txs = blockInfo.block.data.txs;\n            if (!!txs) return [3 /*break*/, 2];\n            return [2 /*return*/, []];\n          case 2:\n            txhashes = txs.map(function (txdata) {\n              return (0, hash_1.hashToHex)(txdata);\n            });\n            txInfos = [];\n            _i = 0, txhashes_1 = txhashes;\n            _c.label = 3;\n          case 3:\n            if (!(_i < txhashes_1.length)) return [3 /*break*/, 6];\n            txhash = txhashes_1[_i];\n            _b = (_a = txInfos).push;\n            return [4 /*yield*/, this.txInfo(txhash)];\n          case 4:\n            _b.apply(_a, [_c.sent()]);\n            _c.label = 5;\n          case 5:\n            _i++;\n            return [3 /*break*/, 3];\n          case 6:\n            return [2 /*return*/, txInfos];\n        }\n      });\n    });\n  };\n  /**\n   * Estimates the transaction's fee by simulating it within the node\n   * @param sourceAddress address that will pay the bill\n   * @param msgs standard messages\n   * @param options options for fee estimation\n   */\n  TxAPI.prototype.estimateFee = function (signers, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var gasPrices, gasAdjustment, feeDenoms, gas, gasPricesCoins, gasPricesCoinsFiltered, txBody, authInfo, tx, feeAmount;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            gasPrices = options.gasPrices || this.lcd.config.gasPrices;\n            gasAdjustment = options.gasAdjustment || this.lcd.config.gasAdjustment;\n            feeDenoms = options.feeDenoms || [this.lcd.config.isClassic ? 'uusd' : 'uluna'];\n            gas = options.gas;\n            if (gasPrices) {\n              gasPricesCoins = new core_1.Coins(gasPrices);\n              if (feeDenoms) {\n                gasPricesCoinsFiltered = gasPricesCoins.filter(function (c) {\n                  return feeDenoms.includes(c.denom);\n                });\n                if (gasPricesCoinsFiltered.toArray().length > 0) {\n                  gasPricesCoins = gasPricesCoinsFiltered;\n                }\n              }\n            }\n            txBody = new core_1.TxBody(options.msgs, options.memo || '');\n            authInfo = new core_1.AuthInfo([], new core_1.Fee(0, new core_1.Coins()));\n            tx = new core_1.Tx(txBody, authInfo, []);\n            // fill empty signature\n            tx.appendEmptySignatures(signers);\n            if (!(!gas || gas === 'auto' || gas === '0')) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.estimateGas(tx, {\n              gasAdjustment: gasAdjustment\n            })];\n          case 1:\n            gas = _a.sent().toString();\n            _a.label = 2;\n          case 2:\n            feeAmount = gasPricesCoins ? gasPricesCoins.mul(gas).toIntCeilCoins() : this.lcd.config.isClassic ? '0uusd' : '0uluna';\n            return [2 /*return*/, new core_1.Fee(Number.parseInt(gas), feeAmount, '', '')];\n        }\n      });\n    });\n  };\n  TxAPI.prototype.estimateGas = function (tx, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var gasAdjustment, simTx, authInfo, simulateRes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            gasAdjustment = (options === null || options === void 0 ? void 0 : options.gasAdjustment) || this.lcd.config.gasAdjustment;\n            simTx = tx;\n            if (tx.signatures.length <= 0) {\n              if (!(options && options.signers && options.signers.length > 0)) {\n                throw Error('cannot append signature');\n              }\n              authInfo = new core_1.AuthInfo([], new core_1.Fee(0, new core_1.Coins()));\n              simTx = new core_1.Tx(tx.body, authInfo, []);\n              simTx.appendEmptySignatures(options.signers);\n            }\n            return [4 /*yield*/, this.c.post(\"/cosmos/tx/v1beta1/simulate\", {\n              tx_bytes: this.encode(simTx)\n            }).then(function (d) {\n              return SimulateResponse.fromData(d);\n            })];\n          case 1:\n            simulateRes = _a.sent();\n            return [2 /*return*/, new core_1.Dec(gasAdjustment).mul(simulateRes.gas_info.gas_used).toNumber()];\n        }\n      });\n    });\n  };\n  TxAPI.prototype.computeTax = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Tax was removed from network');\n      });\n    });\n  };\n  /**\n   * Encode a transaction to base64-encoded protobuf\n   * @param tx transaction to encode\n   */\n  TxAPI.prototype.encode = function (tx) {\n    return Buffer.from(tx.toBytes(this.lcd.config.isClassic)).toString('base64');\n  };\n  /**\n   * Decode a transaction from base64-encoded protobuf\n   * @param tx transaction string to decode\n   */\n  TxAPI.prototype.decode = function (encodedTx) {\n    return core_1.Tx.fromBuffer(Buffer.from(encodedTx, 'base64'), this.lcd.config.isClassic);\n  };\n  /**\n   * Get the transaction's hash\n   * @param tx transaction to hash\n   */\n  TxAPI.prototype.hash = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var txBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.encode(tx)];\n          case 1:\n            txBytes = _a.sent();\n            return [2 /*return*/, (0, hash_1.hashToHex)(txBytes)];\n        }\n      });\n    });\n  };\n  TxAPI.prototype._broadcast = function (tx, mode) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.c.post(\"/cosmos/tx/v1beta1/txs\", {\n              tx_bytes: this.encode(tx),\n              mode: mode\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Broadcast the transaction using \"sync\" mode, then wait for its inclusion in a block.\n   *\n   * This method polls txInfo using the txHash to confirm the transaction's execution.\n   *\n   * @param tx      transaction to broadcast\n   * @param timeout time in milliseconds to wait for transaction to be included in a block. defaults to 30000\n   */\n  TxAPI.prototype.broadcast = function (tx, timeout) {\n    if (timeout === void 0) {\n      timeout = 30000;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var POLL_INTERVAL, txResponse, result, txInfo, i, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            POLL_INTERVAL = 500;\n            return [4 /*yield*/, this._broadcast(tx, 'BROADCAST_MODE_SYNC')];\n          case 1:\n            txResponse = _a.sent().tx_response;\n            if (txResponse.code != undefined && txResponse.code != 0) {\n              result = {\n                height: Number.parseInt(txResponse.height),\n                txhash: txResponse.txhash,\n                raw_log: txResponse.raw_log,\n                code: txResponse.code,\n                codespace: txResponse.codespace,\n                gas_used: 0,\n                gas_wanted: 0,\n                timestamp: '',\n                logs: []\n              };\n              return [2 /*return*/, result];\n            }\n            i = 0;\n            _a.label = 2;\n          case 2:\n            if (!(i <= timeout / POLL_INTERVAL)) return [3 /*break*/, 9];\n            _a.label = 3;\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n            return [4 /*yield*/, this.txInfo(txResponse.txhash)];\n          case 4:\n            txInfo = _a.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            error_1 = _a.sent();\n            return [3 /*break*/, 6];\n          case 6:\n            if (txInfo) {\n              return [3 /*break*/, 9];\n            }\n            return [4 /*yield*/, new Promise(function (resolve) {\n              return setTimeout(resolve, POLL_INTERVAL);\n            })];\n          case 7:\n            _a.sent();\n            _a.label = 8;\n          case 8:\n            i++;\n            return [3 /*break*/, 2];\n          case 9:\n            if (!txInfo) {\n              throw new Error(\"Transaction was not included in a block before timeout of \".concat(timeout, \"ms\"));\n            }\n            return [2 /*return*/, {\n              txhash: txInfo.txhash,\n              raw_log: txInfo.raw_log,\n              gas_wanted: txInfo.gas_wanted,\n              gas_used: txInfo.gas_used,\n              height: +txInfo.height,\n              logs: (txInfo.logs || []).map(function (l) {\n                return core_2.TxLog.fromData(l);\n              }),\n              code: txInfo.code,\n              codespace: txInfo.codespace,\n              timestamp: txInfo.timestamp\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Broadcast the transaction using the \"block\" mode, waiting for its inclusion in the blockchain.\n   * @param tx transaction to broadcast\n   */\n  TxAPI.prototype.broadcastBlock = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this._broadcast(tx, 'BROADCAST_MODE_BLOCK').then(function (_a) {\n          var d = _a.tx_response;\n          var blockResult = {\n            txhash: d.txhash,\n            raw_log: d.raw_log,\n            gas_wanted: Number.parseInt(d.gas_wanted),\n            gas_used: Number.parseInt(d.gas_used),\n            height: +d.height,\n            logs: d.logs.map(function (l) {\n              return core_2.TxLog.fromData(l);\n            }),\n            code: d.code,\n            codespace: d.codespace,\n            data: d.data,\n            info: d.info,\n            timestamp: d.timestamp\n          };\n          return blockResult;\n        })];\n      });\n    });\n  };\n  /**\n   * NOTE: This is not a synchronous function and is unconventionally named. This function\n   * can be await as it returns a `Promise`.\n   *\n   * Broadcast the transaction using the \"sync\" mode, returning after CheckTx() is performed.\n   * @param tx transaction to broadcast\n   */\n  TxAPI.prototype.broadcastSync = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this._broadcast(tx, 'BROADCAST_MODE_SYNC').then(function (_a) {\n          var d = _a.tx_response;\n          var blockResult = {\n            height: +d.height,\n            txhash: d.txhash,\n            raw_log: d.raw_log\n          };\n          if (d.code) {\n            blockResult.code = d.code;\n          }\n          if (d.codespace) {\n            blockResult.codespace = d.codespace;\n          }\n          return blockResult;\n        })];\n      });\n    });\n  };\n  /**\n   * Broadcast the transaction using the \"async\" mode, returns immediately (transaction might fail).\n   * @param tx transaction to broadcast\n   */\n  TxAPI.prototype.broadcastAsync = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this._broadcast(tx, 'BROADCAST_MODE_ASYNC').then(function (_a) {\n          var d = _a.tx_response;\n          return {\n            height: +d.height,\n            txhash: d.txhash\n          };\n        })];\n      });\n    });\n  };\n  /**\n   * Search for transactions based on event attributes.\n   * @param options\n   */\n  TxAPI.prototype.search = function (options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      var _this = this;\n      return __generator(this, function (_b) {\n        params = new URLSearchParams();\n        // build search params\n        (_a = options.events) === null || _a === void 0 ? void 0 : _a.forEach(function (v) {\n          return params.append('events', v.key === 'tx.height' ? \"\".concat(v.key, \"=\").concat(v.value) : \"\".concat(v.key, \"='\").concat(v.value, \"'\"));\n        });\n        delete options['events'];\n        Object.entries(options).forEach(function (v) {\n          params.append(v[0], v[1]);\n        });\n        return [2 /*return*/, this.c.getRaw(\"/cosmos/tx/v1beta1/txs\", params).then(function (d) {\n          return {\n            txs: d.tx_responses.map(function (tx_response) {\n              return core_1.TxInfo.fromData(tx_response, _this.lcd.config.isClassic);\n            }),\n            pagination: d.pagination\n          };\n        })];\n      });\n    });\n  };\n  return TxAPI;\n}(BaseAPI_1.BaseAPI);\nexports.TxAPI = TxAPI;\n//# sourceMappingURL=TxAPI.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}