{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebSocketClient = void 0;\nvar events_1 = require(\"events\");\nvar ws_1 = __importDefault(require(\"ws\"));\nvar hash_1 = require(\"../util/hash\");\nvar escapeSingleQuotes = function (str) {\n  return str.replace(/'/g, \"\\\\'\");\n};\nfunction makeQueryParams(query) {\n  var queryBuilder = [];\n  for (var _i = 0, _a = Object.keys(query); _i < _a.length; _i++) {\n    var key = _a[_i];\n    var queryItem = void 0;\n    var value = query[key];\n    // if value is scalar\n    if (!Array.isArray(value)) {\n      switch (typeof value) {\n        case 'number':\n          queryItem = \"\".concat(key, \"=\").concat(value);\n          break;\n        case 'string':\n          queryItem = \"\".concat(key, \"='\").concat(escapeSingleQuotes(value), \"'\");\n          break;\n        default:\n          // Date\n          queryItem = \"\".concat(key, \"=\").concat(value.toISOString());\n      }\n    } else {\n      switch (value[0]) {\n        case '>':\n        case '<':\n        case '<=':\n        case '>=':\n          if (typeof value[1] !== 'number') {\n            queryItem = \"\".concat(key).concat(value[0]).concat(value[1].toISOString());\n          } else {\n            queryItem = \"\".concat(key).concat(value[0]).concat(value[1]);\n          }\n          break;\n        case 'CONTAINS':\n          queryItem = \"\".concat(key, \" CONTAINS '\").concat(escapeSingleQuotes(value[1]), \"'\");\n          break;\n        case 'EXISTS':\n          queryItem = \"\".concat(key, \" EXISTS\");\n          break;\n      }\n    }\n    queryBuilder.push(queryItem);\n  }\n  return queryBuilder.join(' AND ');\n}\n/**\n * An object repesenting a connection to a Terra node's WebSocket RPC endpoint.\n * This allows for subscribing to Tendermint events through WebSocket.\n *\n * ### Events\n * **error** emitted when error raises\n * **connect** emitted after connection establishment\n * **reconnect** emitted upon every attempt of reconnection\n * **destroyed** emitted when socket has been destroyed\n *\n * ### Example\n *\n * ```ts\n * import { WebSocketClient } from '@terra-money/terra.js';\n *\n * const wsclient = new WebSocketClient(\"ws://localhost:26657/websocket\");\n *\n * wsclient.subscribe('NewBlock', {}, (data) => {\n *    console.log(data.value);\n *\n *    // close after receiving one block.\n *    wsclient.destroy();\n * })\n *\n * wsclient.subscribe(\n * 'Tx',\n *  {\n *    'message.action': 'send',\n *    'message.sender': ['CONTAINS', 'terra1...'],\n *  },\n *  (data) => {\n *    console.log(data.value);\n *\n *   // close after receiving one send Tx\n *   wsclient.destroy();\n * });\n *\n * wsclient.start();\n * ```\n */\nvar WebSocketClient = /** @class */function (_super) {\n  __extends(WebSocketClient, _super);\n  /**\n   * WebSocketClient constructor\n   * @param URL The WebSocket endpoint URL on the Tendermint RPC server.\n   *            Ex: ws://localhost:26657/websocket\n   * @param reconnectCount 0 for not to attempt reconnect, -1 for infinite, > 0 for number of times to attempt\n   * @param reconnectInterval retry interval in milliseconds\n   */\n  function WebSocketClient(URL, reconnectCount, reconnectInterval) {\n    if (reconnectCount === void 0) {\n      reconnectCount = 0;\n    }\n    if (reconnectInterval === void 0) {\n      reconnectInterval = 1000;\n    }\n    var _this = _super.call(this) || this;\n    _this.URL = URL;\n    _this.reconnectCount = reconnectCount;\n    _this.reconnectInterval = reconnectInterval;\n    _this._reconnectCount = _this.reconnectCount;\n    _this.isConnected = false;\n    _this.shouldAttemptReconnect = !!_this.reconnectInterval;\n    return _this;\n  }\n  /**\n   * Destroys class as well as socket\n   */\n  WebSocketClient.prototype.destroy = function () {\n    this.shouldAttemptReconnect = false;\n    this.reconnectTimeoutId && clearTimeout(this.reconnectTimeoutId);\n    this.socket && this.socket.close();\n  };\n  WebSocketClient.prototype.start = function () {\n    this.socket = new ws_1.default(this.URL);\n    this.socket.onopen = this.onOpen.bind(this);\n    this.socket.onmessage = this.onMessage.bind(this);\n    this.socket.onclose = this.onClose.bind(this);\n    this.socket.onerror = function () {\n      return undefined;\n    };\n  };\n  WebSocketClient.prototype.onOpen = function () {\n    this.isConnected = true;\n    this.emit('connect');\n    // reset reconnectCount after connection establishment\n    this._reconnectCount = this.reconnectCount;\n    this.socket.send(JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'subscribe',\n      params: [this.queryParams],\n      id: 1\n    }));\n  };\n  WebSocketClient.prototype.onMessage = function (message) {\n    try {\n      var parsedData = JSON.parse(message.data.toString());\n      if (this.callback && parsedData.result && parsedData.result.query === this.queryParams) {\n        // this.emit('message', parsedData.result.data);\n        this.callback(parsedData.result.data);\n      }\n    } catch (err) {\n      this.emit('error', err);\n    }\n  };\n  WebSocketClient.prototype.onClose = function () {\n    var _this = this;\n    this.isConnected = false;\n    if (this.shouldAttemptReconnect && (this._reconnectCount > 0 || this._reconnectCount === -1)) {\n      if (this._reconnectCount !== -1) {\n        this._reconnectCount--;\n      }\n      this.reconnectTimeoutId && clearTimeout(this.reconnectTimeoutId);\n      this.reconnectTimeoutId = setTimeout(function () {\n        _this.emit('reconnect');\n        _this.start();\n      }, this.reconnectInterval);\n    } else {\n      this.emit('destroyed');\n    }\n  };\n  WebSocketClient.prototype.subscribe = function (event, query, callback) {\n    this.queryParams = makeQueryParams(__assign({\n      'tm.event': event\n    }, query));\n    this.callback = callback;\n  };\n  WebSocketClient.prototype.subscribeTx = function (query, callback) {\n    var newCallback = function (d) {\n      d.value.TxResult.txhash = (0, hash_1.hashToHex)(d.value.TxResult.tx);\n      return callback(d);\n    };\n    this.subscribe('Tx', query, newCallback);\n  };\n  return WebSocketClient;\n}(events_1.EventEmitter);\nexports.WebSocketClient = WebSocketClient;\n//# sourceMappingURL=WebSocketClient.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}