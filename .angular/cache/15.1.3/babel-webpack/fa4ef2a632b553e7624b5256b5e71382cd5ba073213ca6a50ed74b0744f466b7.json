{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GrpcWebImpl = exports.MsgRevokeDesc = exports.MsgExecDesc = exports.MsgGrantDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgRevokeResponse = exports.MsgRevoke = exports.MsgGrantResponse = exports.MsgExec = exports.MsgExecResponse = exports.MsgGrant = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst authz_1 = require(\"../../../cosmos/authz/v1beta1/authz\");\nconst browser_headers_1 = require(\"browser-headers\");\nconst any_1 = require(\"../../../google/protobuf/any\");\nexports.protobufPackage = \"cosmos.authz.v1beta1\";\nconst baseMsgGrant = {\n  granter: \"\",\n  grantee: \"\"\n};\nexports.MsgGrant = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.granter !== \"\") {\n      writer.uint32(10).string(message.granter);\n    }\n    if (message.grantee !== \"\") {\n      writer.uint32(18).string(message.grantee);\n    }\n    if (message.grant !== undefined) {\n      authz_1.Grant.encode(message.grant, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgGrant);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.granter = reader.string();\n          break;\n        case 2:\n          message.grantee = reader.string();\n          break;\n        case 3:\n          message.grant = authz_1.Grant.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgGrant);\n    if (object.granter !== undefined && object.granter !== null) {\n      message.granter = String(object.granter);\n    } else {\n      message.granter = \"\";\n    }\n    if (object.grantee !== undefined && object.grantee !== null) {\n      message.grantee = String(object.grantee);\n    } else {\n      message.grantee = \"\";\n    }\n    if (object.grant !== undefined && object.grant !== null) {\n      message.grant = authz_1.Grant.fromJSON(object.grant);\n    } else {\n      message.grant = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.granter !== undefined && (obj.granter = message.granter);\n    message.grantee !== undefined && (obj.grantee = message.grantee);\n    message.grant !== undefined && (obj.grant = message.grant ? authz_1.Grant.toJSON(message.grant) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgGrant);\n    if (object.granter !== undefined && object.granter !== null) {\n      message.granter = object.granter;\n    } else {\n      message.granter = \"\";\n    }\n    if (object.grantee !== undefined && object.grantee !== null) {\n      message.grantee = object.grantee;\n    } else {\n      message.grantee = \"\";\n    }\n    if (object.grant !== undefined && object.grant !== null) {\n      message.grant = authz_1.Grant.fromPartial(object.grant);\n    } else {\n      message.grant = undefined;\n    }\n    return message;\n  }\n};\nconst baseMsgExecResponse = {};\nexports.MsgExecResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.results) {\n      writer.uint32(10).bytes(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgExecResponse);\n    message.results = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.results.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgExecResponse);\n    message.results = [];\n    if (object.results !== undefined && object.results !== null) {\n      for (const e of object.results) {\n        message.results.push(bytesFromBase64(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.results) {\n      obj.results = message.results.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.results = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgExecResponse);\n    message.results = [];\n    if (object.results !== undefined && object.results !== null) {\n      for (const e of object.results) {\n        message.results.push(e);\n      }\n    }\n    return message;\n  }\n};\nconst baseMsgExec = {\n  grantee: \"\"\n};\nexports.MsgExec = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.grantee !== \"\") {\n      writer.uint32(10).string(message.grantee);\n    }\n    for (const v of message.msgs) {\n      any_1.Any.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgExec);\n    message.msgs = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.grantee = reader.string();\n          break;\n        case 2:\n          message.msgs.push(any_1.Any.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgExec);\n    message.msgs = [];\n    if (object.grantee !== undefined && object.grantee !== null) {\n      message.grantee = String(object.grantee);\n    } else {\n      message.grantee = \"\";\n    }\n    if (object.msgs !== undefined && object.msgs !== null) {\n      for (const e of object.msgs) {\n        message.msgs.push(any_1.Any.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.grantee !== undefined && (obj.grantee = message.grantee);\n    if (message.msgs) {\n      obj.msgs = message.msgs.map(e => e ? any_1.Any.toJSON(e) : undefined);\n    } else {\n      obj.msgs = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgExec);\n    message.msgs = [];\n    if (object.grantee !== undefined && object.grantee !== null) {\n      message.grantee = object.grantee;\n    } else {\n      message.grantee = \"\";\n    }\n    if (object.msgs !== undefined && object.msgs !== null) {\n      for (const e of object.msgs) {\n        message.msgs.push(any_1.Any.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseMsgGrantResponse = {};\nexports.MsgGrantResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgGrantResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgGrantResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgGrantResponse);\n    return message;\n  }\n};\nconst baseMsgRevoke = {\n  granter: \"\",\n  grantee: \"\",\n  msgTypeUrl: \"\"\n};\nexports.MsgRevoke = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.granter !== \"\") {\n      writer.uint32(10).string(message.granter);\n    }\n    if (message.grantee !== \"\") {\n      writer.uint32(18).string(message.grantee);\n    }\n    if (message.msgTypeUrl !== \"\") {\n      writer.uint32(26).string(message.msgTypeUrl);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgRevoke);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.granter = reader.string();\n          break;\n        case 2:\n          message.grantee = reader.string();\n          break;\n        case 3:\n          message.msgTypeUrl = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgRevoke);\n    if (object.granter !== undefined && object.granter !== null) {\n      message.granter = String(object.granter);\n    } else {\n      message.granter = \"\";\n    }\n    if (object.grantee !== undefined && object.grantee !== null) {\n      message.grantee = String(object.grantee);\n    } else {\n      message.grantee = \"\";\n    }\n    if (object.msgTypeUrl !== undefined && object.msgTypeUrl !== null) {\n      message.msgTypeUrl = String(object.msgTypeUrl);\n    } else {\n      message.msgTypeUrl = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.granter !== undefined && (obj.granter = message.granter);\n    message.grantee !== undefined && (obj.grantee = message.grantee);\n    message.msgTypeUrl !== undefined && (obj.msgTypeUrl = message.msgTypeUrl);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgRevoke);\n    if (object.granter !== undefined && object.granter !== null) {\n      message.granter = object.granter;\n    } else {\n      message.granter = \"\";\n    }\n    if (object.grantee !== undefined && object.grantee !== null) {\n      message.grantee = object.grantee;\n    } else {\n      message.grantee = \"\";\n    }\n    if (object.msgTypeUrl !== undefined && object.msgTypeUrl !== null) {\n      message.msgTypeUrl = object.msgTypeUrl;\n    } else {\n      message.msgTypeUrl = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgRevokeResponse = {};\nexports.MsgRevokeResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgRevokeResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgRevokeResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgRevokeResponse);\n    return message;\n  }\n};\nclass MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.Grant = this.Grant.bind(this);\n    this.Exec = this.Exec.bind(this);\n    this.Revoke = this.Revoke.bind(this);\n  }\n  Grant(request, metadata) {\n    return this.rpc.unary(exports.MsgGrantDesc, exports.MsgGrant.fromPartial(request), metadata);\n  }\n  Exec(request, metadata) {\n    return this.rpc.unary(exports.MsgExecDesc, exports.MsgExec.fromPartial(request), metadata);\n  }\n  Revoke(request, metadata) {\n    return this.rpc.unary(exports.MsgRevokeDesc, exports.MsgRevoke.fromPartial(request), metadata);\n  }\n}\nexports.MsgClientImpl = MsgClientImpl;\nexports.MsgDesc = {\n  serviceName: \"cosmos.authz.v1beta1.Msg\"\n};\nexports.MsgGrantDesc = {\n  methodName: \"Grant\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgGrant.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgGrantResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgExecDesc = {\n  methodName: \"Exec\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgExec.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgExecResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgRevokeDesc = {\n  methodName: \"Revoke\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgRevoke.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgRevokeResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nclass GrpcWebImpl {\n  constructor(host, options) {\n    this.host = host;\n    this.options = options;\n  }\n  unary(methodDesc, _request, metadata) {\n    var _a;\n    const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);\n    const maybeCombinedMetadata = metadata && this.options.metadata ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap)) : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc_web_1.grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc_web_1.grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage);\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        }\n      });\n    });\n  }\n}\nexports.GrpcWebImpl = GrpcWebImpl;\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}