{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DenomTrace = void 0;\nvar transfer_1 = require(\"@terra-money/legacy.proto/ibc/applications/transfer/v1/transfer\");\nvar json_1 = require(\"../../../../../util/json\");\n/**\n * DenomTrace is a monotonically increasing data type\n * that can be compared against another DenomTrace for the purposes of updating and\n * freezing clients\n *\n * Normally the RevisionDenomTrace is incremented at each height while keeping\n * RevisionNumber the same. However some consensus algorithms may choose to\n * reset the height in certain conditions e.g. hard forks, state-machine\n * breaking changes In these cases, the RevisionNumber is incremented so that\n * height continues to be monitonically increasing even as the RevisionDenomTrace\n * gets reset\n */\nvar DenomTrace = /** @class */function (_super) {\n  __extends(DenomTrace, _super);\n  /**\n   * @param path the revision that the client is currently on\n   * @param base_denom the height within the given revision\n   */\n  function DenomTrace(path, base_denom) {\n    var _this = _super.call(this) || this;\n    _this.path = path;\n    _this.base_denom = base_denom;\n    return _this;\n  }\n  DenomTrace.fromAmino = function (data) {\n    var path = data.path,\n      base_denom = data.base_denom;\n    return new DenomTrace(path, base_denom);\n  };\n  DenomTrace.prototype.toAmino = function () {\n    var _a = this,\n      path = _a.path,\n      base_denom = _a.base_denom;\n    var res = {\n      path: path,\n      base_denom: base_denom\n    };\n    return res;\n  };\n  DenomTrace.fromData = function (data) {\n    var path = data.path,\n      base_denom = data.base_denom;\n    return new DenomTrace(path, base_denom);\n  };\n  DenomTrace.prototype.toData = function () {\n    var _a = this,\n      path = _a.path,\n      base_denom = _a.base_denom;\n    var res = {\n      path: path,\n      base_denom: base_denom\n    };\n    return res;\n  };\n  DenomTrace.fromProto = function (proto) {\n    return new DenomTrace(proto.path, proto.baseDenom);\n  };\n  DenomTrace.prototype.toProto = function () {\n    var _a = this,\n      path = _a.path,\n      base_denom = _a.base_denom;\n    return transfer_1.DenomTrace.fromPartial({\n      path: path,\n      baseDenom: base_denom\n    });\n  };\n  return DenomTrace;\n}(json_1.JSONSerializable);\nexports.DenomTrace = DenomTrace;\n//# sourceMappingURL=DenomTrace.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}