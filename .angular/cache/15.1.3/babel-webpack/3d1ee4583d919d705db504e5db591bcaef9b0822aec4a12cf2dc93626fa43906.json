{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ModeInfo = exports.SignerInfo = exports.AuthInfo = exports.TxBody = exports.Tx = void 0;\nvar PublicKey_1 = require(\"./PublicKey\");\nvar signing_1 = require(\"@terra-money/terra.proto/cosmos/tx/signing/v1beta1/signing\");\nvar tx_1 = require(\"@terra-money/terra.proto/cosmos/tx/v1beta1/tx\");\nvar CompactBitArray_1 = require(\"./CompactBitArray\");\nvar Msg_1 = require(\"./Msg\");\nvar Fee_1 = require(\"./Fee\");\nvar Long = __importStar(require(\"long\"));\nvar SignatureV2_1 = require(\"./SignatureV2\");\nvar Tx = /** @class */function () {\n  function Tx(body, auth_info, signatures) {\n    this.body = body;\n    this.auth_info = auth_info;\n    this.signatures = signatures;\n  }\n  Tx.fromAmino = function (data, isClassic) {\n    var signatures = data.value.signatures.map(function (s) {\n      return SignatureV2_1.SignatureV2.fromAmino(s);\n    });\n    return new Tx(new TxBody(data.value.msg.map(function (m) {\n      return Msg_1.Msg.fromAmino(m, isClassic);\n    }), data.value.memo, Number.parseInt(data.value.timeout_height)), new AuthInfo([], Fee_1.Fee.fromAmino(data.value.fee)), signatures.map(function (s) {\n      var _a;\n      return ((_a = s.data.single) === null || _a === void 0 ? void 0 : _a.signature) || '';\n    }));\n  };\n  Tx.fromData = function (data, isClassic) {\n    return new Tx(TxBody.fromData(data.body, isClassic), AuthInfo.fromData(data.auth_info), data.signatures);\n  };\n  Tx.prototype.toData = function (isClassic) {\n    return {\n      body: this.body.toData(isClassic),\n      auth_info: this.auth_info.toData(),\n      signatures: this.signatures\n    };\n  };\n  Tx.unpackAny = function (anyProto, isClassic) {\n    return this.fromProto(tx_1.Tx.decode(anyProto.value), isClassic);\n  };\n  Tx.fromProto = function (proto, isClassic) {\n    return new Tx(TxBody.fromProto(proto.body, isClassic), AuthInfo.fromProto(proto.authInfo), proto.signatures.map(function (sig) {\n      return Buffer.from(sig).toString('base64');\n    }));\n  };\n  Tx.prototype.toProto = function (isClassic) {\n    return tx_1.Tx.fromPartial({\n      body: this.body.toProto(isClassic),\n      authInfo: this.auth_info.toProto(),\n      signatures: this.signatures.map(function (s) {\n        return Buffer.from(s, 'base64');\n      })\n    });\n  };\n  Tx.prototype.toBytes = function (isClassic) {\n    return tx_1.Tx.encode(this.toProto(isClassic)).finish();\n  };\n  Tx.fromBuffer = function (buf, isClassic) {\n    return Tx.fromProto(tx_1.Tx.decode(buf), isClassic);\n  };\n  Tx.prototype.appendEmptySignatures = function (signers) {\n    var _this = this;\n    signers.forEach(function (signer) {\n      var signerInfo;\n      if (signer.publicKey) {\n        if (signer.publicKey instanceof PublicKey_1.LegacyAminoMultisigPublicKey) {\n          signerInfo = new SignerInfo(signer.publicKey, signer.sequenceNumber, new ModeInfo(new ModeInfo.Multi(CompactBitArray_1.CompactBitArray.fromBits(signer.publicKey.pubkeys.length), [])));\n        } else {\n          signerInfo = new SignerInfo(signer.publicKey, signer.sequenceNumber, new ModeInfo(new ModeInfo.Single(ModeInfo.SignMode.SIGN_MODE_DIRECT)));\n        }\n      } else {\n        signerInfo = new SignerInfo(new PublicKey_1.SimplePublicKey(''), signer.sequenceNumber, new ModeInfo(new ModeInfo.Single(ModeInfo.SignMode.SIGN_MODE_DIRECT)));\n      }\n      _this.auth_info.signer_infos.push(signerInfo);\n      _this.signatures.push('');\n    });\n  };\n  Tx.prototype.clearSignatures = function () {\n    this.auth_info.signer_infos = [];\n    this.signatures = [];\n  };\n  Tx.prototype.appendSignatures = function (signatures) {\n    for (var _i = 0, signatures_1 = signatures; _i < signatures_1.length; _i++) {\n      var signature = signatures_1[_i];\n      var _a = signature.data.toModeInfoAndSignature(),\n        modeInfo = _a[0],\n        sigBytes = _a[1];\n      this.signatures.push(Buffer.from(sigBytes).toString('base64'));\n      this.auth_info.signer_infos.push(new SignerInfo(signature.public_key, signature.sequence, modeInfo));\n    }\n  };\n  return Tx;\n}();\nexports.Tx = Tx;\nvar TxBody = /** @class */function () {\n  function TxBody(messages, memo, timeout_height) {\n    this.messages = messages;\n    this.memo = memo;\n    this.timeout_height = timeout_height;\n  }\n  TxBody.fromData = function (data, isClassic) {\n    return new TxBody(data.messages.map(function (m) {\n      return Msg_1.Msg.fromData(m, isClassic);\n    }), data.memo, Number.parseInt(data.timeout_height));\n  };\n  TxBody.prototype.toData = function (isClassic) {\n    var _a, _b;\n    return {\n      memo: (_a = this.memo) !== null && _a !== void 0 ? _a : '',\n      messages: this.messages.map(function (m) {\n        return m.toData(isClassic);\n      }),\n      timeout_height: ((_b = this.timeout_height) !== null && _b !== void 0 ? _b : 0).toFixed()\n    };\n  };\n  TxBody.fromProto = function (proto, isClassic) {\n    return new TxBody(proto.messages.map(function (m) {\n      return Msg_1.Msg.fromProto(m, isClassic);\n    }), proto.memo, proto.timeoutHeight.toNumber());\n  };\n  TxBody.prototype.toProto = function (isClassic) {\n    var _a;\n    return tx_1.TxBody.fromPartial({\n      memo: this.memo,\n      messages: this.messages.map(function (m) {\n        return m.packAny(isClassic);\n      }),\n      timeoutHeight: Long.fromNumber((_a = this.timeout_height) !== null && _a !== void 0 ? _a : 0)\n    });\n  };\n  TxBody.prototype.toBytes = function (isClassic) {\n    return tx_1.TxBody.encode(this.toProto(isClassic)).finish();\n  };\n  return TxBody;\n}();\nexports.TxBody = TxBody;\nvar AuthInfo = /** @class */function () {\n  function AuthInfo(signer_infos, fee) {\n    this.signer_infos = signer_infos;\n    this.fee = fee;\n  }\n  AuthInfo.fromData = function (data) {\n    return new AuthInfo(data.signer_infos.map(function (s) {\n      return SignerInfo.fromData(s);\n    }), Fee_1.Fee.fromData(data.fee));\n  };\n  AuthInfo.prototype.toData = function () {\n    return {\n      fee: this.fee.toData(),\n      signer_infos: this.signer_infos.map(function (info) {\n        return info.toData();\n      })\n    };\n  };\n  AuthInfo.fromProto = function (proto) {\n    return new AuthInfo(proto.signerInfos.map(function (s) {\n      return SignerInfo.fromProto(s);\n    }), Fee_1.Fee.fromProto(proto.fee));\n  };\n  AuthInfo.prototype.toProto = function () {\n    return tx_1.AuthInfo.fromPartial({\n      fee: this.fee.toProto(),\n      signerInfos: this.signer_infos.map(function (info) {\n        return info.toProto();\n      })\n    });\n  };\n  AuthInfo.prototype.toBytes = function () {\n    return tx_1.AuthInfo.encode(this.toProto()).finish();\n  };\n  return AuthInfo;\n}();\nexports.AuthInfo = AuthInfo;\nvar SignerInfo = /** @class */function () {\n  function SignerInfo(public_key, sequence, mode_info) {\n    this.public_key = public_key;\n    this.sequence = sequence;\n    this.mode_info = mode_info;\n  }\n  SignerInfo.fromData = function (data) {\n    var _a;\n    return new SignerInfo(PublicKey_1.PublicKey.fromData((_a = data.public_key) !== null && _a !== void 0 ? _a : new PublicKey_1.SimplePublicKey('').toData()), Number.parseInt(data.sequence), ModeInfo.fromData(data.mode_info));\n  };\n  SignerInfo.prototype.toData = function () {\n    var _a = this,\n      public_key = _a.public_key,\n      sequence = _a.sequence,\n      mode_info = _a.mode_info;\n    return {\n      mode_info: mode_info.toData(),\n      public_key: (public_key === null || public_key === void 0 ? void 0 : public_key.toData()) || null,\n      sequence: sequence.toFixed()\n    };\n  };\n  SignerInfo.fromProto = function (proto) {\n    var _a;\n    return new SignerInfo(PublicKey_1.PublicKey.fromProto((_a = proto.publicKey) !== null && _a !== void 0 ? _a : new PublicKey_1.SimplePublicKey('').packAny()), proto.sequence.toNumber(), ModeInfo.fromProto(proto.modeInfo));\n  };\n  SignerInfo.prototype.toProto = function () {\n    var _a = this,\n      public_key = _a.public_key,\n      sequence = _a.sequence,\n      mode_info = _a.mode_info;\n    return tx_1.SignerInfo.fromPartial({\n      modeInfo: mode_info.toProto(),\n      publicKey: public_key === null || public_key === void 0 ? void 0 : public_key.packAny(),\n      sequence: Long.fromNumber(sequence)\n    });\n  };\n  return SignerInfo;\n}();\nexports.SignerInfo = SignerInfo;\nvar ModeInfo = /** @class */function () {\n  function ModeInfo(mode_info) {\n    if (mode_info instanceof ModeInfo.Single) {\n      this.single = mode_info;\n    } else {\n      this.multi = mode_info;\n    }\n  }\n  ModeInfo.fromData = function (data) {\n    if (data.single) {\n      return new ModeInfo(ModeInfo.Single.fromData(data.single));\n    }\n    if (data.multi) {\n      return new ModeInfo(ModeInfo.Multi.fromData(data.multi));\n    }\n    throw new Error('must be one of single or multi');\n  };\n  ModeInfo.prototype.toData = function () {\n    var _a, _b;\n    return {\n      single: (_a = this.single) === null || _a === void 0 ? void 0 : _a.toData(),\n      multi: (_b = this.multi) === null || _b === void 0 ? void 0 : _b.toData()\n    };\n  };\n  ModeInfo.fromProto = function (proto) {\n    var singleMode = proto.single;\n    var multiMode = proto.multi;\n    return new ModeInfo(singleMode ? ModeInfo.Single.fromProto(singleMode) : ModeInfo.Multi.fromProto(multiMode));\n  };\n  ModeInfo.prototype.toProto = function () {\n    var _a, _b;\n    return tx_1.ModeInfo.fromPartial({\n      multi: (_a = this.multi) === null || _a === void 0 ? void 0 : _a.toProto(),\n      single: (_b = this.single) === null || _b === void 0 ? void 0 : _b.toProto()\n    });\n  };\n  return ModeInfo;\n}();\nexports.ModeInfo = ModeInfo;\n(function (ModeInfo) {\n  ModeInfo.SignMode = signing_1.SignMode;\n  var Single = /** @class */function () {\n    function Single(mode) {\n      this.mode = mode;\n    }\n    Single.fromData = function (data) {\n      return new Single((0, signing_1.signModeFromJSON)(data.mode));\n    };\n    Single.prototype.toData = function () {\n      return {\n        mode: (0, signing_1.signModeToJSON)(this.mode)\n      };\n    };\n    Single.fromProto = function (proto) {\n      return new Single(proto.mode);\n    };\n    Single.prototype.toProto = function () {\n      return tx_1.ModeInfo_Single.fromPartial({\n        mode: this.mode\n      });\n    };\n    return Single;\n  }();\n  ModeInfo.Single = Single;\n  var Multi = /** @class */function () {\n    function Multi(bitarray, modeInfos) {\n      this.bitarray = bitarray;\n      this.modeInfos = modeInfos;\n    }\n    Multi.fromData = function (proto) {\n      return new Multi(CompactBitArray_1.CompactBitArray.fromData(proto.bitarray), proto.mode_infos.map(function (m) {\n        return ModeInfo.fromData(m);\n      }));\n    };\n    Multi.prototype.toData = function () {\n      return {\n        bitarray: this.bitarray.toData(),\n        mode_infos: this.modeInfos.map(function (m) {\n          return m.toData();\n        })\n      };\n    };\n    Multi.fromProto = function (proto) {\n      return new Multi(CompactBitArray_1.CompactBitArray.fromProto(proto.bitarray), proto.modeInfos.map(function (m) {\n        return ModeInfo.fromProto(m);\n      }));\n    };\n    Multi.prototype.toProto = function () {\n      return tx_1.ModeInfo_Multi.fromPartial({\n        bitarray: this.bitarray.toProto(),\n        modeInfos: this.modeInfos.map(function (m) {\n          return m.toProto();\n        })\n      });\n    };\n    return Multi;\n  }();\n  ModeInfo.Multi = Multi;\n})(ModeInfo = exports.ModeInfo || (exports.ModeInfo = {}));\nexports.ModeInfo = ModeInfo;\n//# sourceMappingURL=Tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}