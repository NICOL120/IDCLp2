{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Key = void 0;\nvar bech32_1 = require(\"bech32\");\nvar core_1 = require(\"../core\");\nvar SignatureV2_1 = require(\"../core/SignatureV2\");\nvar signing_1 = require(\"@terra-money/terra.proto/cosmos/tx/signing/v1beta1/signing\");\n/**\n * Abstract key interface that provides transaction signing features and Bech32 address\n * and public key derivation from a public key. This allows you to create custom key\n * solutions, such as for various hardware wallets, by implementing signing and calling\n * `super` with the raw public key from within your subclass. See [[MnemonicKey]] for\n * an implementation of a basic mnemonic-based key.\n */\nvar Key = /** @class */function () {\n  /**\n   * Called to derive the relevant account and validator addresses and public keys from\n   * the raw compressed public key in bytes.\n   *\n   * @param publicKey raw compressed bytes public key\n   */\n  function Key(publicKey) {\n    this.publicKey = publicKey;\n  }\n  Object.defineProperty(Key.prototype, \"accAddress\", {\n    /**\n     * Terra account address. `terra-` prefixed.\n     */\n    get: function () {\n      if (!this.publicKey) {\n        throw new Error('Could not compute accAddress: missing rawAddress');\n      }\n      return this.publicKey.address();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Key.prototype, \"valAddress\", {\n    /**\n     * Terra validator address. `terravaloper-` prefixed.\n     */\n    get: function () {\n      if (!this.publicKey) {\n        throw new Error('Could not compute valAddress: missing rawAddress');\n      }\n      return bech32_1.bech32.encode('terravaloper', bech32_1.bech32.toWords(this.publicKey.rawAddress()));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Signs a [[StdSignMsg]] with the method supplied by the child class.\n   * only used Amino sign\n   *\n   * @param tx sign-message of the transaction to sign\n   * @param isClassic target network is isClassic or not?\n   */\n  Key.prototype.createSignatureAmino = function (tx, isClassic) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, _d, _e, _f, _g;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            if (!this.publicKey) {\n              throw new Error('Signature could not be created: Key instance missing publicKey');\n            }\n            _a = SignatureV2_1.SignatureV2.bind;\n            _b = [void 0, this.publicKey];\n            _d = (_c = SignatureV2_1.SignatureV2.Descriptor).bind;\n            _f = (_e = SignatureV2_1.SignatureV2.Descriptor.Single).bind;\n            _g = [void 0, signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON];\n            return [4 /*yield*/, this.sign(Buffer.from(tx.toAminoJSON(isClassic)))];\n          case 1:\n            return [2 /*return*/, new (_a.apply(SignatureV2_1.SignatureV2, _b.concat([new (_d.apply(_c, [void 0, new (_f.apply(_e, _g.concat([_h.sent().toString('base64')])))()]))(), tx.sequence])))()];\n        }\n      });\n    });\n  };\n  /**\n   * Signs a [[SignDoc]] with the method supplied by the child class.\n   *\n   * @param tx sign-message of the transaction to sign\n   * @param isClassic target network is isClassic or not?\n   */\n  Key.prototype.createSignature = function (signDoc, isClassic) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signerInfos, sigBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.publicKey) {\n              throw new Error('Signature could not be created: Key instance missing publicKey');\n            }\n            signerInfos = signDoc.auth_info.signer_infos;\n            signDoc.auth_info.signer_infos = [new core_1.SignerInfo(this.publicKey, signDoc.sequence, new core_1.ModeInfo(new core_1.ModeInfo.Single(signing_1.SignMode.SIGN_MODE_DIRECT)))];\n            return [4 /*yield*/, this.sign(Buffer.from(signDoc.toBytes(isClassic)))];\n          case 1:\n            sigBytes = _a.sent().toString('base64');\n            // restore signDoc to origin\n            signDoc.auth_info.signer_infos = signerInfos;\n            return [2 /*return*/, new SignatureV2_1.SignatureV2(this.publicKey, new SignatureV2_1.SignatureV2.Descriptor(new SignatureV2_1.SignatureV2.Descriptor.Single(signing_1.SignMode.SIGN_MODE_DIRECT, sigBytes)), signDoc.sequence)];\n        }\n      });\n    });\n  };\n  /**\n   * Signs a [[Tx]] and adds the signature to a generated StdTx that is ready to be broadcasted.\n   * @param tx\n   */\n  Key.prototype.signTx = function (tx, options, isClassic) {\n    return __awaiter(this, void 0, void 0, function () {\n      var copyTx, sign_doc, signature, sigData;\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            copyTx = new core_1.Tx(tx.body, new core_1.AuthInfo([], tx.auth_info.fee), []);\n            sign_doc = new core_1.SignDoc(options.chainID, options.accountNumber, options.sequence, copyTx.auth_info, copyTx.body);\n            if (!(options.signMode === signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.createSignatureAmino(sign_doc, isClassic)];\n          case 1:\n            signature = _c.sent();\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this.createSignature(sign_doc, isClassic)];\n          case 3:\n            signature = _c.sent();\n            _c.label = 4;\n          case 4:\n            sigData = signature.data.single;\n            (_a = copyTx.signatures).push.apply(_a, __spreadArray(__spreadArray([], tx.signatures, false), [sigData.signature], false));\n            (_b = copyTx.auth_info.signer_infos).push.apply(_b, __spreadArray(__spreadArray([], tx.auth_info.signer_infos, false), [new core_1.SignerInfo(signature.public_key, signature.sequence, new core_1.ModeInfo(new core_1.ModeInfo.Single(sigData.mode)))], false));\n            return [2 /*return*/, copyTx];\n        }\n      });\n    });\n  };\n  return Key;\n}();\nexports.Key = Key;\n//# sourceMappingURL=Key.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}