{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MerklePrefix = void 0;\nvar commitment_1 = require(\"@terra-money/terra.proto/ibc/core/commitment/v1/commitment\");\nvar json_1 = require(\"../../../../util/json\");\n/*\n * MerklePrefix is merkle path prefixed to the key.\n * The constructed key from the Path and the key will be append(Path.KeyPath,\n * append(Path.KeyPrefix, key...))\n */\nvar MerklePrefix = /** @class */function (_super) {\n  __extends(MerklePrefix, _super);\n  /**\n   * @param key_prefix\n   */\n  function MerklePrefix(key_prefix) {\n    var _this = _super.call(this) || this;\n    _this.key_prefix = key_prefix;\n    return _this;\n  }\n  MerklePrefix.fromAmino = function (data) {\n    var key_prefix = data.key_prefix;\n    return new MerklePrefix(key_prefix);\n  };\n  MerklePrefix.prototype.toAmino = function () {\n    var key_prefix = this.key_prefix;\n    var res = {\n      key_prefix: key_prefix\n    };\n    return res;\n  };\n  MerklePrefix.fromData = function (data) {\n    var key_prefix = data.key_prefix;\n    return new MerklePrefix(key_prefix);\n  };\n  MerklePrefix.prototype.toData = function () {\n    var key_prefix = this.key_prefix;\n    var res = {\n      key_prefix: key_prefix\n    };\n    return res;\n  };\n  MerklePrefix.fromProto = function (proto) {\n    return new MerklePrefix(Buffer.from(proto.keyPrefix).toString('base64'));\n  };\n  MerklePrefix.prototype.toProto = function () {\n    var key_prefix = this.key_prefix;\n    return commitment_1.MerklePrefix.fromPartial({\n      keyPrefix: Buffer.from(key_prefix, 'base64')\n    });\n  };\n  return MerklePrefix;\n}(json_1.JSONSerializable);\nexports.MerklePrefix = MerklePrefix;\n//# sourceMappingURL=MerklePrefix.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}