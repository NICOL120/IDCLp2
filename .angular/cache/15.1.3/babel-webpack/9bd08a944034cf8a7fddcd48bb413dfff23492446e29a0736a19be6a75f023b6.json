{"ast":null,"code":"export function getStablePrice(offerPool, askPool, amp) {\n  const leverage = amp * 200;\n  const newAskPool = askPool - 1000000;\n  const d = computeD(leverage, offerPool, askPool);\n  const newOfferPool = computeNewBalance(leverage, newAskPool, d);\n  const offerAmt = newOfferPool - offerPool;\n  if (isFinite(offerAmt)) {\n    return 1000000 / offerAmt;\n  } else {\n    return 0.98; // fallback if calculation error\n  }\n}\n\nfunction computeD(leverage, amountA, amountB) {\n  const sumX = amountA + amountB;\n  const amountA2 = amountA * 2 + 1;\n  const amountB2 = amountB * 2 + 1;\n  let dPrev;\n  let d = sumX;\n  for (let i = 0; i < 32; i++) {\n    const dProd = d * d / amountA2 * d / amountB2;\n    dPrev = d;\n    d = calcStep(d, leverage, sumX, dProd);\n    if (Math.abs(d - dPrev) < 1) {\n      break;\n    }\n  }\n  return d;\n}\nfunction calcStep(d, leverage, sumX, dProd) {\n  const leverageMult = leverage * sumX / 100;\n  const dP = dProd * 2;\n  const l = (leverageMult + dP) * d;\n  const leverageSub = d * (leverage - 100) / 100;\n  const dP2 = dProd * 3;\n  const r = leverageSub + dP2;\n  return l / r;\n}\nfunction computeNewBalance(leverage, newSourceAmount, d) {\n  const c = Math.pow(d, 3) * 100 / (newSourceAmount * 4 * leverage);\n  const b = newSourceAmount + d * 100 / leverage;\n  let yPrev;\n  let y = d;\n  for (let i = 0; i < 32; i++) {\n    yPrev = y;\n    y = (Math.pow(y, 2) + c) / (y * 2 + b - d);\n    if (Math.abs(y - yPrev) < 1) {\n      break;\n    }\n  }\n  return y;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}