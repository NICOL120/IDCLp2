{"ast":null,"code":"import { ModalComponent } from './modal/modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"mdb-angular-ui-kit/modal\";\nexport let ModalService = /*#__PURE__*/(() => {\n  class ModalService {\n    constructor(modalService) {\n      this.modalService = modalService;\n      this.notifyItems = [];\n    }\n    translateIcon(iconType) {\n      switch (iconType) {\n        case 'info':\n          return {\n            icon: 'fa-info-circle',\n            iconClass: 'text-info'\n          };\n        case 'success':\n          return {\n            icon: 'fa-check',\n            iconClass: 'text-success'\n          };\n        case 'question':\n          return {\n            icon: 'fa-question-circle',\n            iconClass: 'text-info'\n          };\n        case 'warning':\n          return {\n            icon: 'fa-exclamation-triangle',\n            iconClass: 'text-warning'\n          };\n        case 'danger':\n          return {\n            icon: 'fa-times-circle',\n            iconClass: 'text-danger'\n          };\n      }\n    }\n    alert(message, opts) {\n      const ref = this.modalService.open(ModalComponent, {\n        keyboard: false,\n        ignoreBackdropClick: true,\n        data: Object.assign(Object.assign({\n          message,\n          cancelText: ''\n        }, opts), this.translateIcon((opts === null || opts === void 0 ? void 0 : opts.iconType) || 'info'))\n      });\n      return ref.onClose.toPromise();\n    }\n    confirm(message, opts) {\n      const ref = this.modalService.open(ModalComponent, {\n        keyboard: false,\n        ignoreBackdropClick: true,\n        data: Object.assign(Object.assign({\n          message\n        }, opts), this.translateIcon((opts === null || opts === void 0 ? void 0 : opts.iconType) || 'question'))\n      });\n      return ref.onClose.toPromise();\n    }\n    notify(message, opts) {\n      const iconType = (opts === null || opts === void 0 ? void 0 : opts.iconType) || 'info';\n      const item = Object.assign(Object.assign(Object.assign({\n        message\n      }, opts), {\n        iconType\n      }), this.translateIcon(iconType));\n      this.notifyItems.push(item);\n      setTimeout(() => {\n        const i = this.notifyItems.findIndex(it => it === item);\n        if (i >= 0) {\n          this.notifyItems.splice(i, 1);\n        }\n      }, 10000);\n    }\n  }\n  ModalService.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)(i0.ɵɵinject(i1.MdbModalService));\n  };\n  ModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: ModalService.ɵfac,\n    providedIn: 'root'\n  });\n  return ModalService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}