{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgClientImpl = exports.MsgDelegateFeedConsentResponse = exports.MsgDelegateFeedConsent = exports.MsgAggregateExchangeRateVoteResponse = exports.MsgAggregateExchangeRateVote = exports.MsgAggregateExchangeRatePrevoteResponse = exports.MsgAggregateExchangeRatePrevote = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nexports.protobufPackage = \"terra.oracle.v1beta1\";\nconst baseMsgAggregateExchangeRatePrevote = {\n  hash: \"\",\n  feeder: \"\",\n  validator: \"\"\n};\nexports.MsgAggregateExchangeRatePrevote = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.hash !== \"\") {\n      writer.uint32(10).string(message.hash);\n    }\n    if (message.feeder !== \"\") {\n      writer.uint32(18).string(message.feeder);\n    }\n    if (message.validator !== \"\") {\n      writer.uint32(26).string(message.validator);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgAggregateExchangeRatePrevote);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.string();\n          break;\n        case 2:\n          message.feeder = reader.string();\n          break;\n        case 3:\n          message.validator = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgAggregateExchangeRatePrevote);\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = String(object.hash);\n    } else {\n      message.hash = \"\";\n    }\n    if (object.feeder !== undefined && object.feeder !== null) {\n      message.feeder = String(object.feeder);\n    } else {\n      message.feeder = \"\";\n    }\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = String(object.validator);\n    } else {\n      message.validator = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.hash !== undefined && (obj.hash = message.hash);\n    message.feeder !== undefined && (obj.feeder = message.feeder);\n    message.validator !== undefined && (obj.validator = message.validator);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgAggregateExchangeRatePrevote);\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = object.hash;\n    } else {\n      message.hash = \"\";\n    }\n    if (object.feeder !== undefined && object.feeder !== null) {\n      message.feeder = object.feeder;\n    } else {\n      message.feeder = \"\";\n    }\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = object.validator;\n    } else {\n      message.validator = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgAggregateExchangeRatePrevoteResponse = {};\nexports.MsgAggregateExchangeRatePrevoteResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgAggregateExchangeRatePrevoteResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgAggregateExchangeRatePrevoteResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgAggregateExchangeRatePrevoteResponse);\n    return message;\n  }\n};\nconst baseMsgAggregateExchangeRateVote = {\n  salt: \"\",\n  exchangeRates: \"\",\n  feeder: \"\",\n  validator: \"\"\n};\nexports.MsgAggregateExchangeRateVote = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.salt !== \"\") {\n      writer.uint32(10).string(message.salt);\n    }\n    if (message.exchangeRates !== \"\") {\n      writer.uint32(18).string(message.exchangeRates);\n    }\n    if (message.feeder !== \"\") {\n      writer.uint32(26).string(message.feeder);\n    }\n    if (message.validator !== \"\") {\n      writer.uint32(34).string(message.validator);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgAggregateExchangeRateVote);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.salt = reader.string();\n          break;\n        case 2:\n          message.exchangeRates = reader.string();\n          break;\n        case 3:\n          message.feeder = reader.string();\n          break;\n        case 4:\n          message.validator = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgAggregateExchangeRateVote);\n    if (object.salt !== undefined && object.salt !== null) {\n      message.salt = String(object.salt);\n    } else {\n      message.salt = \"\";\n    }\n    if (object.exchangeRates !== undefined && object.exchangeRates !== null) {\n      message.exchangeRates = String(object.exchangeRates);\n    } else {\n      message.exchangeRates = \"\";\n    }\n    if (object.feeder !== undefined && object.feeder !== null) {\n      message.feeder = String(object.feeder);\n    } else {\n      message.feeder = \"\";\n    }\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = String(object.validator);\n    } else {\n      message.validator = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.salt !== undefined && (obj.salt = message.salt);\n    message.exchangeRates !== undefined && (obj.exchangeRates = message.exchangeRates);\n    message.feeder !== undefined && (obj.feeder = message.feeder);\n    message.validator !== undefined && (obj.validator = message.validator);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgAggregateExchangeRateVote);\n    if (object.salt !== undefined && object.salt !== null) {\n      message.salt = object.salt;\n    } else {\n      message.salt = \"\";\n    }\n    if (object.exchangeRates !== undefined && object.exchangeRates !== null) {\n      message.exchangeRates = object.exchangeRates;\n    } else {\n      message.exchangeRates = \"\";\n    }\n    if (object.feeder !== undefined && object.feeder !== null) {\n      message.feeder = object.feeder;\n    } else {\n      message.feeder = \"\";\n    }\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = object.validator;\n    } else {\n      message.validator = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgAggregateExchangeRateVoteResponse = {};\nexports.MsgAggregateExchangeRateVoteResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgAggregateExchangeRateVoteResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgAggregateExchangeRateVoteResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgAggregateExchangeRateVoteResponse);\n    return message;\n  }\n};\nconst baseMsgDelegateFeedConsent = {\n  operator: \"\",\n  delegate: \"\"\n};\nexports.MsgDelegateFeedConsent = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.operator !== \"\") {\n      writer.uint32(10).string(message.operator);\n    }\n    if (message.delegate !== \"\") {\n      writer.uint32(18).string(message.delegate);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgDelegateFeedConsent);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.operator = reader.string();\n          break;\n        case 2:\n          message.delegate = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgDelegateFeedConsent);\n    if (object.operator !== undefined && object.operator !== null) {\n      message.operator = String(object.operator);\n    } else {\n      message.operator = \"\";\n    }\n    if (object.delegate !== undefined && object.delegate !== null) {\n      message.delegate = String(object.delegate);\n    } else {\n      message.delegate = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.operator !== undefined && (obj.operator = message.operator);\n    message.delegate !== undefined && (obj.delegate = message.delegate);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgDelegateFeedConsent);\n    if (object.operator !== undefined && object.operator !== null) {\n      message.operator = object.operator;\n    } else {\n      message.operator = \"\";\n    }\n    if (object.delegate !== undefined && object.delegate !== null) {\n      message.delegate = object.delegate;\n    } else {\n      message.delegate = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgDelegateFeedConsentResponse = {};\nexports.MsgDelegateFeedConsentResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgDelegateFeedConsentResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgDelegateFeedConsentResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgDelegateFeedConsentResponse);\n    return message;\n  }\n};\nclass MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.AggregateExchangeRatePrevote = this.AggregateExchangeRatePrevote.bind(this);\n    this.AggregateExchangeRateVote = this.AggregateExchangeRateVote.bind(this);\n    this.DelegateFeedConsent = this.DelegateFeedConsent.bind(this);\n  }\n  AggregateExchangeRatePrevote(request) {\n    const data = exports.MsgAggregateExchangeRatePrevote.encode(request).finish();\n    const promise = this.rpc.request(\"terra.oracle.v1beta1.Msg\", \"AggregateExchangeRatePrevote\", data);\n    return promise.then(data => exports.MsgAggregateExchangeRatePrevoteResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  AggregateExchangeRateVote(request) {\n    const data = exports.MsgAggregateExchangeRateVote.encode(request).finish();\n    const promise = this.rpc.request(\"terra.oracle.v1beta1.Msg\", \"AggregateExchangeRateVote\", data);\n    return promise.then(data => exports.MsgAggregateExchangeRateVoteResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  DelegateFeedConsent(request) {\n    const data = exports.MsgDelegateFeedConsent.encode(request).finish();\n    const promise = this.rpc.request(\"terra.oracle.v1beta1.Msg\", \"DelegateFeedConsent\", data);\n    return promise.then(data => exports.MsgDelegateFeedConsentResponse.decode(new minimal_1.default.Reader(data)));\n  }\n}\nexports.MsgClientImpl = MsgClientImpl;\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}