{"ast":null,"code":"import BN from 'bignumber.js';\nimport { CONFIG } from '../consts/config';\nexport const plus = (a, b) => new BN(a || 0).plus(b || 0).toString();\nexport const minus = (a, b) => new BN(a || 0).minus(b || 0).toString();\nexport const times = (a, b) => new BN(a || 0).times(b || 0).toString();\nexport const div = (a, b) => new BN(a || 0).div(b || 1).toString();\nexport const pow = (a, b) => new BN(a).pow(b).toString();\nexport const sum = array => array.length ? BN.sum.apply(null, array.filter(isFinite)).toString() : '0';\nexport const min = array => BN.min.apply(null, array.filter(isFinite)).toString();\nexport const max = array => BN.max.apply(null, array.filter(isFinite)).toString();\nexport const ceil = n => new BN(n).integerValue(BN.ROUND_CEIL).toString();\nexport const floor = n => new BN(n).integerValue(BN.ROUND_FLOOR).toString();\nexport const abs = n => new BN(n).abs().toString();\n/* format */\nexport const toNumber = n => new BN(n).toNumber();\n/* boolean */\nexport const gt = (a, b) => new BN(a).gt(b);\nexport const lt = (a, b) => new BN(a).lt(b);\nexport const gte = (a, b) => new BN(a).gte(b);\nexport const lte = (a, b) => new BN(a).lte(b);\nexport const isFinite = n => n != null && new BN(n).isFinite();\nexport const isInteger = n => n != null && new BN(n).isInteger();\nexport const floorSixDecimal = input => new BN(input).decimalPlaces(CONFIG.DIGIT, BN.ROUND_FLOOR).toString();\nexport const ceilSixDecimal = input => new BN(input).decimalPlaces(CONFIG.DIGIT, BN.ROUND_UP).toString();\nexport const floor18Decimal = input => {\n  return new BN(input).toFixed(18);\n};\nexport const isqrt = input => {\n  return new BN(input).sqrt().integerValue().toString();\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}