{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fee = exports.ModeInfo_Multi = exports.ModeInfo_Single = exports.ModeInfo = exports.SignerInfo = exports.AuthInfo = exports.TxBody = exports.SignDoc = exports.TxRaw = exports.Tx = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst any_1 = require(\"../../../google/protobuf/any\");\nconst signing_1 = require(\"../../../cosmos/tx/signing/v1beta1/signing\");\nconst multisig_1 = require(\"../../../cosmos/crypto/multisig/v1beta1/multisig\");\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nexports.protobufPackage = \"cosmos.tx.v1beta1\";\nconst baseTx = {};\nexports.Tx = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.body !== undefined) {\n      exports.TxBody.encode(message.body, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.authInfo !== undefined) {\n      exports.AuthInfo.encode(message.authInfo, writer.uint32(18).fork()).ldelim();\n    }\n    for (const v of message.signatures) {\n      writer.uint32(26).bytes(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTx);\n    message.signatures = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.body = exports.TxBody.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.authInfo = exports.AuthInfo.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseTx);\n    message.signatures = [];\n    if (object.body !== undefined && object.body !== null) {\n      message.body = exports.TxBody.fromJSON(object.body);\n    } else {\n      message.body = undefined;\n    }\n    if (object.authInfo !== undefined && object.authInfo !== null) {\n      message.authInfo = exports.AuthInfo.fromJSON(object.authInfo);\n    } else {\n      message.authInfo = undefined;\n    }\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(bytesFromBase64(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.body !== undefined && (obj.body = message.body ? exports.TxBody.toJSON(message.body) : undefined);\n    message.authInfo !== undefined && (obj.authInfo = message.authInfo ? exports.AuthInfo.toJSON(message.authInfo) : undefined);\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseTx);\n    message.signatures = [];\n    if (object.body !== undefined && object.body !== null) {\n      message.body = exports.TxBody.fromPartial(object.body);\n    } else {\n      message.body = undefined;\n    }\n    if (object.authInfo !== undefined && object.authInfo !== null) {\n      message.authInfo = exports.AuthInfo.fromPartial(object.authInfo);\n    } else {\n      message.authInfo = undefined;\n    }\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(e);\n      }\n    }\n    return message;\n  }\n};\nconst baseTxRaw = {};\nexports.TxRaw = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.bodyBytes.length !== 0) {\n      writer.uint32(10).bytes(message.bodyBytes);\n    }\n    if (message.authInfoBytes.length !== 0) {\n      writer.uint32(18).bytes(message.authInfoBytes);\n    }\n    for (const v of message.signatures) {\n      writer.uint32(26).bytes(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTxRaw);\n    message.signatures = [];\n    message.bodyBytes = new Uint8Array();\n    message.authInfoBytes = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bodyBytes = reader.bytes();\n          break;\n        case 2:\n          message.authInfoBytes = reader.bytes();\n          break;\n        case 3:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseTxRaw);\n    message.signatures = [];\n    message.bodyBytes = new Uint8Array();\n    message.authInfoBytes = new Uint8Array();\n    if (object.bodyBytes !== undefined && object.bodyBytes !== null) {\n      message.bodyBytes = bytesFromBase64(object.bodyBytes);\n    }\n    if (object.authInfoBytes !== undefined && object.authInfoBytes !== null) {\n      message.authInfoBytes = bytesFromBase64(object.authInfoBytes);\n    }\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(bytesFromBase64(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.bodyBytes !== undefined && (obj.bodyBytes = base64FromBytes(message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()));\n    message.authInfoBytes !== undefined && (obj.authInfoBytes = base64FromBytes(message.authInfoBytes !== undefined ? message.authInfoBytes : new Uint8Array()));\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseTxRaw);\n    message.signatures = [];\n    if (object.bodyBytes !== undefined && object.bodyBytes !== null) {\n      message.bodyBytes = object.bodyBytes;\n    } else {\n      message.bodyBytes = new Uint8Array();\n    }\n    if (object.authInfoBytes !== undefined && object.authInfoBytes !== null) {\n      message.authInfoBytes = object.authInfoBytes;\n    } else {\n      message.authInfoBytes = new Uint8Array();\n    }\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(e);\n      }\n    }\n    return message;\n  }\n};\nconst baseSignDoc = {\n  chainId: \"\",\n  accountNumber: long_1.default.UZERO\n};\nexports.SignDoc = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.bodyBytes.length !== 0) {\n      writer.uint32(10).bytes(message.bodyBytes);\n    }\n    if (message.authInfoBytes.length !== 0) {\n      writer.uint32(18).bytes(message.authInfoBytes);\n    }\n    if (message.chainId !== \"\") {\n      writer.uint32(26).string(message.chainId);\n    }\n    if (!message.accountNumber.isZero()) {\n      writer.uint32(32).uint64(message.accountNumber);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSignDoc);\n    message.bodyBytes = new Uint8Array();\n    message.authInfoBytes = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bodyBytes = reader.bytes();\n          break;\n        case 2:\n          message.authInfoBytes = reader.bytes();\n          break;\n        case 3:\n          message.chainId = reader.string();\n          break;\n        case 4:\n          message.accountNumber = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseSignDoc);\n    message.bodyBytes = new Uint8Array();\n    message.authInfoBytes = new Uint8Array();\n    if (object.bodyBytes !== undefined && object.bodyBytes !== null) {\n      message.bodyBytes = bytesFromBase64(object.bodyBytes);\n    }\n    if (object.authInfoBytes !== undefined && object.authInfoBytes !== null) {\n      message.authInfoBytes = bytesFromBase64(object.authInfoBytes);\n    }\n    if (object.chainId !== undefined && object.chainId !== null) {\n      message.chainId = String(object.chainId);\n    } else {\n      message.chainId = \"\";\n    }\n    if (object.accountNumber !== undefined && object.accountNumber !== null) {\n      message.accountNumber = long_1.default.fromString(object.accountNumber);\n    } else {\n      message.accountNumber = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.bodyBytes !== undefined && (obj.bodyBytes = base64FromBytes(message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()));\n    message.authInfoBytes !== undefined && (obj.authInfoBytes = base64FromBytes(message.authInfoBytes !== undefined ? message.authInfoBytes : new Uint8Array()));\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.accountNumber !== undefined && (obj.accountNumber = (message.accountNumber || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseSignDoc);\n    if (object.bodyBytes !== undefined && object.bodyBytes !== null) {\n      message.bodyBytes = object.bodyBytes;\n    } else {\n      message.bodyBytes = new Uint8Array();\n    }\n    if (object.authInfoBytes !== undefined && object.authInfoBytes !== null) {\n      message.authInfoBytes = object.authInfoBytes;\n    } else {\n      message.authInfoBytes = new Uint8Array();\n    }\n    if (object.chainId !== undefined && object.chainId !== null) {\n      message.chainId = object.chainId;\n    } else {\n      message.chainId = \"\";\n    }\n    if (object.accountNumber !== undefined && object.accountNumber !== null) {\n      message.accountNumber = object.accountNumber;\n    } else {\n      message.accountNumber = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst baseTxBody = {\n  memo: \"\",\n  timeoutHeight: long_1.default.UZERO\n};\nexports.TxBody = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.messages) {\n      any_1.Any.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.memo !== \"\") {\n      writer.uint32(18).string(message.memo);\n    }\n    if (!message.timeoutHeight.isZero()) {\n      writer.uint32(24).uint64(message.timeoutHeight);\n    }\n    for (const v of message.extensionOptions) {\n      any_1.Any.encode(v, writer.uint32(8186).fork()).ldelim();\n    }\n    for (const v of message.nonCriticalExtensionOptions) {\n      any_1.Any.encode(v, writer.uint32(16378).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTxBody);\n    message.messages = [];\n    message.extensionOptions = [];\n    message.nonCriticalExtensionOptions = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.messages.push(any_1.Any.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.memo = reader.string();\n          break;\n        case 3:\n          message.timeoutHeight = reader.uint64();\n          break;\n        case 1023:\n          message.extensionOptions.push(any_1.Any.decode(reader, reader.uint32()));\n          break;\n        case 2047:\n          message.nonCriticalExtensionOptions.push(any_1.Any.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseTxBody);\n    message.messages = [];\n    message.extensionOptions = [];\n    message.nonCriticalExtensionOptions = [];\n    if (object.messages !== undefined && object.messages !== null) {\n      for (const e of object.messages) {\n        message.messages.push(any_1.Any.fromJSON(e));\n      }\n    }\n    if (object.memo !== undefined && object.memo !== null) {\n      message.memo = String(object.memo);\n    } else {\n      message.memo = \"\";\n    }\n    if (object.timeoutHeight !== undefined && object.timeoutHeight !== null) {\n      message.timeoutHeight = long_1.default.fromString(object.timeoutHeight);\n    } else {\n      message.timeoutHeight = long_1.default.UZERO;\n    }\n    if (object.extensionOptions !== undefined && object.extensionOptions !== null) {\n      for (const e of object.extensionOptions) {\n        message.extensionOptions.push(any_1.Any.fromJSON(e));\n      }\n    }\n    if (object.nonCriticalExtensionOptions !== undefined && object.nonCriticalExtensionOptions !== null) {\n      for (const e of object.nonCriticalExtensionOptions) {\n        message.nonCriticalExtensionOptions.push(any_1.Any.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.messages) {\n      obj.messages = message.messages.map(e => e ? any_1.Any.toJSON(e) : undefined);\n    } else {\n      obj.messages = [];\n    }\n    message.memo !== undefined && (obj.memo = message.memo);\n    message.timeoutHeight !== undefined && (obj.timeoutHeight = (message.timeoutHeight || long_1.default.UZERO).toString());\n    if (message.extensionOptions) {\n      obj.extensionOptions = message.extensionOptions.map(e => e ? any_1.Any.toJSON(e) : undefined);\n    } else {\n      obj.extensionOptions = [];\n    }\n    if (message.nonCriticalExtensionOptions) {\n      obj.nonCriticalExtensionOptions = message.nonCriticalExtensionOptions.map(e => e ? any_1.Any.toJSON(e) : undefined);\n    } else {\n      obj.nonCriticalExtensionOptions = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseTxBody);\n    message.messages = [];\n    message.extensionOptions = [];\n    message.nonCriticalExtensionOptions = [];\n    if (object.messages !== undefined && object.messages !== null) {\n      for (const e of object.messages) {\n        message.messages.push(any_1.Any.fromPartial(e));\n      }\n    }\n    if (object.memo !== undefined && object.memo !== null) {\n      message.memo = object.memo;\n    } else {\n      message.memo = \"\";\n    }\n    if (object.timeoutHeight !== undefined && object.timeoutHeight !== null) {\n      message.timeoutHeight = object.timeoutHeight;\n    } else {\n      message.timeoutHeight = long_1.default.UZERO;\n    }\n    if (object.extensionOptions !== undefined && object.extensionOptions !== null) {\n      for (const e of object.extensionOptions) {\n        message.extensionOptions.push(any_1.Any.fromPartial(e));\n      }\n    }\n    if (object.nonCriticalExtensionOptions !== undefined && object.nonCriticalExtensionOptions !== null) {\n      for (const e of object.nonCriticalExtensionOptions) {\n        message.nonCriticalExtensionOptions.push(any_1.Any.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseAuthInfo = {};\nexports.AuthInfo = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.signerInfos) {\n      exports.SignerInfo.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.fee !== undefined) {\n      exports.Fee.encode(message.fee, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseAuthInfo);\n    message.signerInfos = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signerInfos.push(exports.SignerInfo.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.fee = exports.Fee.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseAuthInfo);\n    message.signerInfos = [];\n    if (object.signerInfos !== undefined && object.signerInfos !== null) {\n      for (const e of object.signerInfos) {\n        message.signerInfos.push(exports.SignerInfo.fromJSON(e));\n      }\n    }\n    if (object.fee !== undefined && object.fee !== null) {\n      message.fee = exports.Fee.fromJSON(object.fee);\n    } else {\n      message.fee = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.signerInfos) {\n      obj.signerInfos = message.signerInfos.map(e => e ? exports.SignerInfo.toJSON(e) : undefined);\n    } else {\n      obj.signerInfos = [];\n    }\n    message.fee !== undefined && (obj.fee = message.fee ? exports.Fee.toJSON(message.fee) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseAuthInfo);\n    message.signerInfos = [];\n    if (object.signerInfos !== undefined && object.signerInfos !== null) {\n      for (const e of object.signerInfos) {\n        message.signerInfos.push(exports.SignerInfo.fromPartial(e));\n      }\n    }\n    if (object.fee !== undefined && object.fee !== null) {\n      message.fee = exports.Fee.fromPartial(object.fee);\n    } else {\n      message.fee = undefined;\n    }\n    return message;\n  }\n};\nconst baseSignerInfo = {\n  sequence: long_1.default.UZERO\n};\nexports.SignerInfo = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.publicKey !== undefined) {\n      any_1.Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.modeInfo !== undefined) {\n      exports.ModeInfo.encode(message.modeInfo, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSignerInfo);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.publicKey = any_1.Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.modeInfo = exports.ModeInfo.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.sequence = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseSignerInfo);\n    if (object.publicKey !== undefined && object.publicKey !== null) {\n      message.publicKey = any_1.Any.fromJSON(object.publicKey);\n    } else {\n      message.publicKey = undefined;\n    }\n    if (object.modeInfo !== undefined && object.modeInfo !== null) {\n      message.modeInfo = exports.ModeInfo.fromJSON(object.modeInfo);\n    } else {\n      message.modeInfo = undefined;\n    }\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = long_1.default.fromString(object.sequence);\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.publicKey !== undefined && (obj.publicKey = message.publicKey ? any_1.Any.toJSON(message.publicKey) : undefined);\n    message.modeInfo !== undefined && (obj.modeInfo = message.modeInfo ? exports.ModeInfo.toJSON(message.modeInfo) : undefined);\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseSignerInfo);\n    if (object.publicKey !== undefined && object.publicKey !== null) {\n      message.publicKey = any_1.Any.fromPartial(object.publicKey);\n    } else {\n      message.publicKey = undefined;\n    }\n    if (object.modeInfo !== undefined && object.modeInfo !== null) {\n      message.modeInfo = exports.ModeInfo.fromPartial(object.modeInfo);\n    } else {\n      message.modeInfo = undefined;\n    }\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = object.sequence;\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst baseModeInfo = {};\nexports.ModeInfo = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.single !== undefined) {\n      exports.ModeInfo_Single.encode(message.single, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.multi !== undefined) {\n      exports.ModeInfo_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseModeInfo);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.single = exports.ModeInfo_Single.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.multi = exports.ModeInfo_Multi.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseModeInfo);\n    if (object.single !== undefined && object.single !== null) {\n      message.single = exports.ModeInfo_Single.fromJSON(object.single);\n    } else {\n      message.single = undefined;\n    }\n    if (object.multi !== undefined && object.multi !== null) {\n      message.multi = exports.ModeInfo_Multi.fromJSON(object.multi);\n    } else {\n      message.multi = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.single !== undefined && (obj.single = message.single ? exports.ModeInfo_Single.toJSON(message.single) : undefined);\n    message.multi !== undefined && (obj.multi = message.multi ? exports.ModeInfo_Multi.toJSON(message.multi) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseModeInfo);\n    if (object.single !== undefined && object.single !== null) {\n      message.single = exports.ModeInfo_Single.fromPartial(object.single);\n    } else {\n      message.single = undefined;\n    }\n    if (object.multi !== undefined && object.multi !== null) {\n      message.multi = exports.ModeInfo_Multi.fromPartial(object.multi);\n    } else {\n      message.multi = undefined;\n    }\n    return message;\n  }\n};\nconst baseModeInfo_Single = {\n  mode: 0\n};\nexports.ModeInfo_Single = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.mode !== 0) {\n      writer.uint32(8).int32(message.mode);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseModeInfo_Single);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.mode = reader.int32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseModeInfo_Single);\n    if (object.mode !== undefined && object.mode !== null) {\n      message.mode = signing_1.signModeFromJSON(object.mode);\n    } else {\n      message.mode = 0;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.mode !== undefined && (obj.mode = signing_1.signModeToJSON(message.mode));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseModeInfo_Single);\n    if (object.mode !== undefined && object.mode !== null) {\n      message.mode = object.mode;\n    } else {\n      message.mode = 0;\n    }\n    return message;\n  }\n};\nconst baseModeInfo_Multi = {};\nexports.ModeInfo_Multi = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.bitarray !== undefined) {\n      multisig_1.CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.modeInfos) {\n      exports.ModeInfo.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseModeInfo_Multi);\n    message.modeInfos = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bitarray = multisig_1.CompactBitArray.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.modeInfos.push(exports.ModeInfo.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseModeInfo_Multi);\n    message.modeInfos = [];\n    if (object.bitarray !== undefined && object.bitarray !== null) {\n      message.bitarray = multisig_1.CompactBitArray.fromJSON(object.bitarray);\n    } else {\n      message.bitarray = undefined;\n    }\n    if (object.modeInfos !== undefined && object.modeInfos !== null) {\n      for (const e of object.modeInfos) {\n        message.modeInfos.push(exports.ModeInfo.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.bitarray !== undefined && (obj.bitarray = message.bitarray ? multisig_1.CompactBitArray.toJSON(message.bitarray) : undefined);\n    if (message.modeInfos) {\n      obj.modeInfos = message.modeInfos.map(e => e ? exports.ModeInfo.toJSON(e) : undefined);\n    } else {\n      obj.modeInfos = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseModeInfo_Multi);\n    message.modeInfos = [];\n    if (object.bitarray !== undefined && object.bitarray !== null) {\n      message.bitarray = multisig_1.CompactBitArray.fromPartial(object.bitarray);\n    } else {\n      message.bitarray = undefined;\n    }\n    if (object.modeInfos !== undefined && object.modeInfos !== null) {\n      for (const e of object.modeInfos) {\n        message.modeInfos.push(exports.ModeInfo.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseFee = {\n  gasLimit: long_1.default.UZERO,\n  payer: \"\",\n  granter: \"\"\n};\nexports.Fee = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.amount) {\n      coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.gasLimit.isZero()) {\n      writer.uint32(16).uint64(message.gasLimit);\n    }\n    if (message.payer !== \"\") {\n      writer.uint32(26).string(message.payer);\n    }\n    if (message.granter !== \"\") {\n      writer.uint32(34).string(message.granter);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseFee);\n    message.amount = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.gasLimit = reader.uint64();\n          break;\n        case 3:\n          message.payer = reader.string();\n          break;\n        case 4:\n          message.granter = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseFee);\n    message.amount = [];\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n    if (object.gasLimit !== undefined && object.gasLimit !== null) {\n      message.gasLimit = long_1.default.fromString(object.gasLimit);\n    } else {\n      message.gasLimit = long_1.default.UZERO;\n    }\n    if (object.payer !== undefined && object.payer !== null) {\n      message.payer = String(object.payer);\n    } else {\n      message.payer = \"\";\n    }\n    if (object.granter !== undefined && object.granter !== null) {\n      message.granter = String(object.granter);\n    } else {\n      message.granter = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.amount) {\n      obj.amount = message.amount.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.amount = [];\n    }\n    message.gasLimit !== undefined && (obj.gasLimit = (message.gasLimit || long_1.default.UZERO).toString());\n    message.payer !== undefined && (obj.payer = message.payer);\n    message.granter !== undefined && (obj.granter = message.granter);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseFee);\n    message.amount = [];\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n    if (object.gasLimit !== undefined && object.gasLimit !== null) {\n      message.gasLimit = object.gasLimit;\n    } else {\n      message.gasLimit = long_1.default.UZERO;\n    }\n    if (object.payer !== undefined && object.payer !== null) {\n      message.payer = object.payer;\n    } else {\n      message.payer = \"\";\n    }\n    if (object.granter !== undefined && object.granter !== null) {\n      message.granter = object.granter;\n    } else {\n      message.granter = \"\";\n    }\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}