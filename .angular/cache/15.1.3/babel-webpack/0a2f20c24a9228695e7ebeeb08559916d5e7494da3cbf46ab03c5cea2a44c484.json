{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgSwap = void 0;\nvar json_1 = require(\"../../../util/json\");\nvar Coin_1 = require(\"../../Coin\");\nvar tx_1 = require(\"@terra-money/legacy.proto/terra/market/v1beta1/tx\");\nvar any_1 = require(\"@terra-money/legacy.proto/google/protobuf/any\");\n/**\n * Executes a market swap between 2 denominations at the exchange rate registered by the\n * Oracle module. The account will lose the amount of coins offered, and receive funds\n * in the requested denomination after a swap fee has been applied.\n */\nvar MsgSwap = /** @class */function (_super) {\n  __extends(MsgSwap, _super);\n  /**\n   * @param trader trader's account address\n   * @param offer_coin coin to be swapped (from)\n   * @param ask_denom desired denomination (to)\n   */\n  function MsgSwap(trader, offer_coin, ask_denom) {\n    var _this = _super.call(this) || this;\n    _this.trader = trader;\n    _this.offer_coin = offer_coin;\n    _this.ask_denom = ask_denom;\n    return _this;\n  }\n  MsgSwap.fromAmino = function (data, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = data.value,\n      trader = _a.trader,\n      offer_coin = _a.offer_coin,\n      ask_denom = _a.ask_denom;\n    return new MsgSwap(trader, Coin_1.Coin.fromAmino(offer_coin), ask_denom);\n  };\n  MsgSwap.prototype.toAmino = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      trader = _a.trader,\n      offer_coin = _a.offer_coin,\n      ask_denom = _a.ask_denom;\n    return {\n      type: 'market/MsgSwap',\n      value: {\n        trader: trader,\n        offer_coin: offer_coin.toAmino(),\n        ask_denom: ask_denom\n      }\n    };\n  };\n  MsgSwap.fromProto = function (proto, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return new MsgSwap(proto.trader, Coin_1.Coin.fromProto(proto.offerCoin), proto.askDenom);\n  };\n  MsgSwap.prototype.toProto = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      trader = _a.trader,\n      offer_coin = _a.offer_coin,\n      ask_denom = _a.ask_denom;\n    return tx_1.MsgSwap.fromPartial({\n      askDenom: ask_denom,\n      offerCoin: offer_coin.toProto(),\n      trader: trader\n    });\n  };\n  MsgSwap.prototype.packAny = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return any_1.Any.fromPartial({\n      typeUrl: '/terra.market.v1beta1.MsgSwap',\n      value: tx_1.MsgSwap.encode(this.toProto(isClassic)).finish()\n    });\n  };\n  MsgSwap.unpackAny = function (msgAny, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return MsgSwap.fromProto(tx_1.MsgSwap.decode(msgAny.value), isClassic);\n  };\n  MsgSwap.fromData = function (data, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var trader = data.trader,\n      offer_coin = data.offer_coin,\n      ask_denom = data.ask_denom;\n    return new MsgSwap(trader, Coin_1.Coin.fromData(offer_coin), ask_denom);\n  };\n  MsgSwap.prototype.toData = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      trader = _a.trader,\n      offer_coin = _a.offer_coin,\n      ask_denom = _a.ask_denom;\n    return {\n      '@type': '/terra.market.v1beta1.MsgSwap',\n      trader: trader,\n      offer_coin: offer_coin.toData(),\n      ask_denom: ask_denom\n    };\n  };\n  return MsgSwap;\n}(json_1.JSONSerializable);\nexports.MsgSwap = MsgSwap;\n//# sourceMappingURL=MsgSwap.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}