{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Validator = exports.ValidatorSet = exports.CommitSig = exports.Commit = exports.PartSetHeader = exports.BlockID = exports.SignedHeader = exports.Header = void 0;\nvar types_1 = require(\"@terra-money/terra.proto/tendermint/types/types\");\nvar validator_1 = require(\"@terra-money/terra.proto/tendermint/types/validator\");\nvar Long = __importStar(require(\"long\"));\nvar json_1 = require(\"../../../../../util/json\");\nvar version_1 = require(\"./version\");\nvar crypto_1 = require(\"./crypto\");\n/** Header defines the structure of a Tendermint block header. */\nvar Header = /** @class */function (_super) {\n  __extends(Header, _super);\n  /**\n   * @param total\n   * @param hash\n   */\n  function Header(version, chainId, height, time, lastBlockId, lastCommitHash, dataHash, validatorsHash, nextValidatorsHash, consensusHash, appHash, lastResultsHash, evidenceHash, proposerAddress) {\n    var _this = _super.call(this) || this;\n    _this.version = version;\n    _this.chainId = chainId;\n    _this.height = height;\n    _this.time = time;\n    _this.lastBlockId = lastBlockId;\n    _this.lastCommitHash = lastCommitHash;\n    _this.dataHash = dataHash;\n    _this.validatorsHash = validatorsHash;\n    _this.nextValidatorsHash = nextValidatorsHash;\n    _this.consensusHash = consensusHash;\n    _this.appHash = appHash;\n    _this.lastResultsHash = lastResultsHash;\n    _this.evidenceHash = evidenceHash;\n    _this.proposerAddress = proposerAddress;\n    return _this;\n  }\n  Header.fromAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n  Header.prototype.toAmino = function () {\n    throw new Error('Amino not supported');\n  };\n  Header.fromData = function (data) {\n    var version = data.version,\n      chainId = data.chain_id,\n      height = data.height,\n      time = data.time,\n      lastBlockId = data.last_block_id,\n      lastCommitHash = data.last_commit_hash,\n      dataHash = data.data_hash,\n      validatorsHash = data.validators_hash,\n      nextValidatorsHash = data.next_validators_hash,\n      consensusHash = data.consensus_hash,\n      appHash = data.app_hash,\n      lastResultsHash = data.last_results_hash,\n      evidenceHash = data.evidence_hash,\n      proposerAddress = data.proposer_address;\n    return new Header(version ? version_1.Consensus.fromData(version) : undefined, chainId, height, time ? new Date(time) : undefined, lastBlockId ? BlockID.fromData(lastBlockId) : undefined, lastCommitHash, dataHash, validatorsHash, nextValidatorsHash, consensusHash, appHash, lastResultsHash, evidenceHash, proposerAddress);\n  };\n  Header.prototype.toData = function () {\n    var _a = this,\n      version = _a.version,\n      chainId = _a.chainId,\n      height = _a.height,\n      time = _a.time,\n      lastBlockId = _a.lastBlockId,\n      lastCommitHash = _a.lastCommitHash,\n      dataHash = _a.dataHash,\n      validatorsHash = _a.validatorsHash,\n      nextValidatorsHash = _a.nextValidatorsHash,\n      consensusHash = _a.consensusHash,\n      appHash = _a.appHash,\n      lastResultsHash = _a.lastResultsHash,\n      evidenceHash = _a.evidenceHash,\n      proposerAddress = _a.proposerAddress;\n    var res = {\n      version: version === null || version === void 0 ? void 0 : version.toData(),\n      chain_id: chainId,\n      height: height,\n      time: time ? time.toISOString().replace(/\\.000Z$/, 'Z') : undefined,\n      last_block_id: lastBlockId ? lastBlockId.toData() : undefined,\n      last_commit_hash: lastCommitHash,\n      data_hash: dataHash,\n      validators_hash: validatorsHash,\n      next_validators_hash: nextValidatorsHash,\n      consensus_hash: consensusHash,\n      app_hash: appHash,\n      last_results_hash: lastResultsHash,\n      evidence_hash: evidenceHash,\n      proposer_address: proposerAddress\n    };\n    return res;\n  };\n  Header.fromProto = function (proto) {\n    var version = proto.version,\n      chainId = proto.chainId,\n      height = proto.height,\n      time = proto.time,\n      lastBlockId = proto.lastBlockId,\n      lastCommitHash = proto.lastCommitHash,\n      dataHash = proto.dataHash,\n      validatorsHash = proto.validatorsHash,\n      nextValidatorsHash = proto.nextValidatorsHash,\n      consensusHash = proto.consensusHash,\n      appHash = proto.appHash,\n      lastResultsHash = proto.lastResultsHash,\n      evidenceHash = proto.evidenceHash,\n      proposerAddress = proto.proposerAddress;\n    return new Header(version ? version_1.Consensus.fromProto(version) : undefined, chainId, height.toString(), time, lastBlockId ? BlockID.fromProto(lastBlockId) : undefined, Buffer.from(lastCommitHash).toString('base64'), Buffer.from(dataHash).toString('base64'), Buffer.from(validatorsHash).toString('base64'), Buffer.from(nextValidatorsHash).toString('base64'), Buffer.from(consensusHash).toString('base64'), Buffer.from(appHash).toString('base64'), Buffer.from(lastResultsHash).toString('base64'), Buffer.from(evidenceHash).toString('base64'), proposerAddress.toString());\n  };\n  Header.prototype.toProto = function () {\n    var _a = this,\n      version = _a.version,\n      chainId = _a.chainId,\n      height = _a.height,\n      time = _a.time,\n      lastBlockId = _a.lastBlockId,\n      lastCommitHash = _a.lastCommitHash,\n      dataHash = _a.dataHash,\n      validatorsHash = _a.validatorsHash,\n      nextValidatorsHash = _a.nextValidatorsHash,\n      consensusHash = _a.consensusHash,\n      appHash = _a.appHash,\n      lastResultsHash = _a.lastResultsHash,\n      evidenceHash = _a.evidenceHash,\n      proposerAddress = _a.proposerAddress;\n    return types_1.Header.fromPartial({\n      version: version === null || version === void 0 ? void 0 : version.toProto(),\n      chainId: chainId,\n      height: Long.fromString(height),\n      time: time,\n      lastBlockId: lastBlockId === null || lastBlockId === void 0 ? void 0 : lastBlockId.toProto(),\n      lastCommitHash: Buffer.from(lastCommitHash, 'base64'),\n      dataHash: Buffer.from(dataHash, 'base64'),\n      validatorsHash: Buffer.from(validatorsHash, 'base64'),\n      nextValidatorsHash: Buffer.from(nextValidatorsHash, 'base64'),\n      consensusHash: Buffer.from(consensusHash, 'base64'),\n      appHash: Buffer.from(appHash, 'base64'),\n      lastResultsHash: Buffer.from(lastResultsHash, 'base64'),\n      evidenceHash: Buffer.from(evidenceHash, 'base64'),\n      proposerAddress: Buffer.from(proposerAddress)\n    });\n  };\n  return Header;\n}(json_1.JSONSerializable);\nexports.Header = Header;\nvar SignedHeader = /** @class */function (_super) {\n  __extends(SignedHeader, _super);\n  /**\n   * @param header\n   * @param commit\n   */\n  function SignedHeader(header, commit) {\n    var _this = _super.call(this) || this;\n    _this.header = header;\n    _this.commit = commit;\n    return _this;\n  }\n  SignedHeader.fromAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n  SignedHeader.prototype.toAmino = function () {\n    throw new Error('Amino not supported');\n  };\n  SignedHeader.fromData = function (data) {\n    var header = data.header,\n      commit = data.commit;\n    return new SignedHeader(header ? Header.fromData(header) : undefined, commit ? Commit.fromData(commit) : undefined);\n  };\n  SignedHeader.prototype.toData = function () {\n    var _a = this,\n      header = _a.header,\n      commit = _a.commit;\n    var res = {\n      header: header === null || header === void 0 ? void 0 : header.toData(),\n      commit: commit === null || commit === void 0 ? void 0 : commit.toData()\n    };\n    return res;\n  };\n  SignedHeader.fromProto = function (proto) {\n    return new SignedHeader(proto.header ? Header.fromProto(proto.header) : undefined, proto.commit ? Commit.fromProto(proto.commit) : undefined);\n  };\n  SignedHeader.prototype.toProto = function () {\n    var _a = this,\n      header = _a.header,\n      commit = _a.commit;\n    return types_1.SignedHeader.fromPartial({\n      header: header === null || header === void 0 ? void 0 : header.toProto(),\n      commit: commit === null || commit === void 0 ? void 0 : commit.toProto()\n    });\n  };\n  return SignedHeader;\n}(json_1.JSONSerializable);\nexports.SignedHeader = SignedHeader;\n/** BlockID */\nvar BlockID = /** @class */function (_super) {\n  __extends(BlockID, _super);\n  /**\n   * @param hash\n   * @param partSetHeader\n   */\n  function BlockID(hash, partSetHeader) {\n    var _this = _super.call(this) || this;\n    _this.hash = hash;\n    _this.partSetHeader = partSetHeader;\n    return _this;\n  }\n  BlockID.fromAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n  BlockID.prototype.toAmino = function () {\n    throw new Error('Amino not supported');\n  };\n  BlockID.fromData = function (data) {\n    var hash = data.hash,\n      partSetHeader = data.part_set_header;\n    return new BlockID(hash, partSetHeader ? PartSetHeader.fromData(partSetHeader) : undefined);\n  };\n  BlockID.prototype.toData = function () {\n    var _a = this,\n      hash = _a.hash,\n      partSetHeader = _a.partSetHeader;\n    var res = {\n      hash: hash,\n      part_set_header: partSetHeader === null || partSetHeader === void 0 ? void 0 : partSetHeader.toData()\n    };\n    return res;\n  };\n  BlockID.fromProto = function (proto) {\n    return new BlockID(Buffer.from(proto.hash).toString('base64'), proto.partSetHeader ? PartSetHeader.fromProto(proto.partSetHeader) : undefined);\n  };\n  BlockID.prototype.toProto = function () {\n    var _a = this,\n      hash = _a.hash,\n      partSetHeader = _a.partSetHeader;\n    return types_1.BlockID.fromPartial({\n      hash: Buffer.from(hash, 'base64'),\n      partSetHeader: partSetHeader ? partSetHeader.toProto() : undefined\n    });\n  };\n  return BlockID;\n}(json_1.JSONSerializable);\nexports.BlockID = BlockID;\n/** PartsetHeader */\nvar PartSetHeader = /** @class */function (_super) {\n  __extends(PartSetHeader, _super);\n  /**\n   * @param total\n   * @param hash\n   */\n  function PartSetHeader(total, hash) {\n    var _this = _super.call(this) || this;\n    _this.total = total;\n    _this.hash = hash;\n    return _this;\n  }\n  PartSetHeader.fromAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n  PartSetHeader.prototype.toAmino = function () {\n    throw new Error('Amino not supported');\n  };\n  PartSetHeader.fromData = function (data) {\n    var total = data.total,\n      hash = data.hash;\n    return new PartSetHeader(parseInt(total), hash);\n  };\n  PartSetHeader.prototype.toData = function () {\n    var _a = this,\n      total = _a.total,\n      hash = _a.hash;\n    var res = {\n      total: total.toFixed(),\n      hash: hash\n    };\n    return res;\n  };\n  PartSetHeader.fromProto = function (proto) {\n    return new PartSetHeader(proto.total, Buffer.from(proto.hash).toString('base64'));\n  };\n  PartSetHeader.prototype.toProto = function () {\n    var _a = this,\n      total = _a.total,\n      hash = _a.hash;\n    return types_1.PartSetHeader.fromPartial({\n      total: total,\n      hash: Buffer.from(hash, 'base64')\n    });\n  };\n  return PartSetHeader;\n}(json_1.JSONSerializable);\nexports.PartSetHeader = PartSetHeader;\n/** Commit contains the evidence that a block was committed by a set of validators. */\nvar Commit = /** @class */function (_super) {\n  __extends(Commit, _super);\n  /**\n   * @param height\n   * @param round\n   * @param blockId\n   * @param signatures\n   */\n  function Commit(height, round, blockId, signatures) {\n    var _this = _super.call(this) || this;\n    _this.height = height;\n    _this.round = round;\n    _this.blockId = blockId;\n    _this.signatures = signatures;\n    return _this;\n  }\n  Commit.fromAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n  Commit.prototype.toAmino = function () {\n    throw new Error('Amino not supported');\n  };\n  Commit.fromData = function (data) {\n    var height = data.height,\n      round = data.round,\n      blockId = data.block_id,\n      signatures = data.signatures;\n    return new Commit(Long.fromString(height), Number.parseInt(round), blockId ? BlockID.fromData(blockId) : undefined, signatures.map(function (sig) {\n      return CommitSig.fromData(sig);\n    }));\n  };\n  Commit.prototype.toData = function () {\n    var _a = this,\n      height = _a.height,\n      round = _a.round,\n      blockId = _a.blockId,\n      signatures = _a.signatures;\n    var res = {\n      height: height.toString(),\n      round: round.toFixed(),\n      block_id: blockId === null || blockId === void 0 ? void 0 : blockId.toData(),\n      signatures: signatures.map(function (sig) {\n        return sig.toData();\n      })\n    };\n    return res;\n  };\n  Commit.fromProto = function (proto) {\n    var height = proto.height,\n      round = proto.round,\n      blockId = proto.blockId,\n      signatures = proto.signatures;\n    return new Commit(height, round, blockId ? BlockID.fromProto(blockId) : undefined, signatures.map(function (sig) {\n      return CommitSig.fromProto(sig);\n    }));\n  };\n  Commit.prototype.toProto = function () {\n    var _a = this,\n      height = _a.height,\n      round = _a.round,\n      blockId = _a.blockId,\n      signatures = _a.signatures;\n    return types_1.Commit.fromPartial({\n      height: height,\n      round: round,\n      blockId: blockId === null || blockId === void 0 ? void 0 : blockId.toProto(),\n      signatures: signatures.map(function (sig) {\n        return sig.toProto();\n      })\n    });\n  };\n  return Commit;\n}(json_1.JSONSerializable);\nexports.Commit = Commit;\n/** CommitSig is a part of the Vote included in a Commit. */\nvar CommitSig = /** @class */function (_super) {\n  __extends(CommitSig, _super);\n  /**\n   * @param blockIdFlag\n   * @param validatorAddress\n   * @param timestamp\n   * @param signature\n   */\n  function CommitSig(blockIdFlag, validatorAddress, timestamp, signature) {\n    var _this = _super.call(this) || this;\n    _this.blockIdFlag = blockIdFlag;\n    _this.validatorAddress = validatorAddress;\n    _this.timestamp = timestamp;\n    _this.signature = signature;\n    return _this;\n  }\n  CommitSig.fromAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n  CommitSig.prototype.toAmino = function () {\n    throw new Error('Amino not supported');\n  };\n  CommitSig.fromData = function (data) {\n    var block_id_flag = data.block_id_flag,\n      validator_address = data.validator_address,\n      timestamp = data.timestamp,\n      signature = data.signature;\n    return new CommitSig((0, types_1.blockIDFlagFromJSON)(block_id_flag), validator_address, timestamp ? new Date(timestamp) : undefined, signature);\n  };\n  CommitSig.prototype.toData = function () {\n    var _a = this,\n      blockIdFlag = _a.blockIdFlag,\n      validatorAddress = _a.validatorAddress,\n      timestamp = _a.timestamp,\n      signature = _a.signature;\n    var res = {\n      block_id_flag: (0, types_1.blockIDFlagToJSON)(blockIdFlag),\n      validator_address: validatorAddress || '',\n      timestamp: timestamp ? timestamp.toISOString().replace(/\\.000Z$/, 'Z') : undefined,\n      signature: signature || ''\n    };\n    return res;\n  };\n  CommitSig.fromProto = function (proto) {\n    var blockIdFlag = proto.blockIdFlag,\n      validatorAddress = proto.validatorAddress,\n      timestamp = proto.timestamp,\n      signature = proto.signature;\n    return new CommitSig(blockIdFlag, Buffer.from(validatorAddress).toString('base64'), timestamp, Buffer.from(signature).toString('base64'));\n  };\n  CommitSig.prototype.toProto = function () {\n    var _a = this,\n      blockIdFlag = _a.blockIdFlag,\n      validatorAddress = _a.validatorAddress,\n      timestamp = _a.timestamp,\n      signature = _a.signature;\n    return types_1.CommitSig.fromPartial({\n      blockIdFlag: blockIdFlag,\n      validatorAddress: validatorAddress ? Buffer.from(validatorAddress, 'base64') : undefined,\n      timestamp: timestamp,\n      signature: signature ? Buffer.from(signature, 'base64') : undefined\n    });\n  };\n  return CommitSig;\n}(json_1.JSONSerializable);\nexports.CommitSig = CommitSig;\nvar ValidatorSet = /** @class */function (_super) {\n  __extends(ValidatorSet, _super);\n  /**\n   * @param validators\n   * @param proposer\n   * @param totalVotingPower\n   */\n  function ValidatorSet(validators, proposer, totalVotingPower) {\n    var _this = _super.call(this) || this;\n    _this.validators = validators;\n    _this.proposer = proposer;\n    _this.totalVotingPower = totalVotingPower;\n    return _this;\n  }\n  ValidatorSet.fromAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n  ValidatorSet.prototype.toAmino = function () {\n    throw new Error('Amino not supported');\n  };\n  ValidatorSet.fromData = function (data) {\n    var validators = data.validators,\n      proposer = data.proposer,\n      total_voting_power = data.total_voting_power;\n    return new ValidatorSet(validators.map(function (val) {\n      return Validator.fromData(val);\n    }), proposer ? Validator.fromData(proposer) : undefined, Long.fromString(total_voting_power));\n  };\n  ValidatorSet.prototype.toData = function () {\n    var _a = this,\n      validators = _a.validators,\n      proposer = _a.proposer,\n      totalVotingPower = _a.totalVotingPower;\n    var res = {\n      validators: validators.map(function (val) {\n        return val.toData();\n      }),\n      proposer: proposer === null || proposer === void 0 ? void 0 : proposer.toData(),\n      total_voting_power: totalVotingPower.toString()\n    };\n    return res;\n  };\n  ValidatorSet.fromProto = function (proto) {\n    var validators = proto.validators,\n      proposer = proto.proposer,\n      totalVotingPower = proto.totalVotingPower;\n    return new ValidatorSet(validators.map(function (val) {\n      return Validator.fromProto(val);\n    }), proposer ? Validator.fromProto(proposer) : undefined, totalVotingPower);\n  };\n  ValidatorSet.prototype.toProto = function () {\n    var _a = this,\n      validators = _a.validators,\n      proposer = _a.proposer,\n      totalVotingPower = _a.totalVotingPower;\n    return validator_1.ValidatorSet.fromPartial({\n      validators: validators.map(function (val) {\n        return val.toProto();\n      }),\n      proposer: (proposer === null || proposer === void 0 ? void 0 : proposer.toProto()) || undefined,\n      totalVotingPower: totalVotingPower\n    });\n  };\n  return ValidatorSet;\n}(json_1.JSONSerializable);\nexports.ValidatorSet = ValidatorSet;\nvar Validator = /** @class */function (_super) {\n  __extends(Validator, _super);\n  /**\n   * @param address\n   * @param pubKey\n   * @param votingPower\n   * @param proposerPriority\n   */\n  function Validator(address,\n  // not AccAddress in case of opposite chain is not cosmos-sdk based\n  pubKey, votingPower, proposerPriority) {\n    var _this = _super.call(this) || this;\n    _this.address = address;\n    _this.pubKey = pubKey;\n    _this.votingPower = votingPower;\n    _this.proposerPriority = proposerPriority;\n    return _this;\n  }\n  Validator.fromAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n  Validator.prototype.toAmino = function () {\n    throw new Error('Amino not supported');\n  };\n  Validator.fromData = function (data) {\n    var address = data.address,\n      pubKey = data.pub_key,\n      votingPower = data.voting_power,\n      proposerPriority = data.proposer_priority;\n    return new Validator(address, pubKey ? crypto_1.PublicKey.fromData(pubKey) : undefined, Long.fromString(votingPower), Long.fromString(proposerPriority));\n  };\n  Validator.prototype.toData = function () {\n    var _a = this,\n      address = _a.address,\n      pubKey = _a.pubKey,\n      votingPower = _a.votingPower,\n      proposerPriority = _a.proposerPriority;\n    var res = {\n      address: address,\n      pub_key: pubKey === null || pubKey === void 0 ? void 0 : pubKey.toData(),\n      voting_power: votingPower.toString(),\n      proposer_priority: proposerPriority.toString()\n    };\n    return res;\n  };\n  Validator.fromProto = function (proto) {\n    var address = proto.address,\n      pubKey = proto.pubKey,\n      votingPower = proto.votingPower,\n      proposerPriority = proto.proposerPriority;\n    return new Validator(Buffer.from(address).toString('base64'), pubKey ? crypto_1.PublicKey.fromProto(pubKey) : undefined, votingPower, proposerPriority);\n  };\n  Validator.prototype.toProto = function () {\n    var _a = this,\n      address = _a.address,\n      pubKey = _a.pubKey,\n      votingPower = _a.votingPower,\n      proposerPriority = _a.proposerPriority;\n    return validator_1.Validator.fromPartial({\n      address: Buffer.from(address, 'base64'),\n      pubKey: (pubKey === null || pubKey === void 0 ? void 0 : pubKey.toProto()) || undefined,\n      votingPower: votingPower,\n      proposerPriority: proposerPriority\n    });\n  };\n  return Validator;\n}(json_1.JSONSerializable);\nexports.Validator = Validator;\n//# sourceMappingURL=types.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}