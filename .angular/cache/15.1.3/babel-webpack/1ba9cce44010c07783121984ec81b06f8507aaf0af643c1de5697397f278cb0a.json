{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GrpcWebImpl = exports.MsgDonateAllVestingTokensDesc = exports.MsgCreatePeriodicVestingAccountDesc = exports.MsgCreateVestingAccountDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgDonateAllVestingTokensResponse = exports.MsgDonateAllVestingTokens = exports.MsgCreatePeriodicVestingAccountResponse = exports.MsgCreatePeriodicVestingAccount = exports.MsgCreateVestingAccountResponse = exports.MsgCreateVestingAccount = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst browser_headers_1 = require(\"browser-headers\");\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nconst vesting_1 = require(\"../../../cosmos/vesting/v1beta1/vesting\");\nexports.protobufPackage = \"cosmos.vesting.v1beta1\";\nconst baseMsgCreateVestingAccount = {\n  fromAddress: \"\",\n  toAddress: \"\",\n  endTime: long_1.default.ZERO,\n  delayed: false\n};\nexports.MsgCreateVestingAccount = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.fromAddress !== \"\") {\n      writer.uint32(10).string(message.fromAddress);\n    }\n    if (message.toAddress !== \"\") {\n      writer.uint32(18).string(message.toAddress);\n    }\n    for (const v of message.amount) {\n      coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n    if (!message.endTime.isZero()) {\n      writer.uint32(32).int64(message.endTime);\n    }\n    if (message.delayed === true) {\n      writer.uint32(40).bool(message.delayed);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgCreateVestingAccount);\n    message.amount = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.fromAddress = reader.string();\n          break;\n        case 2:\n          message.toAddress = reader.string();\n          break;\n        case 3:\n          message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n        case 4:\n          message.endTime = reader.int64();\n          break;\n        case 5:\n          message.delayed = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgCreateVestingAccount);\n    message.amount = [];\n    if (object.fromAddress !== undefined && object.fromAddress !== null) {\n      message.fromAddress = String(object.fromAddress);\n    } else {\n      message.fromAddress = \"\";\n    }\n    if (object.toAddress !== undefined && object.toAddress !== null) {\n      message.toAddress = String(object.toAddress);\n    } else {\n      message.toAddress = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n    if (object.endTime !== undefined && object.endTime !== null) {\n      message.endTime = long_1.default.fromString(object.endTime);\n    } else {\n      message.endTime = long_1.default.ZERO;\n    }\n    if (object.delayed !== undefined && object.delayed !== null) {\n      message.delayed = Boolean(object.delayed);\n    } else {\n      message.delayed = false;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.fromAddress !== undefined && (obj.fromAddress = message.fromAddress);\n    message.toAddress !== undefined && (obj.toAddress = message.toAddress);\n    if (message.amount) {\n      obj.amount = message.amount.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.amount = [];\n    }\n    message.endTime !== undefined && (obj.endTime = (message.endTime || long_1.default.ZERO).toString());\n    message.delayed !== undefined && (obj.delayed = message.delayed);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgCreateVestingAccount);\n    message.amount = [];\n    if (object.fromAddress !== undefined && object.fromAddress !== null) {\n      message.fromAddress = object.fromAddress;\n    } else {\n      message.fromAddress = \"\";\n    }\n    if (object.toAddress !== undefined && object.toAddress !== null) {\n      message.toAddress = object.toAddress;\n    } else {\n      message.toAddress = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n    if (object.endTime !== undefined && object.endTime !== null) {\n      message.endTime = object.endTime;\n    } else {\n      message.endTime = long_1.default.ZERO;\n    }\n    if (object.delayed !== undefined && object.delayed !== null) {\n      message.delayed = object.delayed;\n    } else {\n      message.delayed = false;\n    }\n    return message;\n  }\n};\nconst baseMsgCreateVestingAccountResponse = {};\nexports.MsgCreateVestingAccountResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgCreateVestingAccountResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgCreateVestingAccountResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgCreateVestingAccountResponse);\n    return message;\n  }\n};\nconst baseMsgCreatePeriodicVestingAccount = {\n  fromAddress: \"\",\n  toAddress: \"\",\n  startTime: long_1.default.ZERO\n};\nexports.MsgCreatePeriodicVestingAccount = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.fromAddress !== \"\") {\n      writer.uint32(10).string(message.fromAddress);\n    }\n    if (message.toAddress !== \"\") {\n      writer.uint32(18).string(message.toAddress);\n    }\n    if (!message.startTime.isZero()) {\n      writer.uint32(24).int64(message.startTime);\n    }\n    for (const v of message.vestingPeriods) {\n      vesting_1.Period.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgCreatePeriodicVestingAccount);\n    message.vestingPeriods = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.fromAddress = reader.string();\n          break;\n        case 2:\n          message.toAddress = reader.string();\n          break;\n        case 3:\n          message.startTime = reader.int64();\n          break;\n        case 4:\n          message.vestingPeriods.push(vesting_1.Period.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgCreatePeriodicVestingAccount);\n    message.vestingPeriods = [];\n    if (object.fromAddress !== undefined && object.fromAddress !== null) {\n      message.fromAddress = String(object.fromAddress);\n    } else {\n      message.fromAddress = \"\";\n    }\n    if (object.toAddress !== undefined && object.toAddress !== null) {\n      message.toAddress = String(object.toAddress);\n    } else {\n      message.toAddress = \"\";\n    }\n    if (object.startTime !== undefined && object.startTime !== null) {\n      message.startTime = long_1.default.fromString(object.startTime);\n    } else {\n      message.startTime = long_1.default.ZERO;\n    }\n    if (object.vestingPeriods !== undefined && object.vestingPeriods !== null) {\n      for (const e of object.vestingPeriods) {\n        message.vestingPeriods.push(vesting_1.Period.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.fromAddress !== undefined && (obj.fromAddress = message.fromAddress);\n    message.toAddress !== undefined && (obj.toAddress = message.toAddress);\n    message.startTime !== undefined && (obj.startTime = (message.startTime || long_1.default.ZERO).toString());\n    if (message.vestingPeriods) {\n      obj.vestingPeriods = message.vestingPeriods.map(e => e ? vesting_1.Period.toJSON(e) : undefined);\n    } else {\n      obj.vestingPeriods = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgCreatePeriodicVestingAccount);\n    message.vestingPeriods = [];\n    if (object.fromAddress !== undefined && object.fromAddress !== null) {\n      message.fromAddress = object.fromAddress;\n    } else {\n      message.fromAddress = \"\";\n    }\n    if (object.toAddress !== undefined && object.toAddress !== null) {\n      message.toAddress = object.toAddress;\n    } else {\n      message.toAddress = \"\";\n    }\n    if (object.startTime !== undefined && object.startTime !== null) {\n      message.startTime = object.startTime;\n    } else {\n      message.startTime = long_1.default.ZERO;\n    }\n    if (object.vestingPeriods !== undefined && object.vestingPeriods !== null) {\n      for (const e of object.vestingPeriods) {\n        message.vestingPeriods.push(vesting_1.Period.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseMsgCreatePeriodicVestingAccountResponse = {};\nexports.MsgCreatePeriodicVestingAccountResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgCreatePeriodicVestingAccountResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgCreatePeriodicVestingAccountResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgCreatePeriodicVestingAccountResponse);\n    return message;\n  }\n};\nconst baseMsgDonateAllVestingTokens = {\n  fromAddress: \"\"\n};\nexports.MsgDonateAllVestingTokens = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.fromAddress !== \"\") {\n      writer.uint32(10).string(message.fromAddress);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgDonateAllVestingTokens);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.fromAddress = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgDonateAllVestingTokens);\n    if (object.fromAddress !== undefined && object.fromAddress !== null) {\n      message.fromAddress = String(object.fromAddress);\n    } else {\n      message.fromAddress = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.fromAddress !== undefined && (obj.fromAddress = message.fromAddress);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgDonateAllVestingTokens);\n    if (object.fromAddress !== undefined && object.fromAddress !== null) {\n      message.fromAddress = object.fromAddress;\n    } else {\n      message.fromAddress = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgDonateAllVestingTokensResponse = {};\nexports.MsgDonateAllVestingTokensResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgDonateAllVestingTokensResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgDonateAllVestingTokensResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgDonateAllVestingTokensResponse);\n    return message;\n  }\n};\nclass MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.CreateVestingAccount = this.CreateVestingAccount.bind(this);\n    this.CreatePeriodicVestingAccount = this.CreatePeriodicVestingAccount.bind(this);\n    this.DonateAllVestingTokens = this.DonateAllVestingTokens.bind(this);\n  }\n  CreateVestingAccount(request, metadata) {\n    return this.rpc.unary(exports.MsgCreateVestingAccountDesc, exports.MsgCreateVestingAccount.fromPartial(request), metadata);\n  }\n  CreatePeriodicVestingAccount(request, metadata) {\n    return this.rpc.unary(exports.MsgCreatePeriodicVestingAccountDesc, exports.MsgCreatePeriodicVestingAccount.fromPartial(request), metadata);\n  }\n  DonateAllVestingTokens(request, metadata) {\n    return this.rpc.unary(exports.MsgDonateAllVestingTokensDesc, exports.MsgDonateAllVestingTokens.fromPartial(request), metadata);\n  }\n}\nexports.MsgClientImpl = MsgClientImpl;\nexports.MsgDesc = {\n  serviceName: \"cosmos.vesting.v1beta1.Msg\"\n};\nexports.MsgCreateVestingAccountDesc = {\n  methodName: \"CreateVestingAccount\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgCreateVestingAccount.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgCreateVestingAccountResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgCreatePeriodicVestingAccountDesc = {\n  methodName: \"CreatePeriodicVestingAccount\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgCreatePeriodicVestingAccount.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgCreatePeriodicVestingAccountResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgDonateAllVestingTokensDesc = {\n  methodName: \"DonateAllVestingTokens\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgDonateAllVestingTokens.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgDonateAllVestingTokensResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nclass GrpcWebImpl {\n  constructor(host, options) {\n    this.host = host;\n    this.options = options;\n  }\n  unary(methodDesc, _request, metadata) {\n    var _a;\n    const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);\n    const maybeCombinedMetadata = metadata && this.options.metadata ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap)) : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc_web_1.grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc_web_1.grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage);\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        }\n      });\n    });\n  }\n}\nexports.GrpcWebImpl = GrpcWebImpl;\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}