{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nexport function afterify(originalMethod, config) {\n  const resolvedConfig = Object.assign({\n    wait: false\n  }, config);\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const afterFunc = typeof resolvedConfig.func === 'string' ? this[resolvedConfig.func].bind(this) : resolvedConfig.func;\n      if (resolvedConfig.wait) {\n        const response = yield originalMethod.apply(this, args);\n        afterFunc({\n          args,\n          response\n        });\n        return response;\n      }\n      const response = originalMethod.apply(this, args);\n      afterFunc({\n        args,\n        response\n      });\n      return response;\n    });\n  };\n}\n//# sourceMappingURL=afterify.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}