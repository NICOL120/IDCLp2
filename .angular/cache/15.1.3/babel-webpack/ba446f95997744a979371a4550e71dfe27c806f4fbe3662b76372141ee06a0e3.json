{"ast":null,"code":"import { Coin, Coins, MsgExecuteContract, MsgInstantiateContract, MsgMigrateContract, MsgStoreCode, MsgUpdateContractAdmin } from '@terra-money/terra.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../terrajs.service\";\nexport let WasmService = /*#__PURE__*/(() => {\n  class WasmService {\n    constructor(terrajs) {\n      this.terrajs = terrajs;\n    }\n    query(contract, msg) {\n      if (contract) {\n        // console.log(contract, msg);\n        return this.terrajs.lcdClient.wasm.contractQuery(contract, msg);\n      }\n    }\n    storeCode(byteCode) {\n      return this.terrajs.post(new MsgStoreCode(this.terrajs.address, byteCode));\n    }\n    instantiate(codeId, initMsg, label, opts) {\n      return this.terrajs.post(new MsgInstantiateContract(this.terrajs.address, this.terrajs.address, codeId, initMsg, new Coins((opts === null || opts === void 0 ? void 0 : opts.coin) ? [Coin.fromData(opts.coin)] : []), label));\n    }\n    execute(contract, msg, opts) {\n      return this.terrajs.post(new MsgExecuteContract(this.terrajs.address, contract, msg, new Coins((opts === null || opts === void 0 ? void 0 : opts.coin) ? [Coin.fromData(opts.coin)] : [])));\n    }\n    migrate(contract, newCodeId, migrateMsg) {\n      return this.terrajs.post(new MsgMigrateContract(this.terrajs.address, contract, newCodeId, migrateMsg));\n    }\n    updateOwner(contract, newOwner) {\n      return this.terrajs.post(new MsgUpdateContractAdmin(this.terrajs.address, newOwner, contract));\n    }\n  }\n  WasmService.ɵfac = function WasmService_Factory(t) {\n    return new (t || WasmService)(i0.ɵɵinject(i1.TerrajsService));\n  };\n  WasmService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WasmService,\n    factory: WasmService.ɵfac,\n    providedIn: 'root'\n  });\n  return WasmService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}