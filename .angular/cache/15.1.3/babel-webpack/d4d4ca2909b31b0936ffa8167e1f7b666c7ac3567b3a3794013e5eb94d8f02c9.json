{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { sleep } from '../common/utils/utils';\nfunction getRetriesArray(input) {\n  if (Array.isArray(input)) {\n    return input;\n  }\n  if (!Number.isNaN(input) && Number.isInteger(input)) {\n    return Array(input).fill(1).map(() => 1000);\n  }\n  if (typeof input === 'object') {\n    const config = input;\n    if (config.retries && config.delaysArray) {\n      throw new Error('You can not provide both retries and delaysArray');\n    }\n    if (config.delaysArray) {\n      return config.delaysArray;\n    }\n    return Array(input.retries).fill(1).map(() => {\n      var _a;\n      return (_a = input.delay) !== null && _a !== void 0 ? _a : 1000;\n    });\n  }\n  throw new Error('invalid input');\n}\nfunction getOnRetry(input, context) {\n  if (typeof input === 'object') {\n    if (typeof input.onRetry === 'string') {\n      return context[input.onRetry].bind(context);\n    }\n    return input.onRetry;\n  }\n  return undefined;\n}\nfunction exec(originalMethod, args, retriesArr, callsMadeSoFar, onRetry) {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      const res = yield originalMethod.apply(this, args);\n      return res;\n    } catch (e) {\n      if (callsMadeSoFar < retriesArr.length) {\n        if (onRetry) {\n          onRetry(e, callsMadeSoFar);\n        }\n        yield sleep(retriesArr[callsMadeSoFar]);\n        return exec(originalMethod, args, retriesArr, callsMadeSoFar + 1, onRetry);\n      }\n      throw e;\n    }\n  });\n}\nexport function retryfy(originalMethod, input) {\n  const retriesArray = getRetriesArray(input);\n  return function (...args) {\n    const onRetry = getOnRetry(input, this);\n    return exec(originalMethod.bind(this), args, retriesArray, 0, onRetry);\n  };\n}\n//# sourceMappingURL=retryfy.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}