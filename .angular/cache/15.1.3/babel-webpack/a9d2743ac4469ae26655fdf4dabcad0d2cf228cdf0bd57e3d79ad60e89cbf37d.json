{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GrpcWebImpl = exports.MsgTransferDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgTransferResponse = exports.MsgTransfer = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst coin_1 = require(\"../../../../cosmos/base/v1beta1/coin\");\nconst client_1 = require(\"../../../../ibc/core/client/v1/client\");\nconst browser_headers_1 = require(\"browser-headers\");\nexports.protobufPackage = \"ibc.applications.transfer.v1\";\nconst baseMsgTransfer = {\n  sourcePort: \"\",\n  sourceChannel: \"\",\n  sender: \"\",\n  receiver: \"\",\n  timeoutTimestamp: long_1.default.UZERO\n};\nexports.MsgTransfer = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.sourcePort !== \"\") {\n      writer.uint32(10).string(message.sourcePort);\n    }\n    if (message.sourceChannel !== \"\") {\n      writer.uint32(18).string(message.sourceChannel);\n    }\n    if (message.token !== undefined) {\n      coin_1.Coin.encode(message.token, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.sender !== \"\") {\n      writer.uint32(34).string(message.sender);\n    }\n    if (message.receiver !== \"\") {\n      writer.uint32(42).string(message.receiver);\n    }\n    if (message.timeoutHeight !== undefined) {\n      client_1.Height.encode(message.timeoutHeight, writer.uint32(50).fork()).ldelim();\n    }\n    if (!message.timeoutTimestamp.isZero()) {\n      writer.uint32(56).uint64(message.timeoutTimestamp);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgTransfer);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sourcePort = reader.string();\n          break;\n        case 2:\n          message.sourceChannel = reader.string();\n          break;\n        case 3:\n          message.token = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.sender = reader.string();\n          break;\n        case 5:\n          message.receiver = reader.string();\n          break;\n        case 6:\n          message.timeoutHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.timeoutTimestamp = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgTransfer);\n    if (object.sourcePort !== undefined && object.sourcePort !== null) {\n      message.sourcePort = String(object.sourcePort);\n    } else {\n      message.sourcePort = \"\";\n    }\n    if (object.sourceChannel !== undefined && object.sourceChannel !== null) {\n      message.sourceChannel = String(object.sourceChannel);\n    } else {\n      message.sourceChannel = \"\";\n    }\n    if (object.token !== undefined && object.token !== null) {\n      message.token = coin_1.Coin.fromJSON(object.token);\n    } else {\n      message.token = undefined;\n    }\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n    if (object.receiver !== undefined && object.receiver !== null) {\n      message.receiver = String(object.receiver);\n    } else {\n      message.receiver = \"\";\n    }\n    if (object.timeoutHeight !== undefined && object.timeoutHeight !== null) {\n      message.timeoutHeight = client_1.Height.fromJSON(object.timeoutHeight);\n    } else {\n      message.timeoutHeight = undefined;\n    }\n    if (object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null) {\n      message.timeoutTimestamp = long_1.default.fromString(object.timeoutTimestamp);\n    } else {\n      message.timeoutTimestamp = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.sourcePort !== undefined && (obj.sourcePort = message.sourcePort);\n    message.sourceChannel !== undefined && (obj.sourceChannel = message.sourceChannel);\n    message.token !== undefined && (obj.token = message.token ? coin_1.Coin.toJSON(message.token) : undefined);\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.receiver !== undefined && (obj.receiver = message.receiver);\n    message.timeoutHeight !== undefined && (obj.timeoutHeight = message.timeoutHeight ? client_1.Height.toJSON(message.timeoutHeight) : undefined);\n    message.timeoutTimestamp !== undefined && (obj.timeoutTimestamp = (message.timeoutTimestamp || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgTransfer);\n    if (object.sourcePort !== undefined && object.sourcePort !== null) {\n      message.sourcePort = object.sourcePort;\n    } else {\n      message.sourcePort = \"\";\n    }\n    if (object.sourceChannel !== undefined && object.sourceChannel !== null) {\n      message.sourceChannel = object.sourceChannel;\n    } else {\n      message.sourceChannel = \"\";\n    }\n    if (object.token !== undefined && object.token !== null) {\n      message.token = coin_1.Coin.fromPartial(object.token);\n    } else {\n      message.token = undefined;\n    }\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n    if (object.receiver !== undefined && object.receiver !== null) {\n      message.receiver = object.receiver;\n    } else {\n      message.receiver = \"\";\n    }\n    if (object.timeoutHeight !== undefined && object.timeoutHeight !== null) {\n      message.timeoutHeight = client_1.Height.fromPartial(object.timeoutHeight);\n    } else {\n      message.timeoutHeight = undefined;\n    }\n    if (object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null) {\n      message.timeoutTimestamp = object.timeoutTimestamp;\n    } else {\n      message.timeoutTimestamp = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst baseMsgTransferResponse = {};\nexports.MsgTransferResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgTransferResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgTransferResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgTransferResponse);\n    return message;\n  }\n};\nclass MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.Transfer = this.Transfer.bind(this);\n  }\n  Transfer(request, metadata) {\n    return this.rpc.unary(exports.MsgTransferDesc, exports.MsgTransfer.fromPartial(request), metadata);\n  }\n}\nexports.MsgClientImpl = MsgClientImpl;\nexports.MsgDesc = {\n  serviceName: \"ibc.applications.transfer.v1.Msg\"\n};\nexports.MsgTransferDesc = {\n  methodName: \"Transfer\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgTransfer.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgTransferResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nclass GrpcWebImpl {\n  constructor(host, options) {\n    this.host = host;\n    this.options = options;\n  }\n  unary(methodDesc, _request, metadata) {\n    var _a;\n    const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);\n    const maybeCombinedMetadata = metadata && this.options.metadata ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap)) : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc_web_1.grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc_web_1.grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage);\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        }\n      });\n    });\n  }\n}\nexports.GrpcWebImpl = GrpcWebImpl;\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}