{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgAggregateExchangeRateVote = exports.aggregateVoteHash = void 0;\nvar SHA256_1 = require(\"jscrypto/SHA256\");\nvar json_1 = require(\"../../../util/json\");\nvar MsgAggregateExchangeRatePrevote_1 = require(\"./MsgAggregateExchangeRatePrevote\");\nvar Coins_1 = require(\"../../Coins\");\nvar any_1 = require(\"@terra-money/legacy.proto/google/protobuf/any\");\nvar tx_1 = require(\"@terra-money/legacy.proto/terra/oracle/v1beta1/tx\");\n/**\n * Calculates the aggregate vote hash\n * @param exchangeRates exchange rates\n * @param salt salt\n * @param validator validator operator address\n */\nfunction aggregateVoteHash(exchangeRates, salt, validator) {\n  var payload = \"\".concat(salt, \":\").concat(exchangeRates.toDecCoins().toString(), \":\").concat(validator);\n  return SHA256_1.SHA256.hash(payload).toString().substring(0, 40);\n}\nexports.aggregateVoteHash = aggregateVoteHash;\n/**\n * Aggregate analog of MsgExchangeRateVote: submits an oracle vote for multiple denominations\n * through a single message rather than multiple messages.\n */\nvar MsgAggregateExchangeRateVote = /** @class */function (_super) {\n  __extends(MsgAggregateExchangeRateVote, _super);\n  /**\n   * @param exchange_rate exchange rates\n   * @param salt salt\n   * @param feeder feeder address\n   * @param validator validator operator address\n   */\n  function MsgAggregateExchangeRateVote(exchange_rates, salt, feeder, validator) {\n    var _this = _super.call(this) || this;\n    _this.salt = salt;\n    _this.feeder = feeder;\n    _this.validator = validator;\n    _this.exchange_rates = new Coins_1.Coins(exchange_rates).toDecCoins();\n    return _this;\n  }\n  MsgAggregateExchangeRateVote.fromAmino = function (data, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = data.value,\n      exchange_rates = _a.exchange_rates,\n      salt = _a.salt,\n      feeder = _a.feeder,\n      validator = _a.validator;\n    var xrs = Coins_1.Coins.fromString(exchange_rates);\n    return new MsgAggregateExchangeRateVote(xrs, salt, feeder, validator);\n  };\n  MsgAggregateExchangeRateVote.prototype.toAmino = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      exchange_rates = _a.exchange_rates,\n      salt = _a.salt,\n      feeder = _a.feeder,\n      validator = _a.validator;\n    return {\n      type: 'oracle/MsgAggregateExchangeRateVote',\n      value: {\n        exchange_rates: exchange_rates.toDecCoins().toString(),\n        salt: salt,\n        feeder: feeder,\n        validator: validator\n      }\n    };\n  };\n  MsgAggregateExchangeRateVote.fromData = function (proto, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var exchange_rates = proto.exchange_rates,\n      salt = proto.salt,\n      feeder = proto.feeder,\n      validator = proto.validator;\n    var xrs = Coins_1.Coins.fromString(exchange_rates);\n    return new MsgAggregateExchangeRateVote(xrs, salt, feeder, validator);\n  };\n  MsgAggregateExchangeRateVote.prototype.toData = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      exchange_rates = _a.exchange_rates,\n      salt = _a.salt,\n      feeder = _a.feeder,\n      validator = _a.validator;\n    return {\n      '@type': '/terra.oracle.v1beta1.MsgAggregateExchangeRateVote',\n      exchange_rates: exchange_rates.toDecCoins().toString(),\n      salt: salt,\n      feeder: feeder,\n      validator: validator\n    };\n  };\n  MsgAggregateExchangeRateVote.fromProto = function (proto, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var xrs = Coins_1.Coins.fromString(proto.exchangeRates);\n    return new MsgAggregateExchangeRateVote(xrs, proto.salt, proto.feeder, proto.validator);\n  };\n  MsgAggregateExchangeRateVote.prototype.toProto = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      exchange_rates = _a.exchange_rates,\n      salt = _a.salt,\n      feeder = _a.feeder,\n      validator = _a.validator;\n    return tx_1.MsgAggregateExchangeRateVote.fromPartial({\n      exchangeRates: exchange_rates.toString(),\n      feeder: feeder,\n      salt: salt,\n      validator: validator\n    });\n  };\n  /**\n   * Gets the aggregate vote hash for the MsgAggregateExchangeRateVote, for the creation of\n   *  the corresponding prevote message.\n   */\n  MsgAggregateExchangeRateVote.prototype.getAggregateVoteHash = function () {\n    return aggregateVoteHash(this.exchange_rates, this.salt, this.validator);\n  };\n  /**\n   * You can generate the corresponding aggregate prevote message.\n   * This will return a [[MsgAggregateExchangeRatePrevote]] with the proper vote hash and values,\n   * determined by the current attributes of the object.\n   *\n   * @returns the corresponding prevote message to send\n   */\n  MsgAggregateExchangeRateVote.prototype.getPrevote = function () {\n    return new MsgAggregateExchangeRatePrevote_1.MsgAggregateExchangeRatePrevote(this.getAggregateVoteHash(), this.feeder, this.validator);\n  };\n  MsgAggregateExchangeRateVote.prototype.packAny = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return any_1.Any.fromPartial({\n      typeUrl: '/terra.oracle.v1beta1.MsgAggregateExchangeRateVote',\n      value: tx_1.MsgAggregateExchangeRateVote.encode(this.toProto(isClassic)).finish()\n    });\n  };\n  MsgAggregateExchangeRateVote.unpackAny = function (msgAny, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return MsgAggregateExchangeRateVote.fromProto(tx_1.MsgAggregateExchangeRateVote.decode(msgAny.value), isClassic);\n  };\n  return MsgAggregateExchangeRateVote;\n}(json_1.JSONSerializable);\nexports.MsgAggregateExchangeRateVote = MsgAggregateExchangeRateVote;\n//# sourceMappingURL=MsgAggregateExchangeRateVote.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}