{"ast":null,"code":"import { fromBase64 } from '../libs/base64';\nexport class QueryBundler {\n  constructor(wasm, maxSize = 10) {\n    this.wasm = wasm;\n    this.maxSize = maxSize;\n    this.queries = [];\n  }\n  query(addr, msg) {\n    return this.wasm.query(addr, msg);\n    // TODO until there is querier deployed\n    // return new Promise((ok, ko) => {\n    //   this.queries.push({\n    //     query: { addr, msg: toBase64(msg) },\n    //     ok,\n    //     ko\n    //   });\n    //   if (this.queries.length >= this.maxSize) {\n    //     this.flush();\n    //   }\n    // });\n  }\n\n  flush() {\n    if (!this.queries.length) {\n      return;\n    }\n    const tasks = this.queries;\n    this.queries = [];\n    this.wasm.query(this.wasm.terrajs.settings.querier, {\n      bundle: {\n        queries: tasks.map(it => it.query)\n      }\n    }).then(results => {\n      if (tasks.length !== results.length) {\n        throw new Error('result not match');\n      }\n      for (let i = 0; i < results.length; i++) {\n        const result = results[i];\n        const task = tasks[i];\n        const str = fromBase64(result);\n        if (false) {\n          // for debug\n          console.log(task.query.addr, fromBase64(task.query.msg), str);\n        }\n        task.ok(str);\n      }\n    }).catch(ex => {\n      for (const task of tasks) {\n        task.ko(ex);\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}