{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GrpcWebImpl = exports.MsgDepositDesc = exports.MsgVoteWeightedDesc = exports.MsgVoteDesc = exports.MsgSubmitProposalDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgDepositResponse = exports.MsgDeposit = exports.MsgVoteWeightedResponse = exports.MsgVoteWeighted = exports.MsgVoteResponse = exports.MsgVote = exports.MsgSubmitProposalResponse = exports.MsgSubmitProposal = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst any_1 = require(\"../../../google/protobuf/any\");\nconst gov_1 = require(\"../../../cosmos/gov/v1beta1/gov\");\nconst browser_headers_1 = require(\"browser-headers\");\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nexports.protobufPackage = \"cosmos.gov.v1beta1\";\nconst baseMsgSubmitProposal = {\n  proposer: \"\"\n};\nexports.MsgSubmitProposal = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.content !== undefined) {\n      any_1.Any.encode(message.content, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.initialDeposit) {\n      coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.proposer !== \"\") {\n      writer.uint32(26).string(message.proposer);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgSubmitProposal);\n    message.initialDeposit = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.content = any_1.Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.initialDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n        case 3:\n          message.proposer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgSubmitProposal);\n    message.initialDeposit = [];\n    if (object.content !== undefined && object.content !== null) {\n      message.content = any_1.Any.fromJSON(object.content);\n    } else {\n      message.content = undefined;\n    }\n    if (object.initialDeposit !== undefined && object.initialDeposit !== null) {\n      for (const e of object.initialDeposit) {\n        message.initialDeposit.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n    if (object.proposer !== undefined && object.proposer !== null) {\n      message.proposer = String(object.proposer);\n    } else {\n      message.proposer = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.content !== undefined && (obj.content = message.content ? any_1.Any.toJSON(message.content) : undefined);\n    if (message.initialDeposit) {\n      obj.initialDeposit = message.initialDeposit.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.initialDeposit = [];\n    }\n    message.proposer !== undefined && (obj.proposer = message.proposer);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgSubmitProposal);\n    message.initialDeposit = [];\n    if (object.content !== undefined && object.content !== null) {\n      message.content = any_1.Any.fromPartial(object.content);\n    } else {\n      message.content = undefined;\n    }\n    if (object.initialDeposit !== undefined && object.initialDeposit !== null) {\n      for (const e of object.initialDeposit) {\n        message.initialDeposit.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n    if (object.proposer !== undefined && object.proposer !== null) {\n      message.proposer = object.proposer;\n    } else {\n      message.proposer = \"\";\n    }\n    return message;\n  }\n};\nconst baseMsgSubmitProposalResponse = {\n  proposalId: long_1.default.UZERO\n};\nexports.MsgSubmitProposalResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgSubmitProposalResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgSubmitProposalResponse);\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = long_1.default.fromString(object.proposalId);\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.proposalId !== undefined && (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgSubmitProposalResponse);\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = object.proposalId;\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst baseMsgVote = {\n  proposalId: long_1.default.UZERO,\n  voter: \"\",\n  option: 0\n};\nexports.MsgVote = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.voter !== \"\") {\n      writer.uint32(18).string(message.voter);\n    }\n    if (message.option !== 0) {\n      writer.uint32(24).int32(message.option);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgVote);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64();\n          break;\n        case 2:\n          message.voter = reader.string();\n          break;\n        case 3:\n          message.option = reader.int32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgVote);\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = long_1.default.fromString(object.proposalId);\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.voter !== undefined && object.voter !== null) {\n      message.voter = String(object.voter);\n    } else {\n      message.voter = \"\";\n    }\n    if (object.option !== undefined && object.option !== null) {\n      message.option = gov_1.voteOptionFromJSON(object.option);\n    } else {\n      message.option = 0;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.proposalId !== undefined && (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());\n    message.voter !== undefined && (obj.voter = message.voter);\n    message.option !== undefined && (obj.option = gov_1.voteOptionToJSON(message.option));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgVote);\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = object.proposalId;\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.voter !== undefined && object.voter !== null) {\n      message.voter = object.voter;\n    } else {\n      message.voter = \"\";\n    }\n    if (object.option !== undefined && object.option !== null) {\n      message.option = object.option;\n    } else {\n      message.option = 0;\n    }\n    return message;\n  }\n};\nconst baseMsgVoteResponse = {};\nexports.MsgVoteResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgVoteResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgVoteResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgVoteResponse);\n    return message;\n  }\n};\nconst baseMsgVoteWeighted = {\n  proposalId: long_1.default.UZERO,\n  voter: \"\"\n};\nexports.MsgVoteWeighted = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.voter !== \"\") {\n      writer.uint32(18).string(message.voter);\n    }\n    for (const v of message.options) {\n      gov_1.WeightedVoteOption.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgVoteWeighted);\n    message.options = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64();\n          break;\n        case 2:\n          message.voter = reader.string();\n          break;\n        case 3:\n          message.options.push(gov_1.WeightedVoteOption.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgVoteWeighted);\n    message.options = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = long_1.default.fromString(object.proposalId);\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.voter !== undefined && object.voter !== null) {\n      message.voter = String(object.voter);\n    } else {\n      message.voter = \"\";\n    }\n    if (object.options !== undefined && object.options !== null) {\n      for (const e of object.options) {\n        message.options.push(gov_1.WeightedVoteOption.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.proposalId !== undefined && (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());\n    message.voter !== undefined && (obj.voter = message.voter);\n    if (message.options) {\n      obj.options = message.options.map(e => e ? gov_1.WeightedVoteOption.toJSON(e) : undefined);\n    } else {\n      obj.options = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgVoteWeighted);\n    message.options = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = object.proposalId;\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.voter !== undefined && object.voter !== null) {\n      message.voter = object.voter;\n    } else {\n      message.voter = \"\";\n    }\n    if (object.options !== undefined && object.options !== null) {\n      for (const e of object.options) {\n        message.options.push(gov_1.WeightedVoteOption.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseMsgVoteWeightedResponse = {};\nexports.MsgVoteWeightedResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgVoteWeightedResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgVoteWeightedResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgVoteWeightedResponse);\n    return message;\n  }\n};\nconst baseMsgDeposit = {\n  proposalId: long_1.default.UZERO,\n  depositor: \"\"\n};\nexports.MsgDeposit = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.depositor !== \"\") {\n      writer.uint32(18).string(message.depositor);\n    }\n    for (const v of message.amount) {\n      coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgDeposit);\n    message.amount = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64();\n          break;\n        case 2:\n          message.depositor = reader.string();\n          break;\n        case 3:\n          message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgDeposit);\n    message.amount = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = long_1.default.fromString(object.proposalId);\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.depositor !== undefined && object.depositor !== null) {\n      message.depositor = String(object.depositor);\n    } else {\n      message.depositor = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.proposalId !== undefined && (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());\n    message.depositor !== undefined && (obj.depositor = message.depositor);\n    if (message.amount) {\n      obj.amount = message.amount.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.amount = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgDeposit);\n    message.amount = [];\n    if (object.proposalId !== undefined && object.proposalId !== null) {\n      message.proposalId = object.proposalId;\n    } else {\n      message.proposalId = long_1.default.UZERO;\n    }\n    if (object.depositor !== undefined && object.depositor !== null) {\n      message.depositor = object.depositor;\n    } else {\n      message.depositor = \"\";\n    }\n    if (object.amount !== undefined && object.amount !== null) {\n      for (const e of object.amount) {\n        message.amount.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseMsgDepositResponse = {};\nexports.MsgDepositResponse = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgDepositResponse);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgDepositResponse);\n    return message;\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgDepositResponse);\n    return message;\n  }\n};\nclass MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.SubmitProposal = this.SubmitProposal.bind(this);\n    this.Vote = this.Vote.bind(this);\n    this.VoteWeighted = this.VoteWeighted.bind(this);\n    this.Deposit = this.Deposit.bind(this);\n  }\n  SubmitProposal(request, metadata) {\n    return this.rpc.unary(exports.MsgSubmitProposalDesc, exports.MsgSubmitProposal.fromPartial(request), metadata);\n  }\n  Vote(request, metadata) {\n    return this.rpc.unary(exports.MsgVoteDesc, exports.MsgVote.fromPartial(request), metadata);\n  }\n  VoteWeighted(request, metadata) {\n    return this.rpc.unary(exports.MsgVoteWeightedDesc, exports.MsgVoteWeighted.fromPartial(request), metadata);\n  }\n  Deposit(request, metadata) {\n    return this.rpc.unary(exports.MsgDepositDesc, exports.MsgDeposit.fromPartial(request), metadata);\n  }\n}\nexports.MsgClientImpl = MsgClientImpl;\nexports.MsgDesc = {\n  serviceName: \"cosmos.gov.v1beta1.Msg\"\n};\nexports.MsgSubmitProposalDesc = {\n  methodName: \"SubmitProposal\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgSubmitProposal.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgSubmitProposalResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgVoteDesc = {\n  methodName: \"Vote\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgVote.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgVoteResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgVoteWeightedDesc = {\n  methodName: \"VoteWeighted\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgVoteWeighted.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgVoteWeightedResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nexports.MsgDepositDesc = {\n  methodName: \"Deposit\",\n  service: exports.MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return exports.MsgDeposit.encode(this).finish();\n    }\n  },\n  responseType: {\n    deserializeBinary(data) {\n      return Object.assign(Object.assign({}, exports.MsgDepositResponse.decode(data)), {\n        toObject() {\n          return this;\n        }\n      });\n    }\n  }\n};\nclass GrpcWebImpl {\n  constructor(host, options) {\n    this.host = host;\n    this.options = options;\n  }\n  unary(methodDesc, _request, metadata) {\n    var _a;\n    const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);\n    const maybeCombinedMetadata = metadata && this.options.metadata ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap)) : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc_web_1.grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc_web_1.grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage);\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        }\n      });\n    });\n  }\n}\nexports.GrpcWebImpl = GrpcWebImpl;\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}