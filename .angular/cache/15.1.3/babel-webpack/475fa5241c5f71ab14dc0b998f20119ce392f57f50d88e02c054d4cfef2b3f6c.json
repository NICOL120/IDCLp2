{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport let DigitComponent = /*#__PURE__*/(() => {\n  class DigitComponent {\n    constructor() {\n      this.format = '1.2-2';\n      this.duration = 1000;\n      this.runningValue = 0;\n    }\n    counterFunc(endValue, durationMs) {\n      const stepCount = Math.abs(durationMs / 12);\n      const valueIncrement = (endValue - this.runningValue) / stepCount;\n      const sinValueIncrement = Math.PI / stepCount;\n      let currentValue = this.runningValue;\n      let currentSinValue = 0;\n      const step = () => {\n        currentSinValue += sinValueIncrement;\n        currentValue += valueIncrement * Math.pow(Math.sin(currentSinValue), 2) * 2;\n        this.runningValue = currentValue;\n        if (currentSinValue < Math.PI) {\n          window.requestAnimationFrame(step);\n        } else {\n          this.runningValue = this.value;\n        }\n      };\n      step();\n    }\n    ngAfterContentInit() {\n      if (this.value) {\n        if (document.hidden) {\n          this.runningValue = this.value;\n        } else {\n          this.counterFunc(this.value, this.duration);\n        }\n      }\n    }\n    ngOnChanges(changes) {\n      if (changes['value']) {\n        if (document.hidden) {\n          this.runningValue = this.value;\n        } else {\n          this.counterFunc(this.value, this.duration);\n        }\n      }\n    }\n  }\n  DigitComponent.ɵfac = function DigitComponent_Factory(t) {\n    return new (t || DigitComponent)();\n  };\n  DigitComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DigitComponent,\n    selectors: [[\"app-digit\"]],\n    inputs: {\n      value: \"value\",\n      format: \"format\",\n      duration: \"duration\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 4,\n    template: function DigitComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\");\n        i0.ɵɵtext(1);\n        i0.ɵɵpipe(2, \"number\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(2, 1, ctx.runningValue, ctx.format));\n      }\n    },\n    dependencies: [i1.DecimalPipe]\n  });\n  return DigitComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}