{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Acknowledgement = exports.PacketId = exports.PacketState = exports.Packet = exports.Counterparty = exports.IdentifiedChannel = exports.Channel = exports.orderToJSON = exports.orderFromJSON = exports.Order = exports.stateToJSON = exports.stateFromJSON = exports.State = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst client_1 = require(\"../../../../ibc/core/client/v1/client\");\nexports.protobufPackage = \"ibc.core.channel.v1\";\n/**\n * State defines if a channel is in one of the following states:\n * CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.\n */\nvar State;\n(function (State) {\n  /** STATE_UNINITIALIZED_UNSPECIFIED - Default State */\n  State[State[\"STATE_UNINITIALIZED_UNSPECIFIED\"] = 0] = \"STATE_UNINITIALIZED_UNSPECIFIED\";\n  /** STATE_INIT - A channel has just started the opening handshake. */\n  State[State[\"STATE_INIT\"] = 1] = \"STATE_INIT\";\n  /** STATE_TRYOPEN - A channel has acknowledged the handshake step on the counterparty chain. */\n  State[State[\"STATE_TRYOPEN\"] = 2] = \"STATE_TRYOPEN\";\n  /**\n   * STATE_OPEN - A channel has completed the handshake. Open channels are\n   * ready to send and receive packets.\n   */\n  State[State[\"STATE_OPEN\"] = 3] = \"STATE_OPEN\";\n  /**\n   * STATE_CLOSED - A channel has been closed and can no longer be used to send or receive\n   * packets.\n   */\n  State[State[\"STATE_CLOSED\"] = 4] = \"STATE_CLOSED\";\n  State[State[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(State = exports.State || (exports.State = {}));\nfunction stateFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"STATE_UNINITIALIZED_UNSPECIFIED\":\n      return State.STATE_UNINITIALIZED_UNSPECIFIED;\n    case 1:\n    case \"STATE_INIT\":\n      return State.STATE_INIT;\n    case 2:\n    case \"STATE_TRYOPEN\":\n      return State.STATE_TRYOPEN;\n    case 3:\n    case \"STATE_OPEN\":\n      return State.STATE_OPEN;\n    case 4:\n    case \"STATE_CLOSED\":\n      return State.STATE_CLOSED;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return State.UNRECOGNIZED;\n  }\n}\nexports.stateFromJSON = stateFromJSON;\nfunction stateToJSON(object) {\n  switch (object) {\n    case State.STATE_UNINITIALIZED_UNSPECIFIED:\n      return \"STATE_UNINITIALIZED_UNSPECIFIED\";\n    case State.STATE_INIT:\n      return \"STATE_INIT\";\n    case State.STATE_TRYOPEN:\n      return \"STATE_TRYOPEN\";\n    case State.STATE_OPEN:\n      return \"STATE_OPEN\";\n    case State.STATE_CLOSED:\n      return \"STATE_CLOSED\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.stateToJSON = stateToJSON;\n/** Order defines if a channel is ORDERED or UNORDERED */\nvar Order;\n(function (Order) {\n  /** ORDER_NONE_UNSPECIFIED - zero-value for channel ordering */\n  Order[Order[\"ORDER_NONE_UNSPECIFIED\"] = 0] = \"ORDER_NONE_UNSPECIFIED\";\n  /**\n   * ORDER_UNORDERED - packets can be delivered in any order, which may differ from the order in\n   * which they were sent.\n   */\n  Order[Order[\"ORDER_UNORDERED\"] = 1] = \"ORDER_UNORDERED\";\n  /** ORDER_ORDERED - packets are delivered exactly in the order which they were sent */\n  Order[Order[\"ORDER_ORDERED\"] = 2] = \"ORDER_ORDERED\";\n  Order[Order[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Order = exports.Order || (exports.Order = {}));\nfunction orderFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"ORDER_NONE_UNSPECIFIED\":\n      return Order.ORDER_NONE_UNSPECIFIED;\n    case 1:\n    case \"ORDER_UNORDERED\":\n      return Order.ORDER_UNORDERED;\n    case 2:\n    case \"ORDER_ORDERED\":\n      return Order.ORDER_ORDERED;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return Order.UNRECOGNIZED;\n  }\n}\nexports.orderFromJSON = orderFromJSON;\nfunction orderToJSON(object) {\n  switch (object) {\n    case Order.ORDER_NONE_UNSPECIFIED:\n      return \"ORDER_NONE_UNSPECIFIED\";\n    case Order.ORDER_UNORDERED:\n      return \"ORDER_UNORDERED\";\n    case Order.ORDER_ORDERED:\n      return \"ORDER_ORDERED\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.orderToJSON = orderToJSON;\nconst baseChannel = {\n  state: 0,\n  ordering: 0,\n  connectionHops: \"\",\n  version: \"\"\n};\nexports.Channel = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.state !== 0) {\n      writer.uint32(8).int32(message.state);\n    }\n    if (message.ordering !== 0) {\n      writer.uint32(16).int32(message.ordering);\n    }\n    if (message.counterparty !== undefined) {\n      exports.Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();\n    }\n    for (const v of message.connectionHops) {\n      writer.uint32(34).string(v);\n    }\n    if (message.version !== \"\") {\n      writer.uint32(42).string(message.version);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseChannel);\n    message.connectionHops = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.state = reader.int32();\n          break;\n        case 2:\n          message.ordering = reader.int32();\n          break;\n        case 3:\n          message.counterparty = exports.Counterparty.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.connectionHops.push(reader.string());\n          break;\n        case 5:\n          message.version = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseChannel);\n    message.connectionHops = [];\n    if (object.state !== undefined && object.state !== null) {\n      message.state = stateFromJSON(object.state);\n    } else {\n      message.state = 0;\n    }\n    if (object.ordering !== undefined && object.ordering !== null) {\n      message.ordering = orderFromJSON(object.ordering);\n    } else {\n      message.ordering = 0;\n    }\n    if (object.counterparty !== undefined && object.counterparty !== null) {\n      message.counterparty = exports.Counterparty.fromJSON(object.counterparty);\n    } else {\n      message.counterparty = undefined;\n    }\n    if (object.connectionHops !== undefined && object.connectionHops !== null) {\n      for (const e of object.connectionHops) {\n        message.connectionHops.push(String(e));\n      }\n    }\n    if (object.version !== undefined && object.version !== null) {\n      message.version = String(object.version);\n    } else {\n      message.version = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.state !== undefined && (obj.state = stateToJSON(message.state));\n    message.ordering !== undefined && (obj.ordering = orderToJSON(message.ordering));\n    message.counterparty !== undefined && (obj.counterparty = message.counterparty ? exports.Counterparty.toJSON(message.counterparty) : undefined);\n    if (message.connectionHops) {\n      obj.connectionHops = message.connectionHops.map(e => e);\n    } else {\n      obj.connectionHops = [];\n    }\n    message.version !== undefined && (obj.version = message.version);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseChannel);\n    message.connectionHops = [];\n    if (object.state !== undefined && object.state !== null) {\n      message.state = object.state;\n    } else {\n      message.state = 0;\n    }\n    if (object.ordering !== undefined && object.ordering !== null) {\n      message.ordering = object.ordering;\n    } else {\n      message.ordering = 0;\n    }\n    if (object.counterparty !== undefined && object.counterparty !== null) {\n      message.counterparty = exports.Counterparty.fromPartial(object.counterparty);\n    } else {\n      message.counterparty = undefined;\n    }\n    if (object.connectionHops !== undefined && object.connectionHops !== null) {\n      for (const e of object.connectionHops) {\n        message.connectionHops.push(e);\n      }\n    }\n    if (object.version !== undefined && object.version !== null) {\n      message.version = object.version;\n    } else {\n      message.version = \"\";\n    }\n    return message;\n  }\n};\nconst baseIdentifiedChannel = {\n  state: 0,\n  ordering: 0,\n  connectionHops: \"\",\n  version: \"\",\n  portId: \"\",\n  channelId: \"\"\n};\nexports.IdentifiedChannel = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.state !== 0) {\n      writer.uint32(8).int32(message.state);\n    }\n    if (message.ordering !== 0) {\n      writer.uint32(16).int32(message.ordering);\n    }\n    if (message.counterparty !== undefined) {\n      exports.Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();\n    }\n    for (const v of message.connectionHops) {\n      writer.uint32(34).string(v);\n    }\n    if (message.version !== \"\") {\n      writer.uint32(42).string(message.version);\n    }\n    if (message.portId !== \"\") {\n      writer.uint32(50).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(58).string(message.channelId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseIdentifiedChannel);\n    message.connectionHops = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.state = reader.int32();\n          break;\n        case 2:\n          message.ordering = reader.int32();\n          break;\n        case 3:\n          message.counterparty = exports.Counterparty.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.connectionHops.push(reader.string());\n          break;\n        case 5:\n          message.version = reader.string();\n          break;\n        case 6:\n          message.portId = reader.string();\n          break;\n        case 7:\n          message.channelId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseIdentifiedChannel);\n    message.connectionHops = [];\n    if (object.state !== undefined && object.state !== null) {\n      message.state = stateFromJSON(object.state);\n    } else {\n      message.state = 0;\n    }\n    if (object.ordering !== undefined && object.ordering !== null) {\n      message.ordering = orderFromJSON(object.ordering);\n    } else {\n      message.ordering = 0;\n    }\n    if (object.counterparty !== undefined && object.counterparty !== null) {\n      message.counterparty = exports.Counterparty.fromJSON(object.counterparty);\n    } else {\n      message.counterparty = undefined;\n    }\n    if (object.connectionHops !== undefined && object.connectionHops !== null) {\n      for (const e of object.connectionHops) {\n        message.connectionHops.push(String(e));\n      }\n    }\n    if (object.version !== undefined && object.version !== null) {\n      message.version = String(object.version);\n    } else {\n      message.version = \"\";\n    }\n    if (object.portId !== undefined && object.portId !== null) {\n      message.portId = String(object.portId);\n    } else {\n      message.portId = \"\";\n    }\n    if (object.channelId !== undefined && object.channelId !== null) {\n      message.channelId = String(object.channelId);\n    } else {\n      message.channelId = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.state !== undefined && (obj.state = stateToJSON(message.state));\n    message.ordering !== undefined && (obj.ordering = orderToJSON(message.ordering));\n    message.counterparty !== undefined && (obj.counterparty = message.counterparty ? exports.Counterparty.toJSON(message.counterparty) : undefined);\n    if (message.connectionHops) {\n      obj.connectionHops = message.connectionHops.map(e => e);\n    } else {\n      obj.connectionHops = [];\n    }\n    message.version !== undefined && (obj.version = message.version);\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseIdentifiedChannel);\n    message.connectionHops = [];\n    if (object.state !== undefined && object.state !== null) {\n      message.state = object.state;\n    } else {\n      message.state = 0;\n    }\n    if (object.ordering !== undefined && object.ordering !== null) {\n      message.ordering = object.ordering;\n    } else {\n      message.ordering = 0;\n    }\n    if (object.counterparty !== undefined && object.counterparty !== null) {\n      message.counterparty = exports.Counterparty.fromPartial(object.counterparty);\n    } else {\n      message.counterparty = undefined;\n    }\n    if (object.connectionHops !== undefined && object.connectionHops !== null) {\n      for (const e of object.connectionHops) {\n        message.connectionHops.push(e);\n      }\n    }\n    if (object.version !== undefined && object.version !== null) {\n      message.version = object.version;\n    } else {\n      message.version = \"\";\n    }\n    if (object.portId !== undefined && object.portId !== null) {\n      message.portId = object.portId;\n    } else {\n      message.portId = \"\";\n    }\n    if (object.channelId !== undefined && object.channelId !== null) {\n      message.channelId = object.channelId;\n    } else {\n      message.channelId = \"\";\n    }\n    return message;\n  }\n};\nconst baseCounterparty = {\n  portId: \"\",\n  channelId: \"\"\n};\nexports.Counterparty = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCounterparty);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCounterparty);\n    if (object.portId !== undefined && object.portId !== null) {\n      message.portId = String(object.portId);\n    } else {\n      message.portId = \"\";\n    }\n    if (object.channelId !== undefined && object.channelId !== null) {\n      message.channelId = String(object.channelId);\n    } else {\n      message.channelId = \"\";\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCounterparty);\n    if (object.portId !== undefined && object.portId !== null) {\n      message.portId = object.portId;\n    } else {\n      message.portId = \"\";\n    }\n    if (object.channelId !== undefined && object.channelId !== null) {\n      message.channelId = object.channelId;\n    } else {\n      message.channelId = \"\";\n    }\n    return message;\n  }\n};\nconst basePacket = {\n  sequence: long_1.default.UZERO,\n  sourcePort: \"\",\n  sourceChannel: \"\",\n  destinationPort: \"\",\n  destinationChannel: \"\",\n  timeoutTimestamp: long_1.default.UZERO\n};\nexports.Packet = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.sequence.isZero()) {\n      writer.uint32(8).uint64(message.sequence);\n    }\n    if (message.sourcePort !== \"\") {\n      writer.uint32(18).string(message.sourcePort);\n    }\n    if (message.sourceChannel !== \"\") {\n      writer.uint32(26).string(message.sourceChannel);\n    }\n    if (message.destinationPort !== \"\") {\n      writer.uint32(34).string(message.destinationPort);\n    }\n    if (message.destinationChannel !== \"\") {\n      writer.uint32(42).string(message.destinationChannel);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(50).bytes(message.data);\n    }\n    if (message.timeoutHeight !== undefined) {\n      client_1.Height.encode(message.timeoutHeight, writer.uint32(58).fork()).ldelim();\n    }\n    if (!message.timeoutTimestamp.isZero()) {\n      writer.uint32(64).uint64(message.timeoutTimestamp);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, basePacket);\n    message.data = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sequence = reader.uint64();\n          break;\n        case 2:\n          message.sourcePort = reader.string();\n          break;\n        case 3:\n          message.sourceChannel = reader.string();\n          break;\n        case 4:\n          message.destinationPort = reader.string();\n          break;\n        case 5:\n          message.destinationChannel = reader.string();\n          break;\n        case 6:\n          message.data = reader.bytes();\n          break;\n        case 7:\n          message.timeoutHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 8:\n          message.timeoutTimestamp = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, basePacket);\n    message.data = new Uint8Array();\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = long_1.default.fromString(object.sequence);\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n    if (object.sourcePort !== undefined && object.sourcePort !== null) {\n      message.sourcePort = String(object.sourcePort);\n    } else {\n      message.sourcePort = \"\";\n    }\n    if (object.sourceChannel !== undefined && object.sourceChannel !== null) {\n      message.sourceChannel = String(object.sourceChannel);\n    } else {\n      message.sourceChannel = \"\";\n    }\n    if (object.destinationPort !== undefined && object.destinationPort !== null) {\n      message.destinationPort = String(object.destinationPort);\n    } else {\n      message.destinationPort = \"\";\n    }\n    if (object.destinationChannel !== undefined && object.destinationChannel !== null) {\n      message.destinationChannel = String(object.destinationChannel);\n    } else {\n      message.destinationChannel = \"\";\n    }\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n    if (object.timeoutHeight !== undefined && object.timeoutHeight !== null) {\n      message.timeoutHeight = client_1.Height.fromJSON(object.timeoutHeight);\n    } else {\n      message.timeoutHeight = undefined;\n    }\n    if (object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null) {\n      message.timeoutTimestamp = long_1.default.fromString(object.timeoutTimestamp);\n    } else {\n      message.timeoutTimestamp = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    message.sourcePort !== undefined && (obj.sourcePort = message.sourcePort);\n    message.sourceChannel !== undefined && (obj.sourceChannel = message.sourceChannel);\n    message.destinationPort !== undefined && (obj.destinationPort = message.destinationPort);\n    message.destinationChannel !== undefined && (obj.destinationChannel = message.destinationChannel);\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.timeoutHeight !== undefined && (obj.timeoutHeight = message.timeoutHeight ? client_1.Height.toJSON(message.timeoutHeight) : undefined);\n    message.timeoutTimestamp !== undefined && (obj.timeoutTimestamp = (message.timeoutTimestamp || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, basePacket);\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = object.sequence;\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n    if (object.sourcePort !== undefined && object.sourcePort !== null) {\n      message.sourcePort = object.sourcePort;\n    } else {\n      message.sourcePort = \"\";\n    }\n    if (object.sourceChannel !== undefined && object.sourceChannel !== null) {\n      message.sourceChannel = object.sourceChannel;\n    } else {\n      message.sourceChannel = \"\";\n    }\n    if (object.destinationPort !== undefined && object.destinationPort !== null) {\n      message.destinationPort = object.destinationPort;\n    } else {\n      message.destinationPort = \"\";\n    }\n    if (object.destinationChannel !== undefined && object.destinationChannel !== null) {\n      message.destinationChannel = object.destinationChannel;\n    } else {\n      message.destinationChannel = \"\";\n    }\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n    if (object.timeoutHeight !== undefined && object.timeoutHeight !== null) {\n      message.timeoutHeight = client_1.Height.fromPartial(object.timeoutHeight);\n    } else {\n      message.timeoutHeight = undefined;\n    }\n    if (object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null) {\n      message.timeoutTimestamp = object.timeoutTimestamp;\n    } else {\n      message.timeoutTimestamp = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst basePacketState = {\n  portId: \"\",\n  channelId: \"\",\n  sequence: long_1.default.UZERO\n};\nexports.PacketState = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(34).bytes(message.data);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, basePacketState);\n    message.data = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.sequence = reader.uint64();\n          break;\n        case 4:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, basePacketState);\n    message.data = new Uint8Array();\n    if (object.portId !== undefined && object.portId !== null) {\n      message.portId = String(object.portId);\n    } else {\n      message.portId = \"\";\n    }\n    if (object.channelId !== undefined && object.channelId !== null) {\n      message.channelId = String(object.channelId);\n    } else {\n      message.channelId = \"\";\n    }\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = long_1.default.fromString(object.sequence);\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, basePacketState);\n    if (object.portId !== undefined && object.portId !== null) {\n      message.portId = object.portId;\n    } else {\n      message.portId = \"\";\n    }\n    if (object.channelId !== undefined && object.channelId !== null) {\n      message.channelId = object.channelId;\n    } else {\n      message.channelId = \"\";\n    }\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = object.sequence;\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n    return message;\n  }\n};\nconst basePacketId = {\n  portId: \"\",\n  channelId: \"\",\n  sequence: long_1.default.UZERO\n};\nexports.PacketId = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, basePacketId);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.sequence = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, basePacketId);\n    if (object.portId !== undefined && object.portId !== null) {\n      message.portId = String(object.portId);\n    } else {\n      message.portId = \"\";\n    }\n    if (object.channelId !== undefined && object.channelId !== null) {\n      message.channelId = String(object.channelId);\n    } else {\n      message.channelId = \"\";\n    }\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = long_1.default.fromString(object.sequence);\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, basePacketId);\n    if (object.portId !== undefined && object.portId !== null) {\n      message.portId = object.portId;\n    } else {\n      message.portId = \"\";\n    }\n    if (object.channelId !== undefined && object.channelId !== null) {\n      message.channelId = object.channelId;\n    } else {\n      message.channelId = \"\";\n    }\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = object.sequence;\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n    return message;\n  }\n};\nconst baseAcknowledgement = {};\nexports.Acknowledgement = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.result !== undefined) {\n      writer.uint32(170).bytes(message.result);\n    }\n    if (message.error !== undefined) {\n      writer.uint32(178).string(message.error);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseAcknowledgement);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 21:\n          message.result = reader.bytes();\n          break;\n        case 22:\n          message.error = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseAcknowledgement);\n    if (object.result !== undefined && object.result !== null) {\n      message.result = bytesFromBase64(object.result);\n    }\n    if (object.error !== undefined && object.error !== null) {\n      message.error = String(object.error);\n    } else {\n      message.error = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.result !== undefined && (obj.result = message.result !== undefined ? base64FromBytes(message.result) : undefined);\n    message.error !== undefined && (obj.error = message.error);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseAcknowledgement);\n    if (object.result !== undefined && object.result !== null) {\n      message.result = object.result;\n    } else {\n      message.result = undefined;\n    }\n    if (object.error !== undefined && object.error !== null) {\n      message.error = object.error;\n    } else {\n      message.error = undefined;\n    }\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\n//# sourceMappingURL=channel.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}