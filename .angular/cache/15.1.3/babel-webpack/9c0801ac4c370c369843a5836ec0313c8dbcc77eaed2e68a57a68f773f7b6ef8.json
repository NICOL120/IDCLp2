{"ast":null,"code":"var NATIVE = require('./native');\nvar ERRORS = require('./errors');\nfunction _Buffer(value) {\n  return Buffer.isBuffer(value);\n}\nfunction Hex(value) {\n  return typeof value === 'string' && /^([0-9a-f]{2})+$/i.test(value);\n}\nfunction _LengthN(type, length) {\n  var name = type.toJSON();\n  function Length(value) {\n    if (!type(value)) return false;\n    if (value.length === length) return true;\n    throw ERRORS.tfCustomError(name + '(Length: ' + length + ')', name + '(Length: ' + value.length + ')');\n  }\n  Length.toJSON = function () {\n    return name;\n  };\n  return Length;\n}\nvar _ArrayN = _LengthN.bind(null, NATIVE.Array);\nvar _BufferN = _LengthN.bind(null, _Buffer);\nvar _HexN = _LengthN.bind(null, Hex);\nvar _StringN = _LengthN.bind(null, NATIVE.String);\nfunction Range(a, b, f) {\n  f = f || NATIVE.Number;\n  function _range(value, strict) {\n    return f(value, strict) && value > a && value < b;\n  }\n  _range.toJSON = function () {\n    return `${f.toJSON()} between [${a}, ${b}]`;\n  };\n  return _range;\n}\nvar INT53_MAX = Math.pow(2, 53) - 1;\nfunction Finite(value) {\n  return typeof value === 'number' && isFinite(value);\n}\nfunction Int8(value) {\n  return value << 24 >> 24 === value;\n}\nfunction Int16(value) {\n  return value << 16 >> 16 === value;\n}\nfunction Int32(value) {\n  return (value | 0) === value;\n}\nfunction Int53(value) {\n  return typeof value === 'number' && value >= -INT53_MAX && value <= INT53_MAX && Math.floor(value) === value;\n}\nfunction UInt8(value) {\n  return (value & 0xff) === value;\n}\nfunction UInt16(value) {\n  return (value & 0xffff) === value;\n}\nfunction UInt32(value) {\n  return value >>> 0 === value;\n}\nfunction UInt53(value) {\n  return typeof value === 'number' && value >= 0 && value <= INT53_MAX && Math.floor(value) === value;\n}\nvar types = {\n  ArrayN: _ArrayN,\n  Buffer: _Buffer,\n  BufferN: _BufferN,\n  Finite: Finite,\n  Hex: Hex,\n  HexN: _HexN,\n  Int8: Int8,\n  Int16: Int16,\n  Int32: Int32,\n  Int53: Int53,\n  Range: Range,\n  StringN: _StringN,\n  UInt8: UInt8,\n  UInt16: UInt16,\n  UInt32: UInt32,\n  UInt53: UInt53\n};\nfor (var typeName in types) {\n  types[typeName].toJSON = function (t) {\n    return t;\n  }.bind(null, typeName);\n}\nmodule.exports = types;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}