{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValConsAddress = exports.ValPubKey = exports.ValAddress = exports.AccPubKey = exports.AccAddress = void 0;\nvar bech32_1 = require(\"bech32\");\nfunction checkPrefixAndLength(prefix, data, length) {\n  try {\n    var vals = bech32_1.bech32.decode(data);\n    return vals.prefix === prefix && data.length == length;\n  } catch (e) {\n    return false;\n  }\n}\nvar AccAddress;\n(function (AccAddress) {\n  /**\n   * Checks if a string is a valid Terra account address.\n   *\n   * @param data string to check\n   */\n  function validate(data) {\n    // 44 for normal account and 64 for contract account\n    return checkPrefixAndLength('terra', data, 44) || checkPrefixAndLength('terra', data, 64);\n  }\n  AccAddress.validate = validate;\n  /**\n   * Converts a validator address into an account address\n   *\n   * @param address validator address\n   */\n  function fromValAddress(address) {\n    var vals = bech32_1.bech32.decode(address);\n    return bech32_1.bech32.encode('terra', vals.words);\n  }\n  AccAddress.fromValAddress = fromValAddress;\n})(AccAddress = exports.AccAddress || (exports.AccAddress = {}));\nvar AccPubKey;\n(function (AccPubKey) {\n  /**\n   * Checks if a string is a Terra account's public key\n   * @param data string to check\n   */\n  function validate(data) {\n    return checkPrefixAndLength('terrapub', data, 47);\n  }\n  AccPubKey.validate = validate;\n  /**\n   * Converts a Terra validator pubkey to an account pubkey.\n   * @param address validator pubkey to convert\n   */\n  function fromAccAddress(address) {\n    var vals = bech32_1.bech32.decode(address);\n    return bech32_1.bech32.encode('terrapub', vals.words);\n  }\n  AccPubKey.fromAccAddress = fromAccAddress;\n})(AccPubKey = exports.AccPubKey || (exports.AccPubKey = {}));\nvar ValAddress;\n(function (ValAddress) {\n  /**\n   * Checks if a string is a Terra validator address.\n   *\n   * @param data string to check\n   */\n  function validate(data) {\n    return checkPrefixAndLength('terravaloper', data, 51);\n  }\n  ValAddress.validate = validate;\n  /**\n   * Converts a Terra account address to a validator address.\n   * @param address account address to convert\n   */\n  function fromAccAddress(address) {\n    var vals = bech32_1.bech32.decode(address);\n    return bech32_1.bech32.encode('terravaloper', vals.words);\n  }\n  ValAddress.fromAccAddress = fromAccAddress;\n})(ValAddress = exports.ValAddress || (exports.ValAddress = {}));\nvar ValPubKey;\n(function (ValPubKey) {\n  /**\n   * Checks if a string is a Terra validator pubkey\n   * @param data string to check\n   */\n  function validate(data) {\n    return checkPrefixAndLength('terravaloperpub', data, 54);\n  }\n  ValPubKey.validate = validate;\n  /**\n   * Converts a Terra validator operator address to a validator pubkey.\n   * @param valAddress account pubkey\n   */\n  function fromValAddress(valAddress) {\n    var vals = bech32_1.bech32.decode(valAddress);\n    return bech32_1.bech32.encode('terravaloperpub', vals.words);\n  }\n  ValPubKey.fromValAddress = fromValAddress;\n})(ValPubKey = exports.ValPubKey || (exports.ValPubKey = {}));\nvar ValConsAddress;\n(function (ValConsAddress) {\n  /**\n   * Checks if a string is a Terra validator consensus address\n   * @param data string to check\n   */\n  function validate(data) {\n    return checkPrefixAndLength('terravalcons', data, 51);\n  }\n  ValConsAddress.validate = validate;\n})(ValConsAddress = exports.ValConsAddress || (exports.ValConsAddress = {}));\n//# sourceMappingURL=bech32.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}